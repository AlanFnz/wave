{"version":3,"sources":["webpack:///../src/components/Pagination/docs/Pagination.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","value","pageSize","totalItems","label","weak","as","fontWeight","isMDXComponent"],"mappings":"qUAUaA,EAAe,QAAG,qPAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,cAAY,cAEpB,sBACE,kBAAIC,WAAW,MAAI,+DACnB,kBAAIA,WAAW,MAAI,2CAA6C,sBAAQA,WAAW,MAAI,uBACvF,kBAAIA,WAAW,MAAI,0DAErB,kBACE,GAAM,UAAQ,UAEhB,YAAC,IAAgB,CAACD,QAAQ,qBAC1B,kBACE,GAAM,SAAO,SAEf,YAAC,IAAe,CAACA,QAAQ,oBACzB,kBACE,GAAM,mCAAiC,mCAEzC,YAAC,IAAsB,CAACA,QAAQ,2BAChC,kBACE,GAAM,OAAK,OAEb,kBACE,GAAM,gBAAc,gBAEtB,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBAAc,i4BA8B/B,kBACE,GAAM,SAAO,SAEf,wNAEA,YAAC,IAAU,CAACC,MAAO,EAAGC,SAAU,GAAIC,WAAY,IAAKC,MAAK,eAAwBL,QAAQ,eAC1F,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBAAc,mLAQ/B,uGACA,YAAC,IAAU,CAACC,MAAO,EAAGC,SAAU,GAAIC,WAAY,IAAKC,MAAO,YAAC,IAAI,CAACC,MAAI,EAACN,QAAQ,QAAO,OACzE,IACL,YAAC,IAAI,CAACO,GAAG,IAAIC,WAAW,WAAWF,MAAI,EAACN,QAAQ,QAC3C,EAAE,OAAK,KAEPA,QAAQ,eACrB,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBAAc,kTAe/B,kBACE,GAAM,iBAAe,iBAEvB,0IACmB,iBAAGA,WAAW,IAC7B,KAAQ,YAAU,WACF,yEAEpB,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBAAc,4PAS/B,kBACE,GAAM,cAAY,cAEpB,YAAC,IAAoB,CAACD,QAAQ,yBAC9B,kBACE,GAAM,WAAS,WAEjB,iDAAgC,0BAAYC,WAAW,KAAG,cAA4B,2EAC/D,0BAAYA,WAAW,KAAG,0BAAwC,KACzF,yEAAwD,iBAAGA,WAAW,IAClE,KAAQ,oDAAkD,sBAE9D,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBAAc,gcAYlC,mPAEDJ,EAAWY,gBAAiB","file":"component---src-components-pagination-docs-pagination-mdx-0ee817dc208e856cd6f2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Text } from '../../Text/Text';\nimport { Pagination } from '../Pagination';\nimport { PaginationPropsTable } from './PaginationPropsTable';\nimport { NormalPagination, SmallPagination, PaginationWithPageSize } from './PaginationProvider';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"pagination\"\n    }}>{`Pagination`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Use pagination to split long datasets like tables and lists`}</li>\n      <li parentName=\"ul\">{`As a rule of thumb set pagination after `}<strong parentName=\"li\">{`10, 15 or 20 items`}</strong></li>\n      <li parentName=\"ul\">{`Use small navigation on mobile and for small datasets`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"normal\"\n    }}>{`Normal`}</h3>\n    <NormalPagination mdxType=\"NormalPagination\" />\n    <h3 {...{\n      \"id\": \"small\"\n    }}>{`Small`}</h3>\n    <SmallPagination mdxType=\"SmallPagination\" />\n    <h3 {...{\n      \"id\": \"normal-with-multiple-page-sizes\"\n    }}>{`Normal with multiple page sizes`}</h3>\n    <PaginationWithPageSize mdxType=\"PaginationWithPageSize\" />\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"full-example\"\n    }}>{`Full example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export default () => {\n    const PAGE_SIZE = 20;\n    const TOTAL_ITEMS = 200;\n    \n    const [currentPage, setCurrentPage] = useState(1);\n\n    const lastPage = Math.ceil(TOTAL_ITEMS / PAGE_SIZE);\n\n    return (\n        <Pagination\n            value={currentPage}\n            pageSize={PAGE_SIZE}\n            totalItems={TOTAL_ITEMS}\n            label={\n                <Text weak>\n                    Page{' '}\n                    <Text as=\"b\" fontWeight=\"semibold\" weak>\n                        {currentPage} of {lastPage}\n                    </Text>\n                </Text>\n            }\n            onNextPage={() => setCurrentPage(current => current + 1)}\n            onPrevPage={() => setCurrentPage(current => current - 1)}\n            onSkipForward={() => setCurrentPage(lastPage)}\n            onSkipBackward={() => setCurrentPage(1)}\n        />\n    );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"label\"\n    }}>{`Label`}</h3>\n    <p>{`The label should be used to display the current state of the pagination which\ntypically consists of the current page and the total number of pages. This can be as simple as passing a string:`}</p>\n    <Pagination value={1} pageSize={20} totalItems={200} label={`Page ${1} of ${20}`} mdxType=\"Pagination\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pagination\n    value={currentPage}\n    pageSize={PAGE_SIZE}\n    totalItems={TOTAL_ITEMS}\n    label={\\`Page \\${currentPage} of \\${Math.ceil(TOTAL_ITEMS / PAGE_SIZE)}\\`}\n/>\n`}</code></pre>\n    <p>{`To display a label like in the examples above you can pass a custom component:`}</p>\n    <Pagination value={1} pageSize={20} totalItems={200} label={<Text weak mdxType=\"Text\">\n            Page{' '}\n            <Text as=\"b\" fontWeight=\"semibold\" weak mdxType=\"Text\">\n                {1} of {20}\n            </Text>\n        </Text>} mdxType=\"Pagination\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pagination\n    value={currentPage}\n    pageSize={PAGE_SIZE}\n    totalItems={TOTAL_ITEMS}\n    label={\n        <Text weak>\n            Page{' '}\n            <Text as=\"b\" fontWeight=\"semibold\" weak>\n                {currentPage} of {lastPage}\n            </Text>\n        </Text>\n    }\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h3>\n    <p>{`It is recommended to set ARIA labels to provide accessible names for the pagination inputs.\nThis also helps when `}<a parentName=\"p\" {...{\n        \"href\": \"#testing\"\n      }}>{`testing`}</a>{`. You can use the following props to provide translated\nARIA labels.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pagination\n    ariaLabelFirst=\"First\"\n    ariaLabelPrevious=\"Previous\"\n    ariaLabelNext=\"Next\"\n    ariaLabelLast=\"Last\"\n    ariaLabelSelectPageSizeContainer=\"Select page size container\" /* Only if you are using the \\`pageSizes\\` prop */\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <PaginationPropsTable mdxType=\"PaginationPropsTable\" />\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`In tests you can use the `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` attributes to select the individual buttons.\nHere is an example using `}<inlineCode parentName=\"p\">{`@testing-library/react`}</inlineCode>{`.`}</p>\n    <p>{`You can see how to test the page sizes select in `}<a parentName=\"p\" {...{\n        \"href\": \"https://wave.free-now.com/components/select-list\"\n      }}>{`Wave's SelectList`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`test('should select by aria-label', () => {\n    const { getByRole } = render(<Pagination value={1} pageSize={20} totalItems={200} />);\n\n    expect(getByRole('button', { name: 'First' })).toBeInTheDocument();\n    expect(getByRole('button', { name: 'Previous' })).toBeInTheDocument();\n    expect(getByRole('button', { name: 'Next' })).toBeInTheDocument();\n    expect(getByRole('button', { name: 'Last' })).toBeInTheDocument();\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}