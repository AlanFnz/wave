{"version":3,"file":"components-experimental-TextField-docs-TextField-stories.c266a747.iframe.bundle.js","mappings":";;;;;;;AAaA;AAGA;;;;ACRA;AAGA;;;;;AAKA;;AAEA;;;;;AAKA;;;;;;;;;;ACTA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;;AAGA;AAGA;AACA;;;;;;;ACrBA;;AAOA;;;;;AAKA;;;;;AAOA;;;;;;;;;;;;;AAaA;;;;;;;AASA;;;AAGA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;AAIA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;;AAKA;;;;AAIA;;AAEA;;AAEA;;AAEA;;;;;AAOA;;AAIA;AACA;;;;;AAKA;;;;;;AAMA;AACA;AACA;;;AAGA;AACA;;;AAsBA;;;;;;;;;;;;AC/DA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/TextField/ClearButton.tsx","webpack://@freenow/wave/./src/components/experimental/TextField/Label.ts","webpack://@freenow/wave/./src/components/experimental/TextField/Field.ts","webpack://@freenow/wave/./src/components/experimental/TextField/TextField.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Button as BaseButton, ButtonProps as BaseButtonProps } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { XCrossCircleIcon } from '../../../icons';\n\nconst StyledButton = styled(BaseButton)`\n    appearance: none;\n    background: none;\n    border: none;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    color: ${getSemanticValue('on-surface-variant')};\n`;\n\nfunction ClearButton(props: BaseButtonProps): ReactElement {\n    return (\n        <StyledButton {...props}>\n            <XCrossCircleIcon />\n        </StyledButton>\n    );\n}\n\nexport { ClearButton };\n","import { Label as BaseLabel } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { textStyles } from '../Text/Text';\n\nexport const flyingLabelStyles = css`\n    top: 0;\n    transform: translate3d(0, 0, 0);\n\n    ${textStyles.variants.label2}\n`;\n\nexport const Label = styled(BaseLabel)<{ $flying: boolean }>`\n    position: absolute;\n    top: 50%;\n    color: currentColor;\n\n    ${textStyles.variants.body1}\n\n    transform: translate3d(0, calc(-${textStyles.variants.body1.lineHeight} / 2), 0);\n    transform-origin: 0;\n\n    transition: top 200ms ease, font-size 200ms ease, transform 200ms ease;\n\n    ${props => props.$flying && flyingLabelStyles}\n`;\n","import { Input as BaseInput, TextArea as BaseTextArea } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { textStyles } from '../Text/Text';\n\nconst fieldStyles = css`\n    border: none;\n    background-color: unset;\n    outline: none;\n\n    display: block;\n    width: 100%;\n    padding: 0;\n\n    caret-color: ${getSemanticValue('interactive')};\n    color: ${getSemanticValue('on-surface')};\n\n    ${textStyles.variants.body1}\n\n    &::placeholder {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n`;\n\nexport const TextArea = styled(BaseTextArea).attrs({ rows: 1 })`\n    ${fieldStyles};\n\n    resize: none;\n    min-height: ${textStyles.variants.body1.lineHeight};\n`;\n\nexport const Input = styled(BaseInput)`\n    ${fieldStyles}\n\n    &[type='search'] {\n        &::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n","import React, { ReactElement, RefObject } from 'react';\nimport { TextField as BaseTextField, TextFieldProps as BaseTextFieldProps, Text } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { textStyles } from '../Text/Text';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport { ClearButton } from './ClearButton';\nimport { Label, flyingLabelStyles } from './Label';\nimport { TextArea, Input } from './Field';\n\nconst defaultAriaStrings = {\n    clearFieldButton: 'Clear field',\n    messageFieldIsCleared: 'The field is cleared'\n};\n\nconst InnerWrapper = styled.div<{ $autoResize: boolean }>`\n    width: 100%;\n    padding-top: ${get('space.4')};\n\n    position: relative;\n    overflow: hidden;\n\n    ${props =>\n        props.$autoResize &&\n        css`\n            display: grid;\n\n            &::after {\n                /* Styling should be the same */\n                ${textStyles.variants.body1}\n\n                /* Note the weird space! Needed to prevent jumpy behavior */\n                content: attr(data-replicated-value) ' ';\n\n                /* This is how textarea text behaves */\n                white-space: pre-wrap;\n\n                /* Hidden from view, clicks, and screen readers */\n                visibility: hidden;\n            }\n\n            &::after,\n            ${TextArea} {\n                overflow: hidden;\n\n                /* Place on top of each other */\n                grid-area: 1 / 1 / 2 / 2;\n            }\n        `}\n`;\n\nconst TopLine = styled.div`\n    box-sizing: content-box;\n\n    color: ${getSemanticValue('on-surface-variant')};\n    background-color: ${getSemanticValue('surface')};\n    border-width: 0.0625rem;\n    border-style: solid;\n    border-color: ${getSemanticValue('outline-variant')};\n    border-radius: ${get('radii.4')};\n\n    padding: ${get('space.2')} ${get('space.3')} ${get('space.2')} ${get('space.4')};\n    display: flex;\n    align-items: start;\n    gap: ${get('space.3')};\n\n    /* stylelint-disable selector-type-case, selector-type-no-unknown */\n    & > :not(${InnerWrapper}) {\n        flex-shrink: 0;\n        padding-top: ${get('space.2')};\n    }\n\n    &:hover {\n        border-color: ${getSemanticValue('outline')};\n        color: ${getSemanticValue('on-surface')};\n    }\n\n    &:focus-within {\n        color: ${getSemanticValue('interactive')};\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        outline-offset: -0.125rem;\n\n        ${Label} {\n            ${flyingLabelStyles}\n        }\n    }\n`;\n\nconst BottomLine = styled.footer`\n    display: grid;\n    grid-template-areas: '. counter';\n    justify-content: space-between;\n    gap: ${get('space.2')};\n\n    padding: ${get('space.1')} ${get('space.3')} ${get('space.0')};\n\n    color: ${getSemanticValue('on-surface-variant')};\n\n    ${textStyles.variants.label2}\n\n    &:empty {\n        display: none;\n    }\n`;\n\nconst Counter = styled.span`\n    grid-area: counter;\n`;\n\nconst Wrapper = styled(BaseTextField)`\n    padding: ${get('space.2')} ${get('space.0')};\n\n    &[data-disabled] {\n        opacity: 0.38;\n\n        ${TopLine} {\n            pointer-events: none;\n        }\n    }\n\n    &[data-invalid] {\n        ${Label},\n        ${BottomLine} {\n            color: ${getSemanticValue('negative')};\n        }\n\n        ${TopLine} {\n            border-color: ${getSemanticValue('negative')};\n        }\n    }\n`;\n\nexport interface TextFieldProps extends BaseTextFieldProps {\n    label: string;\n    leadingIcon?: React.ReactNode;\n    actionIcon?: React.ReactNode;\n    placeholder?: string;\n    description?: string;\n    errorMessage?: string;\n    multiline?: boolean;\n    /**\n     * If you project supports multiple languages, it is recommended to pass translated labels to these properties\n     */\n    ariaStrings?: {\n        clearFieldButton: string;\n        messageFieldIsCleared: string;\n    };\n}\n\nfunction TextField({\n    label,\n    description,\n    errorMessage,\n    placeholder,\n    leadingIcon,\n    actionIcon,\n    multiline = false,\n    ariaStrings = defaultAriaStrings,\n    ...props\n}: TextFieldProps): ReactElement {\n    const [text, setText] = React.useState(props.defaultValue || props.value || '');\n    const inputRef = React.useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n\n    const handleChange = (value: string) => {\n        setText(value);\n        props.onChange?.(value);\n    };\n\n    return (\n        <Wrapper {...props} value={text} onChange={handleChange}>\n            <TopLine>\n                {leadingIcon}\n                <InnerWrapper $autoResize={multiline} data-replicated-value={text}>\n                    <Label $flying={Boolean(placeholder || text.length > 0)}>{label}</Label>\n                    {multiline ? (\n                        <TextArea placeholder={placeholder} ref={inputRef as RefObject<HTMLTextAreaElement>} />\n                    ) : (\n                        <Input placeholder={placeholder} ref={inputRef as RefObject<HTMLInputElement>} />\n                    )}\n                </InnerWrapper>\n                {actionIcon ||\n                    (text.length > 0 ? (\n                        <ClearButton\n                            aria-controls={inputRef.current?.id}\n                            aria-label={ariaStrings.clearFieldButton}\n                            onPress={() => {\n                                inputRef.current.value = '';\n                                setText('');\n                            }}\n                        />\n                    ) : (\n                        <VisuallyHidden aria-live=\"polite\">{ariaStrings.messageFieldIsCleared}</VisuallyHidden>\n                    ))}\n            </TopLine>\n            <BottomLine>\n                {(description || errorMessage) && (\n                    <Text slot={description ? 'description' : 'errorMessage'}>{errorMessage || description}</Text>\n                )}\n                {Boolean(props.maxLength) && <Counter>{`${text.length} / ${props.maxLength}`}</Counter>}\n            </BottomLine>\n        </Wrapper>\n    );\n}\n\nexport { TextField };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    FontSizeProps,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps,\n    variant\n} from 'styled-system';\nimport { theme } from '../../../essentials/experimental/theme';\nimport { get } from '../../../utils/experimental/themeGet';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst variantStyles = variant(textStyles);\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(margin, variantStyles, fontFamily, textAlign)}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}