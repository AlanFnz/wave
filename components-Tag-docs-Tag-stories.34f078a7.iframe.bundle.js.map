{"version":3,"file":"components-Tag-docs-Tag-stories.34f078a7.iframe.bundle.js","mappings":";;AAsBA;;AAEA;AACA;AACA;;;AAKA;;;;;;;AASA;;AAEA;AACA;;;;;;;;;;AAUA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;;;AAKA;ACnBA;AAuBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Tag/Tag.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { FC, MouseEvent, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { CloseIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { Text } from '../Text/Text';\n\ninterface TagProps extends MarginProps {\n    /**\n     * The function to handle when the dismiss icon is clicked\n     */\n    onDismiss?: (e: MouseEvent) => void;\n    /**\n     * The prop to determine whether the dismiss functionality is enabled\n     */\n    dismissible?: boolean;\n}\n\nconst TagText = styled(Text).attrs({ theme })<Pick<TagProps, 'dismissible'>>`\n    color: ${Colors.ACTION_BLUE_900};\n    margin-left: 0.75rem;\n    margin-right: ${props => (props.dismissible ? '0.25rem' : '0.75rem')};\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    cursor: default;\n    transition: color 125ms ease;\n`;\n\nconst DismissIcon = styled(CloseIcon).attrs({ size: 18 })`\n    margin-right: 0.5rem;\n    transition: color 125ms ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst TagWrapper = styled.div.attrs({ theme })<TagProps>`\n    box-sizing: border-box;\n    background-color: ${Colors.ACTION_BLUE_50};\n    border: solid 0.0625rem ${Colors.ACTION_BLUE_900};\n    display: inline-flex;\n    align-items: center;\n    border-radius: 2rem;\n    height: 2rem;\n    margin-right: 0.25rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0;\n    transition: background-color 125ms ease;\n\n    ${margin}\n\n    &:hover {\n        background-color: ${Colors.ACTION_BLUE_900};\n\n        > ${TagText} {\n            color: ${Colors.WHITE};\n        }\n\n        > ${DismissIcon} {\n            color: ${Colors.WHITE};\n        }\n    }\n`;\n\nconst Tag: FC<PropsWithChildren<TagProps>> = ({ children, onDismiss, dismissible = true, ...rest }) => (\n    <TagWrapper {...rest}>\n        <TagText dismissible={dismissible}>{children}</TagText>\n        {dismissible && <DismissIcon data-testid=\"dismiss-icon\" color={Colors.ACTION_BLUE_900} onClick={onDismiss} />}\n    </TagWrapper>\n);\n\nexport { Tag, TagProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     * @deprecated use `secondary` instead\n     */\n    weak?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { weak, secondary, inverted, disabled } = props;\n    if (weak !== undefined) {\n        deprecatedProperty('Text', weak, 'weak', 'secondary', 'Rename `weak` to `secondary` to remove the warning.');\n    }\n\n    if (disabled) {\n        return get(inverted ? 'semanticColors.text.disabledInverted' : 'semanticColors.text.disabled')(props);\n    }\n\n    if (secondary || weak) {\n        return get(inverted ? 'semanticColors.text.secondaryInverted' : 'semanticColors.text.secondary')(props);\n    }\n\n    if (inverted) {\n        return get('semanticColors.text.primaryInverted')(props);\n    }\n\n    return get('semanticColors.text.primary')(props);\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}