{"version":3,"file":"34441.0dabe298.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;AC6FA;AAGA;;;AC/DA;AAGA;;;ACtCA;AACA;AACA;;AAEA;;ACnDA;;;;;;;AAOA;;ACwCA;;;;;;;AASA;AAUA;;;;;;AAMA;;;;AAIA;;;;AAMA;;;;;AAKA;AAGA;AACA;;;AAGA;AAGA;;AAEA;AACA;;AAEA;AACA;;;;;AAOA;;;;;;;;;AASA;AACA;AACA;;AAIA;ACrEA;AACA;AACA;;;AAGA;AACA;;;AClCA;;AAEA;AAGA;;;;AC6CA;AACA;;;;;;AAMA;AAGA;;AC7EA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACzBA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;;;AAKA;;;AApDA;;AAyDA;;AAEA;;;AAUA;ACpEA;;AADA;;;;AAAA;AAWA;;;AAXA;AAeA;;;AAfA;;;AAuBA;AACA;;AAIA;;;AAGA;AACA;AASA;;ACzCA;AACA;;AAEA;;;;;ACuCA;ACrCA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAKA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAOA;;;;;AAOA;;;;;AAQA;;;AAGA;AACA;;AAEA;;;AArEA;;AA0EA;AACA;;AAEA;;;AAUA;ACtFA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;AAwBA;AAxBA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;AA+CA;;;;;AAOA;;;;;AAQA;;;AAGA;AACA;;AAEA;;;AArEA;;AA0EA;AACA;;AAEA;;;AAUA;ACtFA;;AADA;;;;AAAA;AAWA;;;AAXA;AAeA;;;AAfA;;;AAuBA;AACA;;AAIA;;;AAGA;AACA;AASA;;ACzCA;AACA;;AAEA;;;;;ACwCA;;ACpCA;;;;AAMA;;AAEA;AACA;;;;;;;;;AASA;;;;AAIA;;;AAKA;AACA;AAsEA;ACvGA;;;;;;;;ACSA;;;;;;;;ACEA;ACkDA;AAGA;;ACnDA;AAGA;;;ACDA;AAGA;;;;;AAKA;AACA;AACA;;;;AAIA;;AAIA;;AAIA;;;;;;AAMA;;;;;;AAQA;;;;;;;;;;;;ACxCA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;ACrDA;;;;;;;;AC2CA;;AAEA;;;;AAhCA;;;AAKA;;;AAKA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;AAoBA;;;;;;;ACjDA;AAGA;;;;ACNA;AACA;AACA;AARA;ACJA;ACoEA;;AAEA;;AAEA;AACA;;;;AAIA;;AAIA;;;AAGA;;AAEA;AACA;AACA;AAhEA;;;;;;;;;;AA2EA;;;AAGA;AApDA;AAGA;AACA;;AAIA;AACA;;AAKA;AAiDA;;;AAGA;;;;;;;AAOA;;;;;AAKA;AACA;;;;AAIA;;;;;;;;AC9GA;AAGA;;;;;;;;;AAWA;;;;ACpBA;AACA;AACA;;;AAGA;AACA;AACA;;;AClBA;;AAEA;;;;;;;;;;ACDA;;;;;;;;;;;;;;;;;AAiBA;;;AAaA;;;;;;AAMA;AACA;;AAEA;;AAEA;;;;ACrBA;AAGA;AACA;;AAEA;AACA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;;;AAKA;;;AC7CA;AACA;ACwBA;AACA;;;;;;;;;AASA;AAGA;ACpCA;AACA;;;;;AAKA;;;;AAIA;;;AAGA;AAGA;ACbA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;;;AAGA;AAGA;;;;;;ACTA;;;AAGA;AA0BA;;;AApBA;;;;;AAKA;;;;;AAKA;;;AAGA;AASA;;AAKA;;;AAGA;AACA;;;AC9CA;ACGA;;AAEA;AACA;AACA;;;AAKA;;;;;;;AASA;;AAEA;AACA;;;;;;;;;;AAUA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;;;AAKA;;;;;;;ACvCA;AAGA;;;;;AAOA;AAiCA;;;;AC/CA;AACA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;AApCA;;;;;;;;;ACWA;;;;AAIA;;;;;;ACRA;;;AAGA;;;;;;;;;ACQA;;AAoEA;;AAGA;;AAEA;;;;;;;AAOA;;;;;;;;;;;;AAYA;;;AAIA;;AAuBA;;;;;;;;ACvIA;;ACAA;;ACeA;AACA;;;AAGA;AACA;;;AAGA;AACA;;AAIA;ACnBA;AAGA;;AAEA;;;AAGA;AACA;;;AAGA;AACA;;AAIA;AACA;;;;AAIA;;;AAGA;AACA;;;AAGA;AACA;;AAIA;AACA;;AAIA;;AC1CA;AAGA;;AAMA;AACA;;;AAKA;;;ACZA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;AAGA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;AAwDA;AACA;;;;;AAKA;;AAjHA;;AAqHA;;AAEA;AAGA;;;;;;;;;;;;AC9GA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;;;;;;;;;;AAWA;AACA;;;;;AAKA;AACA;;;AAGA;;;;AAIA;;;;;;;ACnEA;;;;;;;AAOA;;;;;;;ACuDA;;AAEA;;;;AA5CA;;;AAKA;;;AAKA;;;AAIA;AACA;;;AAGA;AACA;;AAIA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;AAmBA;;;;;;;;ACtCA;AAGA;;;;ACLA;;;;;;AAMA;;;AAGA;;AAEA;AAGA;;;;ACQA;AACA;AACA;;;AAGA;;;;;;;;;;;AA7DA;AAGA;AACA;AACA;;AAKA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAKA;AAEA;AACA;AACA;AAIA;AACA;AACA;;;;AAIA;;;;;;;;AC7BA;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;AAIA;;;AAKA;;;;;;;;AAQA;;;;;;;;AAQA;;;;AAIA;;;;AAMA;;;;;;;AASA;;;;;;;AAcA;;;;;;;;;;;ACpCA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;AASA;AAGA;;;;AAMA;AACA;;;;;;;AASA;AACA;;;;;;;AAsGA;;;;;AC3JA;;AAEA;AAGA;;;;;;AAQA;;AAEA;AAGA;;AC1BA;;;;AC8FA;;AAEA;AACA;AAGA;AACA;AAGA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Button/TextButton.tsx","webpack://@freenow/wave/./src/components/Card/Card.tsx","webpack://@freenow/wave/./src/components/Dimming/Dimming.tsx","webpack://@freenow/wave/./src/components/FilePicker/FilePicker.tsx","webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/HelperText/HelperText.tsx","webpack://@freenow/wave/./src/components/Label/Label.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Modal/components/CenteredCard.tsx","webpack://@freenow/wave/./src/components/Modal/components/DimmingFade.tsx","webpack://@freenow/wave/./src/components/Modal/components/TopRightXIcon.tsx","webpack://@freenow/wave/./src/components/Modal/Modal.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/CenteredCard.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/SideCard.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/DimmingFade.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/TopRightXIcon.tsx","webpack://@freenow/wave/./src/components/Offcanvas/Offcanvas.tsx","webpack://@freenow/wave/./src/components/Pagination/Pagination.tsx","webpack://@freenow/wave/./src/components/PhoneInput/components/DynamicWidthMenu.tsx","webpack://@freenow/wave/./src/components/PhoneInput/components/Option.tsx","webpack://@freenow/wave/./src/components/PhoneInput/components/SingleValue.tsx","webpack://@freenow/wave/./src/components/PhoneInput/PhoneInput.tsx","webpack://@freenow/wave/./src/components/Popover/PopoverContent.tsx","webpack://@freenow/wave/./src/components/Popover/Popover.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/Checkmark.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/TapArea.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/RadioButton/RadioButton.tsx","webpack://@freenow/wave/./src/components/Select/SelectLabel.ts","webpack://@freenow/wave/./src/components/Select/selectVariantSizes.ts","webpack://@freenow/wave/./src/components/Select/SelectInput.ts","webpack://@freenow/wave/./src/components/Select/Select.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Label.tsx","webpack://@freenow/wave/./src/components/SelectList/components/Wrapper.tsx","webpack://@freenow/wave/./src/components/Skeleton/Skeleton.tsx","webpack://@freenow/wave/./src/components/TabBar/Link.tsx","webpack://@freenow/wave/./src/components/TabBar/TabBar.tsx","webpack://@freenow/wave/./src/components/Table/components/Table.tsx","webpack://@freenow/wave/./src/components/Table/components/TableCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableHeaderCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableRow.tsx","webpack://@freenow/wave/./src/components/Table/components/TableSortableHeaderCell.tsx","webpack://@freenow/wave/./src/components/Tag/Tag.tsx","webpack://@freenow/wave/./src/components/Textarea/Textarea.tsx","webpack://@freenow/wave/./src/components/Toggle/Slide.tsx","webpack://@freenow/wave/./src/components/Toggle/Input.tsx","webpack://@freenow/wave/./src/components/Toggle/Label.tsx","webpack://@freenow/wave/./src/components/Tooltip/Tooltip.tsx","webpack://@freenow/wave/./src/components/Accordion/components/ChevronUp.tsx","webpack://@freenow/wave/./src/components/Accordion/components/ChevronDown.tsx","webpack://@freenow/wave/./src/components/Accordion/components/Compact.tsx","webpack://@freenow/wave/./src/components/Accordion/components/Default.tsx","webpack://@freenow/wave/./src/components/Accordion/Accordion.tsx","webpack://@freenow/wave/./src/components/Banner/Banner.tsx","webpack://@freenow/wave/./src/components/Checkbox/components/Checkmark.tsx","webpack://@freenow/wave/./src/components/Checkbox/components/TapArea.tsx","webpack://@freenow/wave/./src/components/Checkbox/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/Checkbox/Checkbox.tsx","webpack://@freenow/wave/./src/components/InlineSpinner/InlineSpinner.tsx","webpack://@freenow/wave/./src/components/Datepicker/Day/DayButton.tsx","webpack://@freenow/wave/./src/components/Datepicker/Month.tsx","webpack://@freenow/wave/./src/components/Datepicker/Datepicker.tsx","webpack://@freenow/wave/./src/components/Datepicker/DatepickerRangeInput.tsx","webpack://@freenow/wave/./src/components/Divider/Divider.tsx","webpack://@freenow/wave/./src/components/Grid/Grid.tsx","webpack://@freenow/wave/./src/components/InfoBanner/InfoBanner.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button: React.FC<ButtonProps> = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ResponsiveValue, variant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface TextButtonProps extends BaseButtonProps {\n    /**\n     * adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define base colors\n     */\n    variant?: ResponsiveValue<'default' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        default: {\n            color: get('semanticColors.textButton.primary.text'),\n            fill: get('semanticColors.textButton.primary.icon'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.primary.textHover'),\n                fill: get('semanticColors.textButton.primary.iconHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.primary.textDisabled'),\n                fill: get('semanticColors.textButton.primary.iconDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.textButton.danger.text'),\n            fill: get('semanticColors.textButton.danger.icon'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.danger.textHover'),\n                fill: get('semanticColors.textButton.danger.iconHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.danger.textDisabled'),\n                fill: get('semanticColors.textButton.danger.iconDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        default: {\n            color: get('semanticColors.textButton.primary.textInverted'),\n            fill: get('semanticColors.textButton.primary.iconInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.primary.textHoverInverted'),\n                fill: get('semanticColors.textButton.primary.iconHoverInverted')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.primary.textDisabledInverted'),\n                fill: get('semanticColors.textButton.primary.iconDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.textButton.danger.textInverted'),\n            fill: get('semanticColors.textButton.danger.iconInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.danger.textHoverInverted'),\n                fill: get('semanticColors.textButton.danger.iconHoverInverted')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.danger.textDisabledInverted'),\n                fill: get('semanticColors.textButton.danger.iconDisabledInverted')\n            }\n        }\n    }\n});\n\nconst TextButton: React.FC<TextButtonProps> = styled(BaseButton)<TextButtonProps>`\n    transition: color 200ms, fill 200ms;\n\n    ${props => (props.inverted ? invertedVariantStyles(props) : variantStyles(props))};\n`;\n\nTextButton.defaultProps = {\n    size: 'medium',\n    variant: 'default'\n};\n\nexport { TextButton, TextButtonProps };\n","import styled, { StyledComponent } from 'styled-components';\nimport {\n    borderRadius,\n    BorderRadiusProps,\n    compose,\n    height,\n    HeightProps,\n    padding,\n    PaddingProps,\n    ResponsiveValue,\n    space,\n    SpaceProps,\n    variant,\n    width,\n    WidthProps\n} from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ntype CardProps = BorderRadiusProps &\n    HeightProps &\n    SpaceProps &\n    WidthProps &\n    PaddingProps & {\n        /**\n         * Set the visual depth of the card by adding a shadow (available values: 0, 100, 200, 300)\n         */\n        level?: ResponsiveValue<0 | 100 | 200 | 300>;\n    };\n\nconst levelVariant = variant({\n    prop: 'level',\n    variants: {\n        0: {\n            boxShadow: 'none'\n        },\n        100: {\n            boxShadow: theme.shadows.small\n        },\n        200: {\n            boxShadow: theme.shadows.medium\n        },\n        300: {\n            boxShadow: theme.shadows.large\n        }\n    }\n});\n\nconst Card: StyledComponent<'div', typeof theme, CardProps, 'theme'> = styled.div.attrs({ theme })`\n    overflow: auto;\n    box-sizing: border-box;\n    background-color: ${Colors.WHITE};\n    border-radius: ${get('radii.1')};\n    padding: ${get('space.5')};\n\n    ${compose(levelVariant, borderRadius, height, space, width, padding)}\n`;\n\nexport { Card, CardProps };\n","import styled from 'styled-components';\n\nimport { Elevation, SemanticColors } from '../../essentials';\n\nconst Dimming = styled.div`\n    background-color: ${SemanticColors.dialog.dimming};\n    height: 100%;\n    left: 0;\n    opacity: 0.6;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: ${Elevation.DIMMING};\n`;\n\nexport { Dimming };\n","import React, { ComponentPropsWithoutRef, FC, MouseEventHandler, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MarginProps } from 'styled-system';\nimport { Colors, MediaQueries } from '../../essentials';\nimport { CheckCircleOutlineIcon, ShareIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Button } from '../Button/Button';\nimport { Text } from '../Text/Text';\nimport { shrinkFileName } from './utils/format';\n\ninterface FilePickerProps extends MarginProps, ComponentPropsWithoutRef<'input'> {\n    /**\n     * Sets the name property of input element in the DOM.\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/name\n     */\n    name: string;\n    /**\n     * One or more unique file type identifiers describing\n     * files types to allow.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    accept?: string;\n    /**\n     * What source to use for capturing image or video data.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    capture?: boolean | 'user' | 'environment';\n    /**\n     * Text to provide a clear description of what the user should upload\n     */\n    label: string;\n    /**\n     * Text to display within component button, it describes the main action,\n     * it works better when short\n     */\n    buttonText: string;\n    /**\n     * Keep the action button displayed instead of showing the success state.\n     */\n    alwaysShowActionButton?: boolean;\n    /**\n     * Whether the component should render an error state\n     */\n    error?: boolean;\n    /**\n     * Callback to be used when the input receives a new file\n     */\n    onFileChange?: (file: File, event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst InputButton = styled(Button)`\n    font-size: ${get('fontSizes.1')};\n    line-height: 1;\n    font-weight: 400;\n    height: auto;\n    min-width: auto;\n    padding: 0.5rem 0.75rem;\n    white-space: nowrap;\n`;\n\nconst ICON_FILE_FEEDBACK_COLOR = Colors.POSITIVE_GREEN_900;\n\ninterface OutlinerProps extends BoxProps {\n    disabled: boolean;\n    error: boolean;\n    hasValidFile: boolean;\n}\n\n// NOTE: we want to affect the color of only one icon SVG and not the ICON_FILE_FEEDBACK_COLOR\nconst Outliner = styled(Box)<OutlinerProps>`\n    border: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    box-sizing: border-box;\n    cursor: pointer;\n    position: relative;\n    transition: background-color ease 200ms, border-color ease 200ms;\n\n    ${Text} {\n        cursor: pointer;\n    }\n\n    ${({ disabled }) =>\n        disabled &&\n        css`\n            opacity: 0.5;\n\n            &,\n            ${InputButton}, ${Text} {\n                cursor: not-allowed;\n            }\n        `}\n\n    ${({ error }) =>\n        error &&\n        css`\n            box-shadow: inset 0 0 0 0.0625rem ${Colors.NEGATIVE_ORANGE_900};\n            border-color: ${Colors.NEGATIVE_ORANGE_900};\n        `}\n\n    ${({ hasValidFile }) =>\n        hasValidFile &&\n        css`\n            ${MediaQueries.medium} {\n                &:hover {\n                    background-color: ${Colors.ACTION_BLUE_50};\n                    border-color: ${Colors.ACTION_BLUE_50};\n\n                    svg:not([color='${Colors.POSITIVE_GREEN_900}']) path {\n                        fill: ${Colors.ACTION_BLUE_900};\n                    }\n                }\n            }\n        `}\n`;\n\nconst Input = styled.input`\n    height: 100%;\n    left: 0;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n    outline: none;\n\n    &:focus + ${Outliner} {\n        border-color: ${Colors.ACTION_BLUE_900};\n        box-shadow: inset 0 0 0 0.0625rem ${Colors.ACTION_BLUE_900};\n    }\n`;\n\nconst FilePicker: FC<FilePickerProps> = ({\n    name,\n    accept = '*',\n    capture,\n    label,\n    buttonText,\n    error = false,\n    onFileChange = () => undefined,\n    onChange = () => undefined,\n    disabled = false,\n    alwaysShowActionButton = false,\n    ...nonInputProps\n}: FilePickerProps) => {\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [file, setFile] = useState<File | null>();\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const eventFile = e.target.files?.[0];\n\n        onChange(e);\n        onFileChange(eventFile, e);\n        setFile(eventFile);\n    };\n    const onClickHandler: MouseEventHandler = e => {\n        // Avoid label trigger file selection twice\n        e.preventDefault();\n        // Avoid button trigger file selection twice\n        e.stopPropagation();\n        // Allow other spaces of the component trigger file selection\n        inputEl.current.click();\n    };\n    const validFileSelected = file && !error;\n\n    return (\n        <Box position=\"relative\" {...nonInputProps}>\n            <Input\n                accept={accept}\n                capture={capture}\n                disabled={disabled}\n                id={name}\n                multiple={false}\n                name={name}\n                onChange={onInputChange}\n                ref={inputEl}\n                type=\"file\"\n            />\n            <Outliner\n                minHeight=\"5.125rem\"\n                alignItems=\"stretch\"\n                data-testid=\"filepicker-outliner\"\n                display=\"flex\"\n                disabled={disabled}\n                hasValidFile={validFileSelected}\n                error={error}\n                justifyContent=\"space-between\"\n                onClick={onClickHandler}\n                px={2}\n                py={validFileSelected ? '1.25rem' : 3}\n            >\n                <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" pr={2}>\n                    <Text as=\"label\" htmlFor={name} fontSize={1}>\n                        {label}\n                    </Text>\n                    <Text weak fontSize={1}>\n                        {file && shrinkFileName(file)}\n                    </Text>\n                </Box>\n                <Box display={{ _: 'none', medium: 'flex' }} alignItems=\"center\" justifyContent=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleOutlineIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <InputButton variant=\"secondary\" type=\"button\" tabIndex={-1} onClick={onClickHandler}>\n                            {buttonText}\n                        </InputButton>\n                    )}\n                </Box>\n                <Box display={{ _: 'flex', medium: 'none' }} alignItems=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleOutlineIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <ShareIcon />\n                    )}\n                </Box>\n            </Outliner>\n        </Box>\n    );\n};\n\nexport { FilePicker, FilePickerProps };\n","import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nconst DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, ResponsiveValue, variant } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { Text, TextProps } from '../Text/Text';\n\ninterface HelperTextProps extends TextProps {\n    /**\n     * Set the appropriate colors for component with 'info' as default\n     */\n    variant?: ResponsiveValue<'info' | 'danger'>;\n    /**\n     * Adjust component for display on a dark background\n     */\n    inverted?: boolean;\n}\n\nconst getVariants = (inverted?: boolean) =>\n    variant({\n        variants: {\n            info: {\n                color: inverted ? Colors.AUTHENTIC_BLUE_350 : Colors.AUTHENTIC_BLUE_550\n            },\n            danger: {\n                color: inverted ? Colors.NEGATIVE_ORANGE_900 : Colors.NEGATIVE_ORANGE_1000\n            }\n        }\n    });\n\nconst HelperText: React.FC<HelperTextProps> = styled(Text).attrs({ theme })`\n    display: block;\n    font-size: ${get('fontSizes.0')};\n    text-align: left;\n    ${props => compose(getVariants(props.inverted), margin)};\n`;\n\nHelperText.defaultProps = {\n    inverted: false,\n    variant: 'info'\n};\n\nexport { HelperText, HelperTextProps };\n","import styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { Text } from '../Text/Text';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LabelProps extends MarginProps {\n    /**\n     * Set the appropriate colors for the component with 'default' as a default\n     */\n    variant?: ResponsiveValue<'default' | 'info' | 'success' | 'warning' | 'danger'>;\n\n    /**\n     * Use the alternative version of the label for critical status and extra emphasis\n     */\n    filled?: boolean;\n}\n\nconst normalVariantStyles = variant({\n    variants: {\n        default: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.AUTHENTIC_BLUE_200,\n            backgroundColor: Colors.AUTHENTIC_BLUE_50\n        },\n        info: {\n            color: Colors.ACTION_BLUE_900,\n            borderColor: Colors.ACTION_BLUE_350,\n            backgroundColor: Colors.ACTION_BLUE_50\n        },\n        success: {\n            color: Colors.POSITIVE_GREEN_1000,\n            borderColor: Colors.POSITIVE_GREEN_350,\n            backgroundColor: Colors.POSITIVE_GREEN_50\n        },\n        warning: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.ATTENTION_YELLOW_350,\n            backgroundColor: Colors.ATTENTION_YELLOW_50\n        },\n        danger: {\n            color: Colors.NEGATIVE_ORANGE_1000,\n            borderColor: Colors.NEGATIVE_ORANGE_350,\n            backgroundColor: Colors.NEGATIVE_ORANGE_50\n        }\n    }\n});\n\nconst filledVariantStyles = variant({\n    variants: {\n        default: {\n            color: Colors.WHITE,\n            borderColor: Colors.AUTHENTIC_BLUE_350,\n            backgroundColor: Colors.AUTHENTIC_BLUE_350\n        },\n        info: {\n            color: Colors.WHITE,\n            borderColor: Colors.ACTION_BLUE_900,\n            backgroundColor: Colors.ACTION_BLUE_900\n        },\n        success: {\n            color: Colors.WHITE,\n            borderColor: Colors.POSITIVE_GREEN_900,\n            backgroundColor: Colors.POSITIVE_GREEN_900\n        },\n        warning: {\n            color: Colors.AUTHENTIC_BLUE_900,\n            borderColor: Colors.ATTENTION_YELLOW_900,\n            backgroundColor: Colors.ATTENTION_YELLOW_900\n        },\n        danger: {\n            color: Colors.WHITE,\n            borderColor: Colors.NEGATIVE_ORANGE_900,\n            backgroundColor: Colors.NEGATIVE_ORANGE_900\n        }\n    }\n});\n\nconst Label = styled(Text).attrs({ theme })<LabelProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    font-size: 0.625rem;\n    border-radius: ${get('radii.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    padding: 0.1875rem 0.5rem;\n\n    border-width: 0.0625rem;\n    border-style: solid;\n\n    ${props => compose(props.filled ? filledVariantStyles : normalVariantStyles, margin)(props)}\n`;\n\nLabel.defaultProps = {\n    variant: 'default'\n};\n\nexport { Label, LabelProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.ACTION_BLUE_900)};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${p => (p.inverted ? Colors.WHITE : Colors.ACTION_BLUE_900)};\n    }\n\n    &:hover,\n    &:active {\n        color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_350 : Colors.ACTION_BLUE_1000)};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst fromTop = css`\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translate(-50%, -50%);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translate(-50%, -50%);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.98);\n    }\n`;\n\nconst scaleUp = css`\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.94);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translate(-50%, -50%) scale(1);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translate(-50%, -50%) scale(1);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.98);\n    }\n`;\n\nconst StyledCard = styled(Card)<{ fullscreen?: boolean }>`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    max-height: calc(100% - 2rem);\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => (p.fullscreen ? scaleUp : fromTop)};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface CenteredCardProps extends CardProps {\n    visible: boolean;\n    fullscreen?: boolean;\n}\n\nconst CenteredCard: React.FC<CenteredCardProps> = ({ visible, width = '37.5rem', ...rest }: CenteredCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} width={width} level={rest.fullscreen ? 0 : 300} />\n    </CSSTransition>\n);\n\nexport { CenteredCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Dimming } from '../../Dimming/Dimming';\nimport { Colors } from '../../../essentials';\n\nconst TRANSITION_KEY = 'dimming-fade-animation';\nconst ANIMATION_DURATION = 200;\n\nconst fadeInAnimation = (maxOpacity = 0.6) => css`\n    transition: opacity ${ANIMATION_DURATION}ms cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n    }\n`;\n\nconst fullscreenDimming = css`\n    background-color: ${Colors.WHITE};\n    opacity: 1;\n`;\n\nconst DimmingFadeStyled = styled(Dimming)<{ fullscreen?: boolean }>`\n    will-change: opacity;\n\n    ${p => (p.fullscreen ? fadeInAnimation(1) : fadeInAnimation())};\n    ${p => (p.fullscreen ? fullscreenDimming : undefined)}\n`;\n\ninterface DimmingFadeProps {\n    visible: boolean;\n    fullscreen?: boolean;\n    onClick: (event: React.MouseEvent) => void;\n}\n\nconst DimmingFade: React.FC<DimmingFadeProps> = ({ visible, ...rest }: DimmingFadeProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <DimmingFadeStyled {...rest} />\n    </CSSTransition>\n);\n\nexport { DimmingFade, ANIMATION_DURATION };\n","import styled from 'styled-components';\nimport { Elevation, Spaces } from '../../../essentials';\nimport { CloseIcon } from '../../../icons';\n\nconst TopRightXIcon = styled(CloseIcon)`\n    position: absolute;\n    top: ${Spaces[1]};\n    right: ${Spaces[1]};\n    cursor: pointer;\n    z-index: ${Elevation.CARD_ON_DIMMING};\n`;\n\nexport { TopRightXIcon };\n","import React, { useEffect, useState, ReactNode, useContext, useRef } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { WidthProps } from 'styled-system';\nimport { useIsEscKeyPressed } from '../../utils/hooks/useIsEscKeyPressed';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION, CenteredCard } from './components/CenteredCard';\nimport { ANIMATION_DURATION as DIMMING_ANIMATION_DURATION, DimmingFade } from './components/DimmingFade';\nimport { TopRightXIcon } from './components/TopRightXIcon';\n\ntype DismissFunc = () => void;\n\nconst DismissContext = React.createContext<DismissFunc>(undefined);\n\nconst useModalDismiss = (): DismissFunc => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useModalDismiss must be used within a <Modal />');\n    }\n\n    return dismiss;\n};\n\ninterface ModalProps extends WidthProps {\n    /**\n     * Show the modal covering the whole page to focus the users attention\n     */\n    fullscreen?: boolean;\n    /**\n     * Makes the modal dismissible by the user (defaults to true)\n     */\n    dismissible?: boolean;\n    /**\n     * Function that will be called when the user intends to close the modal\n     */\n    onClose?: () => void;\n    /**\n     * Children can be rendered with a dismiss function as render prop. Calling\n     * the dismiss function will close the Modal.\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n}\n\nconst PreventBackgroundScroll = createGlobalStyle`\n    body {\n        overflow: hidden;\n    }\n`;\n\nconst ANIMATION_DURATION = Math.max(DIMMING_ANIMATION_DURATION, CARD_ANIMATION_DURATION);\n\n/*\n * We define the types for the props twice because the render props won't be inferred correctly\n * when only using `React.FC<ModalProps>`. This leads to compiler errors when passing the\n * dismiss function.\n */\nconst Modal: React.FC<ModalProps> = ({ children, onClose, dismissible, ...rest }: ModalProps) => {\n    const [visible, setVisible] = useState(true);\n    const isEscKeyPressed = useIsEscKeyPressed();\n    const closeTimeout = useRef(null);\n\n    const handleClose: DismissFunc = () => {\n        setVisible(false);\n\n        if (onClose) {\n            closeTimeout.current = setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const handleDimmingClick = () => {\n        if (dismissible && !rest.fullscreen) {\n            handleClose();\n        }\n    };\n\n    useEffect(() => {\n        if (dismissible && isEscKeyPressed) {\n            handleClose();\n        }\n    }, [dismissible, isEscKeyPressed]);\n\n    useEffect(\n        () => () => {\n            if (closeTimeout.current) clearTimeout(closeTimeout.current);\n        },\n        []\n    );\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(handleClose);\n        }\n\n        return children;\n    };\n\n    return (\n        <DismissContext.Provider value={handleClose}>\n            <DimmingFade\n                onClick={handleDimmingClick}\n                visible={visible}\n                fullscreen={rest.fullscreen}\n                data-testid=\"dimming-background\"\n            >\n                {dismissible && rest.fullscreen && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n            </DimmingFade>\n            <CenteredCard visible={visible} {...rest}>\n                {dismissible && !rest.fullscreen && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                {renderChildren()}\n            </CenteredCard>\n            <PreventBackgroundScroll />\n        </DismissContext.Provider>\n    );\n};\n\nModal.defaultProps = {\n    dismissible: true\n};\n\nexport { Modal, ModalProps, useModalDismiss };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst inFrom = {\n    top: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(0%, calc(-50% - 1rem));\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(-0%, -50%);\n        }\n    `,\n    bottom: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(0%, calc(50% + 1rem));\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(0%, 10%);\n        }\n    `\n};\n\nconst position = {\n    top: css`\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: unset;\n    `,\n    bottom: css`\n        left: 0;\n        right: 0;\n        top: unset;\n        bottom: 0;\n    `\n};\n\nconst StyledCard = styled(Card)<{ side?: string }>`\n    position: fixed;\n    \n    left: ${p => (p.side === 'right' ? 'unset' : 0)};\n    right: ${p => (p.side === 'right' ? 0 : 'unset')};\n    transform: translate(0%, 0%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    width: 100%;\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => inFrom[p.side]};\n    ${p => position[p.side]};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface CenteredCardProps extends CardProps {\n    visible: boolean;\n    side: string;\n}\n\nconst CenteredCard: React.FC<CenteredCardProps> = ({ visible, height = '28.375rem', ...rest }: CenteredCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} height={height} level={300} />\n    </CSSTransition>\n);\n\nexport { CenteredCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst inFrom = {\n    right: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(calc(50% + 1rem), 0%);\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(+10%, 0%);\n        }\n    `,\n    left: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(calc(-50% - 1rem), 0%);\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(-10%, 0%);\n        }\n    `\n};\n\nconst position = {\n    right: css`\n        left: unset;\n        right: 0;\n        top: 0;\n        bottom: 0;\n    `,\n    left: css`\n        left: 0;\n        right: unset;\n        top: 0;\n        bottom: 0;\n    `\n};\n\nconst StyledCard = styled(Card)<{ side?: string }>`\n    position: fixed;\n    \n    left: ${p => (p.side === 'right' ? 'unset' : 0)};\n    right: ${p => (p.side === 'right' ? 0 : 'unset')};\n    transform: translate(0%, 0%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    height: 100%;\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => inFrom[p.side]};\n    ${p => position[p.side]};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface SideCardProps extends CardProps {\n    visible: boolean;\n    side: string;\n}\n\nconst SideCard: React.FC<SideCardProps> = ({ visible, width = '28.375rem', ...rest }: SideCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} width={width} level={300} />\n    </CSSTransition>\n);\n\nexport { SideCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Dimming } from '../../Dimming/Dimming';\nimport { Colors } from '../../../essentials';\n\nconst TRANSITION_KEY = 'dimming-fade-animation';\nconst ANIMATION_DURATION = 200;\n\nconst fadeInAnimation = (maxOpacity = 0.6) => css`\n    transition: opacity ${ANIMATION_DURATION}ms cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n    }\n`;\n\nconst fullscreenDimming = css`\n    background-color: ${Colors.WHITE};\n    opacity: 1;\n`;\n\nconst DimmingFadeStyled = styled(Dimming)<{ fullscreen?: boolean }>`\n    will-change: opacity;\n\n    ${p => (p.fullscreen ? fadeInAnimation(1) : fadeInAnimation())};\n    ${p => (p.fullscreen ? fullscreenDimming : undefined)}\n`;\n\ninterface DimmingFadeProps {\n    visible: boolean;\n    fullscreen?: boolean;\n    onClick: (event: React.MouseEvent) => void;\n}\n\nconst DimmingFade: React.FC<DimmingFadeProps> = ({ visible, ...rest }: DimmingFadeProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <DimmingFadeStyled {...rest} />\n    </CSSTransition>\n);\n\nexport { DimmingFade, ANIMATION_DURATION };\n","import styled from 'styled-components';\nimport { Elevation, Spaces } from '../../../essentials';\nimport { CloseIcon } from '../../../icons';\n\nconst TopRightXIcon = styled(CloseIcon)`\n    position: absolute;\n    top: ${Spaces[1]};\n    right: ${Spaces[1]};\n    cursor: pointer;\n    z-index: ${Elevation.CARD_ON_DIMMING};\n`;\n\nexport { TopRightXIcon };\n","import React, { useEffect, useState, ReactNode, useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { WidthProps } from 'styled-system';\nimport { useIsEscKeyPressed } from '../../utils/hooks/useIsEscKeyPressed';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION, CenteredCard } from './components/CenteredCard';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION_SIDE, SideCard } from './components/SideCard';\nimport { ANIMATION_DURATION as DIMMING_ANIMATION_DURATION, DimmingFade } from './components/DimmingFade';\nimport { TopRightXIcon } from './components/TopRightXIcon';\n\ntype DismissFunc = () => void;\n\nconst DismissContext = React.createContext<DismissFunc>(undefined);\n\nconst useOffcanvasDismiss = (): DismissFunc => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useOffcanvasDismiss must be used within a <Offcanvas />');\n    }\n\n    return dismiss;\n};\n\ninterface OffcanvasProps extends WidthProps {\n    /**\n     * Show the Offcanvas on the side of the page: left or right\n     */\n    side?: 'left' | 'right' | 'top' | 'bottom';\n    /**\n     * Makes the Offcanvas dismissible by the user (defaults to true)\n     */\n    dismissible?: boolean;\n    /**\n     * Function that will be called when the user intends to close the Offcanvas\n     */\n    onClose?: () => void;\n    /**\n     * Children can be rendered with a dismiss function as render prop. Calling\n     * the dismiss function will close the Offcanvas.\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n}\n\nconst PreventBackgroundScroll = createGlobalStyle`\n    body {\n        overflow: hidden;\n    }\n`;\n\nconst ANIMATION_DURATION = Math.max(\n    DIMMING_ANIMATION_DURATION,\n    CARD_ANIMATION_DURATION || CARD_ANIMATION_DURATION_SIDE\n);\n\n/*\n * We define the types for the props twice because the render props won't be inferred correctly\n * when only using `React.FC<OffcanvasProps>`. This leads to compiler errors when passing the\n * dismiss function.\n */\nconst Offcanvas: React.FC<OffcanvasProps> = ({\n    children,\n    onClose,\n    dismissible,\n    side = 'left',\n    ...rest\n}: OffcanvasProps) => {\n    const [visible, setVisible] = useState(true);\n    const isEscKeyPressed = useIsEscKeyPressed();\n\n    const handleClose: DismissFunc = () => {\n        setVisible(false);\n\n        if (onClose) {\n            setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const handleDimmingClick = () => {\n        if (dismissible) handleClose();\n    };\n\n    useEffect(() => {\n        if (dismissible && isEscKeyPressed) {\n            handleClose();\n        }\n    }, [dismissible, isEscKeyPressed]);\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(handleClose);\n        }\n\n        return children;\n    };\n\n    return (\n        <DismissContext.Provider value={handleClose}>\n            <DimmingFade onClick={handleDimmingClick} visible={visible} data-testid=\"dimming-background\" />\n            {side === 'top' || side === 'bottom' ? (\n                <CenteredCard visible={visible} {...rest} side={side}>\n                    {dismissible && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                    {renderChildren()}\n                </CenteredCard>\n            ) : (\n                <SideCard visible={visible} {...rest} side={side}>\n                    {dismissible && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                    {renderChildren()}\n                </SideCard>\n            )}\n            <PreventBackgroundScroll />\n        </DismissContext.Provider>\n    );\n};\n\nOffcanvas.defaultProps = {\n    dismissible: true\n};\n\nexport { Offcanvas, OffcanvasProps, useOffcanvasDismiss };\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../../essentials/Colors/Colors';\nimport { Spaces } from '../../essentials/Spaces/Spaces';\nimport { BackwardIcon, BackwardLastIcon, ForwardIcon, ForwardLastIcon } from '../../icons';\nimport { Box } from '../Box/Box';\nimport { SelectList } from '../SelectList/SelectList';\n\nconst Container = styled.div`\n    text-align: center;\n`;\n\nconst ButtonsContainer = styled(Box)`\n    display: flex;\n    justify-content: center;\n    position: relative;\n`;\n\nconst IconButton = styled.button`\n    align-items: center;\n    background-color: ${Colors.WHITE};\n    border: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    border-radius: 0.25rem;\n    display: inline-flex;\n    height: 2.5rem;\n    justify-content: center;\n    padding: 0;\n    width: 2.5rem;\n\n    &:not(:last-child) {\n        margin-right: ${Spaces[1]};\n    }\n\n    &:hover:not(:disabled) {\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n        cursor: pointer;\n    }\n`;\n\nconst LabelContainer = styled.div`\n    margin-top: ${Spaces[2]};\n`;\n\ninterface PaginationProps {\n    /**\n     * Define the size of the component, defaults to normal.\n     */\n    size?: 'normal' | 'small';\n    /**\n     * Value of the current page. The first page is assumed to be 1.\n     */\n    value: number;\n    /**\n     * Number of items per page.\n     */\n    pageSize: number;\n    /**\n     * Allow the user to select between the given page sizes.\n     */\n    pageSizes?: { label: string; value: string }[];\n    /**\n     * Total number of items.\n     */\n    totalItems: number;\n    /**\n     * Label to display current page and total pages.\n     */\n    label?: ReactNode;\n    /**\n     * Aria label for the skip backward button.\n     */\n    ariaLabelFirst?: string;\n    /**\n     * Aria label for the previous button.\n     */\n    ariaLabelPrevious?: string;\n    /**\n     * Aria label for the next button.\n     */\n    ariaLabelNext?: string;\n    /**\n     * Aria label for the skip forward button.\n     */\n    ariaLabelLast?: string;\n    /**\n     * Aria label for the container of the page size `SelectList`.\n     */\n    ariaLabelSelectPageSizeContainer?: string;\n    /**\n     * Callback when the next button was pressed.\n     */\n    onNextPage?: () => void;\n    /**\n     * Callback when the previous button was pressed.\n     */\n    onPrevPage?: () => void;\n    /**\n     * Callback when a different page size was selected. Can only be used when `pageSizes` is passed.\n     */\n    onSelectPageSize?: (selected: { label: string; value: string }) => void;\n    /**\n     * Callback when the skip forward button was pressed.\n     */\n    onSkipForward?: () => void;\n    /**\n     * Callback when the skip backward button was pressed.\n     */\n    onSkipBackward?: () => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n    size = 'normal',\n    value,\n    pageSize,\n    pageSizes = [],\n    totalItems,\n    label,\n    ariaLabelFirst = 'First',\n    ariaLabelPrevious = 'Previous',\n    ariaLabelNext = 'Next',\n    ariaLabelLast = 'Last',\n    ariaLabelSelectPageSizeContainer = 'Select page size container',\n    onNextPage,\n    onPrevPage,\n    onSelectPageSize,\n    onSkipForward,\n    onSkipBackward\n}: PaginationProps) => {\n    const isFirstPage = value === 1;\n    const isLastPage = totalItems > 0 ? value === Math.ceil(totalItems / pageSize) : true;\n    const hasMultiplePageSizes = pageSizes.length > 0;\n\n    return (\n        <Container>\n            <ButtonsContainer>\n                {hasMultiplePageSizes && (\n                    <Box aria-label={ariaLabelSelectPageSizeContainer} position=\"absolute\" left=\"0\" width=\"4.5em\">\n                        <SelectList\n                            options={pageSizes}\n                            onChange={onSelectPageSize}\n                            value={pageSizes.find(sizeOption => sizeOption.value === pageSize.toString())}\n                        />\n                    </Box>\n                )}\n                {size !== 'small' && (\n                    <IconButton aria-label={ariaLabelFirst} disabled={isFirstPage} onClick={onSkipBackward}>\n                        <BackwardLastIcon\n                            size=\"small\"\n                            color={isFirstPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                        />\n                    </IconButton>\n                )}\n\n                <IconButton aria-label={ariaLabelPrevious} disabled={isFirstPage} onClick={onPrevPage}>\n                    <BackwardIcon\n                        size=\"small\"\n                        color={isFirstPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                    />\n                </IconButton>\n\n                <IconButton aria-label={ariaLabelNext} disabled={isLastPage} onClick={onNextPage}>\n                    <ForwardIcon\n                        size=\"small\"\n                        color={isLastPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                    />\n                </IconButton>\n\n                {size !== 'small' && (\n                    <IconButton aria-label={ariaLabelLast} disabled={isLastPage} onClick={onSkipForward}>\n                        <ForwardLastIcon\n                            size=\"small\"\n                            color={isLastPage ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_900}\n                        />\n                    </IconButton>\n                )}\n            </ButtonsContainer>\n\n            {label && <LabelContainer>{label}</LabelContainer>}\n        </Container>\n    );\n};\n\nexport { Pagination, PaginationProps };\n","import { components } from 'react-select';\nimport styled from 'styled-components';\n\ninterface DynamicWidthMenuProps {\n    width?: number;\n}\n\nconst DynamicWidthMenu = styled(components.Menu)<DynamicWidthMenuProps>`\n    ${props => (props.width ? `width: ${props.width}px !important;` : undefined)}\n`;\n\nexport { DynamicWidthMenu };\n","import React, { FC } from 'react';\nimport { components, OptionProps } from 'react-select';\nimport styled from 'styled-components';\nimport { Flag } from '../../../icons';\nimport { PhoneAreaCodeCountry } from '../types/PhoneAreaCodeCountry';\nimport { isFlagAvailable } from '../util/isFlagAvailable';\n\nconst OptionWithFlag = styled(components.Option).attrs({ role: 'option' })`\n    display: inline-flex !important;\n\n    svg {\n        min-width: 1.5rem;\n        margin-right: 0.75rem;\n    }\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Option: FC<OptionProps<any>> = (props: OptionProps<PhoneAreaCodeCountry>) => {\n    const { data } = props;\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        <OptionWithFlag {...props}>\n            <Flag code={isFlagAvailable(data.value) ? data.value : 'WW'} />\n            {data.label}\n        </OptionWithFlag>\n    );\n};\n\nexport { Option };\n","import React, { FC, ReactElement } from 'react';\nimport { components, SingleValueProps } from 'react-select';\nimport styled from 'styled-components';\nimport { Flag } from '../../../icons';\nimport { Text } from '../../Text/Text';\nimport { PhoneAreaCodeCountry } from '../types/PhoneAreaCodeCountry';\nimport { isFlagAvailable } from '../util/isFlagAvailable';\n\nconst StyledSingleValue = styled(components.SingleValue)`\n    display: inline-flex;\n\n    svg {\n        min-width: 1.5rem;\n        margin-right: 0.5rem;\n    }\n    max-width: 100%;\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst SingleValue: FC<SingleValueProps<any>> = (props: SingleValueProps<PhoneAreaCodeCountry>) => {\n    if (!props.hasValue) {\n        return props.children as ReactElement;\n    }\n\n    const selectedOption: PhoneAreaCodeCountry = props.getValue()[0];\n\n    return (\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        <StyledSingleValue {...props}>\n            <Flag code={isFlagAvailable(selectedOption.value) ? selectedOption.value : 'WW'} />\n            <Text>{selectedOption.dialCode}</Text>\n        </StyledSingleValue>\n    );\n};\n\nexport { SingleValue };\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    layout,\n    LayoutProps,\n    margin as marginFn,\n    MarginProps,\n    width as widthFn,\n    WidthProps\n} from 'styled-system';\nimport { extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Input } from '../Input/Input';\nimport { InputProps } from '../Input/InputProps';\nimport { SelectList } from '../SelectList/SelectList';\nimport { SelectListProps } from '../SelectList/types';\nimport { DynamicWidthMenu } from './components/DynamicWidthMenu';\nimport { Option } from './components/Option';\nimport { SingleValue } from './components/SingleValue';\nimport { COUNTRIES } from './constants';\nimport { PhoneAreaCodeCountry } from './types/PhoneAreaCodeCountry';\n\ninterface PhoneInputProps\n    extends WidthProps,\n        MarginProps,\n        Pick<InputProps, 'name' | 'label' | 'placeholder' | 'error' | 'disabled'> {\n    /**\n     * Sets the variant of the phone input element\n     */\n    variant?: 'boxed' | 'bottom-lined';\n    /**\n     * Sets the size of the phone input element\n     */\n    size?: 'small' | 'medium';\n    /**\n     * Sets the ID for the phone input element\n     */\n    id?: string;\n    /**\n     * National number text value\n     */\n    text?: string;\n    /**\n     * Change handler for national number text input\n     */\n    onTextChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    /**\n     * Country object for determining the area code\n     */\n    country?: PhoneAreaCodeCountry;\n    /**\n     * Change handler for the area code country\n     */\n    onCountryChange?: (country?: PhoneAreaCodeCountry) => void;\n    /**\n     * HTML element which will be used as a parent for the prefix list\n     */\n    listPortalTarget?: SelectListProps['menuPortalTarget'];\n    /**\n     * Pass props directly to the internal input component. Any value from the `Input` component props are allowed, but props from the `PhoneInput` take precedence\n     */\n    inputProps?: InputProps;\n    /**\n     * Pass props directly to the internal SelectList component used to show prefixes. Any value from the `SelectList` component props are allowed, but props from the `PhoneInput` take precedence\n     */\n    selectListProps?: SelectListProps;\n}\n\nconst Box = styled.div<LayoutProps & WidthProps>`\n    ${compose(layout, widthFn, marginFn)}\n`;\n\nconst PhoneInput: React.FC<PhoneInputProps> = ({\n    width,\n    variant = 'boxed',\n    inputProps = {},\n    selectListProps = {},\n    ...props\n}: PhoneInputProps) => {\n    const { marginProps } = extractWrapperMarginProps(props);\n\n    const nationalNumberInputRef = React.createRef<HTMLDivElement>();\n    const containerRef = React.createRef<HTMLDivElement>();\n    const spaceBetweenInputs = variant === 'boxed' ? '0.25rem' : '0.75rem';\n\n    const handleCountrySelection = value => {\n        if (props.onCountryChange) {\n            props.onCountryChange(value);\n        }\n\n        (nationalNumberInputRef.current.children[0] as HTMLInputElement).focus();\n    };\n\n    return (\n        <Box display=\"inline-flex\" width={width} {...marginProps} ref={containerRef}>\n            <SelectList\n                {...selectListProps}\n                id={`${props.id}-area-code`}\n                name={`${props.name}-area-code`}\n                value={props.country}\n                onChange={handleCountrySelection}\n                options={COUNTRIES.map(it => ({ ...it, label: `${it.label} ${it.dialCode}` }))}\n                placeholder=\"\"\n                width=\"8rem\"\n                components={{\n                    SingleValue,\n                    // eslint-disable-next-line unicorn/no-null\n                    IndicatorSeparator: () => null,\n                    Option,\n                    // DynamicWidthMenu is a styled-component with its own `theme` prop since menuProps has `theme` prop\n                    // from emotion and conflicts in TS\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    Menu: menuProps => <DynamicWidthMenu {...menuProps} width={containerRef.current?.offsetWidth} />\n                }}\n                variant={variant}\n                size={props.size}\n                isDisabled={props.disabled}\n                menuPortalTarget={props.listPortalTarget}\n            />\n            <Input\n                {...inputProps}\n                id={`${props.id}-national-number`}\n                name={`${props.name}-national-number`}\n                ml={spaceBetweenInputs}\n                ref={nationalNumberInputRef}\n                value={props.text}\n                label={props.label}\n                placeholder={props.placeholder}\n                onChange={props.onTextChange}\n                autoComplete=\"tel-national\"\n                variant={variant}\n                size={props.size}\n                error={props.error}\n                disabled={props.disabled}\n                width={`calc(100% - 8rem + ${spaceBetweenInputs})`}\n            />\n        </Box>\n    );\n};\n\nexport { PhoneInput, PhoneInputProps };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Spaces } from '../../essentials';\nimport { Card } from '../Card/Card';\n\nconst DEFAULT_PADDING = Spaces[2];\n\ninterface PopoverContentProps {\n    /**\n     * Popover content (can be any valid React Element or component)\n     */\n    children: React.ReactNode;\n    /**\n     * Popover content padding\n     */\n    padding: string | number;\n}\n\nconst PopoverContentContainer = styled(Card)<{ padding: string | number }>`\n    display: block;\n    padding: ${props => props.padding};\n`;\n\nexport const PopoverContent = ({ padding = DEFAULT_PADDING, children }: PopoverContentProps): React.ReactElement => (\n    <>\n        <PopoverContentContainer padding={padding} level={200}>\n            {children}\n        </PopoverContentContainer>\n    </>\n);\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { Placement } from '@popperjs/core/lib/enums';\nimport { usePopper } from 'react-popper';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { Colors, Spaces } from '../../essentials';\nimport { ChevronDownIcon, ChevronUpIcon } from '../../icons/index';\nimport { useClickOutside } from '../../utils/hooks/useClickOutside';\n\nimport { Text } from '../Text/Text';\n\nimport { PopoverContent } from './PopoverContent';\n\ninterface PopoverRefObjectProps {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ref: any;\n}\n\nconst PopoverTrigger = styled.div.attrs({ theme })<PopoverRefObjectProps>`\n    display: inline-block;\n    width: fit-content;\n    border-radius: ${get('radii.2')};\n`;\n\nconst DefaultPopoverWrapper = styled.div.attrs({ theme })`\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid ${get('semanticColors.button.secondary.borderHover')};\n    padding: 0.8125rem ${Spaces[2]};\n    border-radius: ${get('radii.2')};\n\n    &:hover {\n        cursor: pointer;\n        background-color: ${get('semanticColors.background.secondary')} !important;\n    }\n`;\n\nconst PopoverContentContainer = styled.div<PopoverRefObjectProps>`\n    display: inline-block;\n`;\n\nconst PopoverContentWrapper = styled.div`\n    display: inline-block;\n    box-sizing: border-box;\n    width: auto;\n    height: auto;\n    z-index: 1000;\n    box-shadow: ${get('shadows.small')};\n    max-height: none;\n\n    &:focus {\n        outline: 0;\n    }\n`;\n\nconst KEY_CODE_MAP = {\n    ENTER: 13,\n    SPACE: 32,\n    ESC: 27\n};\n\ninterface PopoverProps {\n    /**\n     * Popover Trigger (Only use Text, Link, Button or Icon component from @wave as a trigger)\n     */\n    children: React.ReactNode;\n    /**\n     * Popover content (can be any valid React Element or component containing React Elements)\n     */\n    content: React.ReactNode;\n    /**\n     * Popover content padding\n     */\n    padding?: string | number;\n    /**\n     * Optional: Specify the Popover content placement (it changes automatically if the Popover content cannot fit inside the viewport with the selected placement)\n     */\n    placement?: Placement;\n    /**\n     * Optional: Specify the Popover content offset (margin between Popover trigger and content)\n     */\n    offset?: number;\n    /**\n     * Optional: Render popover content open by default\n     */\n    isOpen?: boolean;\n    /**\n     * Optional: Define a callback for when Popover content is opened\n     */\n    onOpen?: () => void;\n    /**\n     * Optional: Define a callback for when Popover content is closed\n     */\n    onClose?: () => void;\n}\n\nconst Popover: React.FC<PopoverProps> = ({\n    children,\n    content = '',\n    padding = undefined,\n    placement = 'bottom-start',\n    offset = 5,\n    isOpen = false,\n    onOpen,\n    onClose\n}: PopoverProps) => {\n    const [triggerReference, setTriggerReference] = React.useState(undefined);\n    const [contentReference, setContentReference] = React.useState(undefined);\n    const popoverTriggerRef = React.useRef<HTMLDivElement>(null);\n    const popoverContentRef = React.useRef<HTMLDivElement>(null);\n\n    const [openByDefault, setOpenByDefault] = React.useState(isOpen);\n\n    const [render, setRender] = React.useState(openByDefault);\n\n    const { styles, attributes } = usePopper(triggerReference, contentReference, {\n        placement,\n        strategy: 'fixed',\n        modifiers: [\n            {\n                name: 'offset',\n                enabled: !!offset,\n                options: {\n                    offset: [0, offset]\n                }\n            },\n            {\n                name: 'flip',\n                enabled: true\n            }\n        ]\n    });\n\n    const resolveCallback = React.useCallback(\n        state => {\n            if (onClose && !state) onClose();\n            if (onOpen && state) onOpen();\n        },\n        [onClose, onOpen]\n    );\n\n    const hidePopover: () => void = React.useCallback(() => {\n        if (openByDefault) {\n            setOpenByDefault(false);\n        } else {\n            setRender(false);\n        }\n        resolveCallback(false);\n    }, [openByDefault, resolveCallback]);\n\n    const handleClose = React.useCallback(() => {\n        if (render) {\n            hidePopover();\n        }\n    }, [render, hidePopover]);\n\n    const handleClick: () => void = React.useCallback(() => {\n        if (render) {\n            hidePopover();\n        } else {\n            setRender(true);\n            resolveCallback(true);\n        }\n    }, [resolveCallback, setRender, render, hidePopover]);\n\n    const handleOut = React.useCallback(\n        ev => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (popoverTriggerRef && popoverTriggerRef.current && !popoverTriggerRef.current.contains(ev.target)) {\n                if (!openByDefault) {\n                    handleClose();\n                } else {\n                    setOpenByDefault(false);\n                    resolveCallback(false);\n                }\n            }\n        },\n        [openByDefault, popoverTriggerRef, handleClose, resolveCallback]\n    );\n\n    const handleKeyControl = (ev: React.KeyboardEvent<HTMLElement>) => {\n        // eslint-disable-next-line default-case\n        switch (ev.keyCode) {\n            case KEY_CODE_MAP.ESC:\n                handleClose();\n                break;\n            case KEY_CODE_MAP.ENTER:\n                handleClick();\n                break;\n            case KEY_CODE_MAP.SPACE:\n                handleClick();\n        }\n    };\n\n    React.useEffect(() => {\n        setRender(openByDefault);\n    }, [openByDefault, setRender]);\n\n    useClickOutside(popoverContentRef, ev => handleOut(ev));\n\n    return (\n        <>\n            <PopoverTrigger\n                ref={setTriggerReference}\n                onClick={handleClick}\n                tabIndex={0}\n                aria-describedby=\"popover-content\"\n                aria-haspopup\n                onKeyDown={ev => handleKeyControl(ev)}\n            >\n                {typeof children === 'string' ? (\n                    <DefaultPopoverWrapper\n                        ref={popoverTriggerRef}\n                        style={{ background: render ? Colors.AUTHENTIC_BLUE_50 : 'none' }}\n                    >\n                        <Text fontWeight=\"semibold\">{children}</Text>\n                        {!render ? (\n                            <ChevronDownIcon size={20} style={{ marginLeft: Spaces[1] }} />\n                        ) : (\n                            <ChevronUpIcon size={20} style={{ marginLeft: Spaces[1] }} />\n                        )}\n                    </DefaultPopoverWrapper>\n                ) : (\n                    <div ref={popoverTriggerRef}>{children}</div>\n                )}\n            </PopoverTrigger>\n\n            {render && (\n                <PopoverContentContainer\n                    id=\"popover-content\"\n                    ref={setContentReference}\n                    style={{ ...styles.popper, zIndex: 999 }}\n                    {...attributes.popper}\n                >\n                    <PopoverContentWrapper ref={popoverContentRef}>\n                        <PopoverContent padding={padding}>{content}</PopoverContent>\n                    </PopoverContentWrapper>\n                </PopoverContentContainer>\n            )}\n        </>\n    );\n};\n\nexport { Popover, PopoverProps };\n","import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\n\ninterface CheckmarkProps {\n    error?: boolean;\n}\n\nconst Checkmark = styled.input<CheckmarkProps>`\n    appearance: none;\n    outline: none;\n    border: 0;\n\n    position: relative;\n\n    width: 1rem;\n    height: 1rem;\n    padding: 0;\n    margin: 0 0.5rem 0 0;\n\n    background-color: ${Colors.WHITE};\n    box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.AUTHENTIC_BLUE_200)};\n    border-radius: 50%;\n    transition: background-color 100ms, box-shadow 100ms;\n    cursor: pointer;\n\n    vertical-align: text-bottom;\n\n    &::after {\n        content: ' ';\n\n        width: 1rem;\n        height: 1rem;\n\n        position: absolute;\n\n        opacity: 0;\n        visibility: hidden;\n        transform: scale(0.2);\n        transition: visibility 175ms, opacity 150ms, scale 175ms;\n    }\n\n    &:checked {\n        box-shadow: inset 0 0 0 0.3125rem\n            ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n\n        &::after {\n            opacity: 1;\n            visibility: visible;\n            transform: scale(1);\n        }\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n        box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n\n        &:hover {\n            box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n        }\n\n        &:active {\n            background-color: ${Colors.AUTHENTIC_BLUE_50};\n        }\n\n        &:checked {\n            box-shadow: inset 0 0 0 0.3125rem ${Colors.AUTHENTIC_BLUE_50};\n            background-color: ${Colors.WHITE};\n        }\n    }\n`;\n\nexport { Checkmark };\n","import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\n\nconst TapArea = styled.div`\n    position: absolute;\n    width: 1.75rem;\n    height: 1.75rem;\n    border-radius: 50%;\n    background-color: transparent;\n    top: -0.375rem;\n    left: -0.375rem;\n    transition: background-color 125ms;\n\n    &:active {\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n    }\n`;\n\nexport { TapArea };\n","import styled, { css } from 'styled-components';\nimport { compose, margin, MarginProps, variant } from 'styled-system';\n\nimport { Colors } from '../../../essentials';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { RadioButtonProps } from '../RadioButtonProps';\nimport { Checkmark } from './Checkmark';\nimport { TapArea } from './TapArea';\n\ninterface LabelWrapperProps extends MarginProps, Pick<RadioButtonProps, 'textVerticalAlign'> {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst textVerticalAlignVariant = variant({\n    prop: 'textVerticalAlign',\n    variants: {\n        top: {\n            alignItems: 'flex-start'\n        },\n        center: {\n            alignItems: 'center'\n        }\n    }\n});\n\nconst hoverStyle = ({ disabled, error }: LabelWrapperProps) => {\n    if (disabled) {\n        return css`\n            cursor: not-allowed;\n\n            & ${/* sc-selector */ TapArea}:active {\n                background-color: transparent;\n            }\n        `;\n    }\n    return css`\n        cursor: pointer;\n\n        & ${/* sc-selector */ TapArea}:not(:active) {\n            background-color: ${error ? Colors.NEGATIVE_ORANGE_50 : Colors.ACTION_BLUE_50};\n        }\n\n        & ${/* sc-selector */ Checkmark}:not(:checked) {\n            box-shadow: inset 0 0 0 0.125rem ${error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900};\n            background-color: ${Colors.WHITE};\n        }\n    `;\n};\n\nconst LabelWrapper = styled.label.attrs({ theme })<LabelWrapperProps>`\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    user-select: none;\n\n    color: ${props => (props.disabled ? Colors.AUTHENTIC_BLUE_350 : Colors.AUTHENTIC_BLUE_900)};\n\n    font-family: ${get('fonts.normal')};\n    line-height: 1;\n\n    &:hover {\n        ${hoverStyle}\n    }\n\n    ${compose(margin, textVerticalAlignVariant)}\n`;\n\nexport { LabelWrapper };\n","import React, { FC, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\n\nimport { Checkmark } from './components/Checkmark';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { TapArea } from './components/TapArea';\nimport { RadioButtonProps } from './RadioButtonProps';\n\nconst WithTapAreaWrapper = styled.div<Pick<RadioButtonProps, 'textVerticalAlign'>>`\n    width: 1.5rem;\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n\n    ${({ textVerticalAlign }) => (textVerticalAlign === 'top' ? 'margin-top: 0.1875rem' : undefined)}\n`;\n\nconst RadioButton: FC<RadioButtonProps> = ({ textVerticalAlign = 'center', ...props }: RadioButtonProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n    const { disabled, error, label, ...rest } = restProps;\n\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = <Text>{label}</Text>;\n    }\n\n    return (\n        <LabelWrapper\n            disabled={disabled}\n            error={error}\n            textVerticalAlign={textVerticalAlign}\n            {...marginProps}\n            {...classNameProps}\n        >\n            <WithTapAreaWrapper textVerticalAlign={textVerticalAlign}>\n                <TapArea />\n                <Checkmark type=\"radio\" disabled={disabled} error={error} {...rest} />\n            </WithTapAreaWrapper>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nexport { RadioButton };\n","import styled from 'styled-components';\nimport { Colors } from '../../essentials';\nimport { get } from '../../utils/themeGet';\n\ninterface SelectLabelProps {\n    inverted?: boolean;\n}\n\nconst ANIMATION_DURATION = 100;\n\nconst SelectLabel = styled.label<SelectLabelProps>`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550)};\n    background: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_900 : Colors.WHITE)};\n    transition: color ${ANIMATION_DURATION}ms ease-out, background ${ANIMATION_DURATION}ms ease-out;\n`;\n\nexport { SelectLabel };\n","import { variant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport { SelectLabel } from './SelectLabel';\n\nconst bottomLinedSizeVariants = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2.5rem',\n            padding: '0.625rem 1.25rem 0.125rem 0.125rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '0.125rem',\n                left: '0',\n                padding: '0 0.125rem',\n                fontSize: '0.625rem'\n            },\n            '& ~ .svg-icon': {\n                top: '0.625rem'\n            }\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3.5rem',\n            padding: '1.25rem 1.75rem 0.25rem 0.25rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '0.375rem',\n                left: '0',\n                padding: '0 0.25rem',\n                fontSize: get('fontSizes.0')\n            },\n            '& ~ .svg-icon': {\n                top: '1rem'\n            }\n        }\n    }\n});\n\nconst boxedSizeVariants = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            padding: '0 1.5rem 0 0.5rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '-0.3125rem',\n                left: '0.4375rem',\n                padding: '0 0.125rem',\n                fontSize: '0.625rem'\n            }\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            padding: '0 2.25rem 0 0.75rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '-0.3125rem',\n                left: '0.5625rem',\n                padding: '0 0.25rem',\n                fontSize: get('fontSizes.0')\n            }\n        }\n    }\n});\n\nexport { boxedSizeVariants, bottomLinedSizeVariants };\n","import { ComponentPropsWithoutRef, FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { SelectLabel } from './SelectLabel';\nimport { bottomLinedSizeVariants, boxedSizeVariants } from './selectVariantSizes';\n\ninterface BaseSelectProps extends Omit<ComponentPropsWithoutRef<'select'>, 'size'> {\n    /**\n     * Define the display variant with boxed as the default\n     */\n    variant?: ResponsiveValue<'boxed' | 'bottom-lined'>;\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Indicate that the input contains an error\n     */\n    error?: boolean;\n    /**\n     * Set the size of the input with medium as the default\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst ANIMATION_DURATION = 100;\n\nconst inputVariants = variant({\n    variants: {\n        boxed: {\n            borderRadius: get('radii.2'),\n            border: `0.0625rem solid ${Colors.AUTHENTIC_BLUE_200}`,\n            '&:active:not(:disabled), &:focus:not(:disabled)': {\n                borderColor: Colors.ACTION_BLUE_900,\n                boxShadow: `inset 0 0 0 0.0625rem ${Colors.ACTION_BLUE_900}`\n            }\n        },\n        'bottom-lined': {\n            border: 'none',\n            borderTopLeftRadius: get('radii.1'),\n            borderTopRightRadius: get('radii.1'),\n            borderBottom: `0.0625rem solid ${Colors.AUTHENTIC_BLUE_200}`,\n\n            '&:active:not(:disabled), &:focus:not(:disabled)': {\n                borderColor: Colors.ACTION_BLUE_900,\n                boxShadow: `inset 0 -0.0625rem 0 0 ${Colors.ACTION_BLUE_900}`\n            }\n        }\n    }\n});\n\nconst getErrorStyles = ({ error, variant: variantProp }: BaseSelectProps) => {\n    if (error) {\n        return css`\n            border-color: ${Colors.NEGATIVE_ORANGE_900};\n            box-shadow: ${variantProp === 'boxed'\n                ? `inset 0 0 0 0.0625rem ${Colors.NEGATIVE_ORANGE_900}`\n                : `inset 0 -0.0625rem 0 0 ${Colors.NEGATIVE_ORANGE_900}`};\n\n            & ~ ${SelectLabel} {\n                color: ${Colors.NEGATIVE_ORANGE_900};\n            }\n        `;\n    }\n\n    return undefined;\n};\n\nconst disabledStyles = css<BaseSelectProps>`\n    color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_550 : Colors.AUTHENTIC_BLUE_200)};\n    cursor: not-allowed;\n    border-color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_550 : Colors.AUTHENTIC_BLUE_200)};\n\n    & ~ ${SelectLabel} {\n        color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_550 : Colors.AUTHENTIC_BLUE_200)};\n    }\n\n    & ~ .svg-icon svg > * {\n        fill: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_550 : Colors.AUTHENTIC_BLUE_200)};\n    }\n`;\n\nconst SelectInput: FC<BaseSelectProps> = styled.select.attrs({ theme })<BaseSelectProps>`\n    margin: 0;\n    box-sizing: border-box;\n    background: ${p => (p.inverted ? 'transparent' : Colors.WHITE)};\n    border-radius: 0;\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    transition: box-shadow ${ANIMATION_DURATION}ms, border ${ANIMATION_DURATION}ms;\n    outline: none;\n    appearance: none;\n    width: 100%;\n    padding-right: 2rem;\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n\n    & ~ .svg-icon svg > * {\n        fill: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550)};\n    }\n\n    ${p => {\n        switch (p.variant) {\n            case 'boxed':\n                return compose(boxedSizeVariants, inputVariants)(p);\n            case 'bottom-lined':\n                return compose(bottomLinedSizeVariants, inputVariants)(p);\n            default:\n                return undefined;\n        }\n    }}\n    ${getErrorStyles}\n    ${p => (p.disabled ? disabledStyles : undefined)}\n    &:-moz-focusring {\n        outline: none;\n        text-shadow: 0 0 0 ${Colors.AUTHENTIC_BLUE_900};\n    }\n\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n        -webkit-text-fill-color: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n        transition: background-color 99999999ms ease 99999999ms;\n    }\n\n    &:active:not(:disabled), &:focus:not(:disabled) {\n        & ~ ${SelectLabel} {\n            color: ${p => (p.inverted ? Colors.WHITE : Colors.ACTION_BLUE_900)};\n        }\n\n        & ~ .svg-icon svg > * {\n            fill: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n        }\n    }\n`;\n\nexport { SelectInput, BaseSelectProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { ChevronDownIcon } from '../../icons';\nimport { extractClassNameProps, extractWidthProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { useGeneratedId } from '../../utils/hooks/useGeneratedId';\nimport { BaseSelectProps, SelectInput } from './SelectInput';\nimport { SelectLabel } from './SelectLabel';\n\ninterface SelectProps extends BaseSelectProps, WidthProps, MarginProps {\n    /**\n     * Set the label for the select input\n     */\n    label?: string;\n\n    /**\n     * Set a placeholder for the select component, allowing users to remove their selection\n     */\n    placeholder?: string;\n}\n\nconst SelectWrapper = styled.div.attrs({ theme })`\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n\n    ${compose(margin, width)}\n`;\n\nconst IconNode = styled.div`\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    position: absolute;\n    pointer-events: none;\n    right: 0.5rem;\n    top: 0;\n`;\n\nconst Select: React.FC<SelectProps> = ({ variant = 'boxed', size = 'medium', ...props }: SelectProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps: withoutMargin } = extractWrapperMarginProps(withoutClassName);\n    const { widthProps, restProps } = extractWidthProps(withoutMargin);\n\n    const { label, children, placeholder, ...rest } = restProps;\n\n    const id = useGeneratedId(props.id);\n\n    return (\n        <SelectWrapper {...classNameProps} {...marginProps} {...widthProps}>\n            <SelectInput variant={variant} size={size} {...rest} id={id}>\n                {placeholder ? <option value=\"\">{placeholder}</option> : undefined}\n                {children}\n            </SelectInput>\n            <IconNode className=\"svg-icon\">\n                <ChevronDownIcon />\n            </IconNode>\n            {label && (\n                <SelectLabel inverted={props.inverted} htmlFor={id}>\n                    {label}\n                </SelectLabel>\n            )}\n        </SelectWrapper>\n    );\n};\n\nexport { Select, SelectProps };\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\nimport { variantStyles, errorStyles, disabledStyles } from '../styles';\nimport { Variant, Size } from '../types';\n\ninterface LabelProps {\n    inverted?: boolean;\n    error?: boolean;\n    isDisabled?: boolean;\n    size: Size;\n    variant: Variant;\n    children: ReactNode;\n}\n\nexport const Label = styled.label<LabelProps>`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    background: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_900 : Colors.WHITE)};\n    color: ${p => (p.inverted ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550)};\n    transition: color 125ms ease;\n\n    ${p => p.error && errorStyles.label()}\n    ${({ isDisabled, inverted }) => isDisabled && disabledStyles.label({ inverted })}\n    ${({ variant, size }) => variantStyles.label({ variant, size })}\n`;\n","import styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\n\nimport { ClassNameProps } from '../../../utils/extractProps';\nimport { get } from '../../../utils/themeGet';\n\ntype WrapperProps = ClassNameProps & MarginProps & WidthProps;\n\nexport const Wrapper = styled.div<WrapperProps>`\n    position: relative;\n    font-family: ${get('fonts.normal')};\n\n    ${compose(margin, width)}\n\n    &,\n    & * {\n        box-sizing: border-box;\n    }\n`;\n","import styled, { css, keyframes } from 'styled-components';\nimport { borderRadius, BorderRadiusProps, compose, layout, LayoutProps, margin, MarginProps } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { get } from '../../utils/themeGet';\n\nconst shimmerAnimation = keyframes`\n    100% {\n        transform: translateX(100%);\n    }\n`;\n\nconst animationStyles = css`\n    &::after {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        transform: translateX(-75%);\n        background-image: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0) 25%,\n            rgba(255, 255, 255, 0.5) 37%,\n            rgba(255, 255, 255, 0) 63%\n        );\n        background-repeat: no-repeat;\n        content: '';\n\n        animation: ${shimmerAnimation} 1600ms ease infinite;\n        animation-delay: 200ms;\n    }\n`;\n\nexport interface SkeletonProps extends LayoutProps, MarginProps, BorderRadiusProps {\n    /**\n     * Show skeleton animation\n     * @default false\n     */\n    animated?: boolean;\n}\n\nexport const Skeleton = styled.span<SkeletonProps>`\n    display: inline-block;\n    height: 1rem;\n    width: 100%;\n    position: relative;\n    overflow: hidden;\n    border-radius: ${get('radii.2')};\n    background-color: ${Colors.AUTHENTIC_BLUE_50};\n\n    ${compose(layout, margin, borderRadius)};\n\n    ${p => (p.animated ? animationStyles : undefined)}\n`;\n","import React, { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { Colors, Spaces } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'> {\n    /**\n     * Indicates that the link is currently selected\n     * @default false\n     */\n    selected?: boolean;\n\n    /**\n     * Override the default active class name (see react-router)\n     */\n    activeClassName?: string;\n\n    /**\n     * Replace the rendered component with an HTML tag or another component\n     * @default 'a'\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n}\n\nconst DEFAULT_ACTIVE_CLASS_NAME = 'active';\n\nconst UnderLine = styled.div`\n    background-color: transparent;\n    height: 0.1875rem;\n    margin-top: ${Spaces[1]};\n`;\n\nconst InnerLink = styled.a.attrs({ theme })<LinkProps>`\n    color: ${Colors.AUTHENTIC_BLUE_350};\n    cursor: pointer;\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    margin-right: ${Spaces[3]};\n    text-decoration: none;\n\n    &:last-child {\n        margin-right: 0;\n    }\n\n    &.${props => (props.activeClassName ? props.activeClassName : DEFAULT_ACTIVE_CLASS_NAME)} {\n        color: ${Colors.ACTION_BLUE_900};\n\n        ${UnderLine} {\n            background-color: ${Colors.ACTION_BLUE_900};\n        }\n    }\n`;\n\nconst Link: React.FC<LinkProps> = ({ children, selected, ...rest }: LinkProps) => {\n    const combinedClassNames = [rest.className];\n\n    if (selected) {\n        combinedClassNames.push(rest.activeClassName ? rest.activeClassName : DEFAULT_ACTIVE_CLASS_NAME);\n    }\n\n    return (\n        <InnerLink {...rest} className={combinedClassNames.join(' ')}>\n            {children}\n            <UnderLine />\n        </InnerLink>\n    );\n};\n\nexport { Link, LinkProps };\n","import styled from 'styled-components';\nimport { margin } from 'styled-system';\n\nimport { Link } from './Link';\nimport { TabBarWithLink } from './TabBarWithLink';\n\nconst TabBar: TabBarWithLink = Object.assign(\n    styled.nav`\n        display: flex;\n\n        ${margin}\n    `,\n    { Link }\n);\n\nexport { TabBar, TabBarWithLink };\n","import React, { ComponentPropsWithoutRef, FC } from 'react';\nimport styled, { StyledComponent } from 'styled-components';\nimport { compose, height, HeightProps, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { getColumnSpace } from '../util/getColumnSpace';\nimport { getRowSize } from '../util/getRowSize';\n\ninterface TableElementProps\n    extends MarginProps,\n        HeightProps,\n        WidthProps,\n        // do not include width property from the `<table>` tag type because styled-system provides its own\n        Omit<ComponentPropsWithoutRef<'table'>, 'width'> {}\n\ninterface TableProps extends TableElementProps {\n    /**\n     * Row style (background colors, borders, etc.)\n     * @default lines\n     */\n    rowStyle: 'lines' | 'zebra' | 'blank';\n    /**\n     * The height of the table rows. More info on [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n     */\n    rowSize?: 'large' | 'normal' | 'small' | string;\n    /**\n     * The space between columns of the table (any CSS value will be divided by 2 using `calc`)\n     */\n    columnSpace?: 'normal' | 'small' | string;\n}\n\nconst TableElement: StyledComponent<FC<TableElementProps>, typeof theme> = styled.table.attrs({\n    theme\n})<TableElementProps>`\n    font-size: ${get('fontSizes.1')};\n    font-family: ${get('fonts.normal')};\n    border-collapse: collapse;\n    border-spacing: 0;\n    box-sizing: border-box;\n\n    thead tr:hover {\n        background-color: inherit;\n    }\n\n    ${compose(margin, width, height)}\n`;\n\nconst Table: FC<TableProps> = ({\n    children,\n    rowStyle,\n    rowSize = 'normal',\n    columnSpace = 'normal',\n    ...props\n}: TableProps) => {\n    const context = {\n        columnSpace: getColumnSpace(columnSpace),\n        rowSize: getRowSize(rowSize),\n        rowStyle\n    };\n\n    return (\n        <TableElement {...props}>\n            <TableContext.Provider value={context}>{children}</TableContext.Provider>\n        </TableElement>\n    );\n};\n\nexport { Table, TableElement, TableProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'td'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableCellElement = styled.td<TableCellProps>`\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableCell: FC<TableCellProps> = (props: TableCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableCell, TableCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { Colors } from '../../../essentials';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableHeaderCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'th'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableHeaderCellElement = styled.th.attrs({ theme })<TableHeaderCellProps>`\n    border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_550} !important;\n    font-weight: ${get('fontWeights.bold')};\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    text-align: left;\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableHeaderCell: FC<TableHeaderCellProps> = (props: TableHeaderCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableHeaderCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableHeaderCell, TableHeaderCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableRowProps = ComponentPropsWithoutRef<'tr'> & {\n    /**\n     * Show active state styling on the row\n     * @default false\n     */\n    active?: boolean;\n    /**\n     * Show the hover state styling on the row\n     * @default true\n     */\n    hover?: boolean;\n};\n\nconst zebraStyles = (active, hover) => css`\n    &:nth-child(even) {\n        background-color: rgb(249, 250, 251);\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${Colors.ACTION_BLUE_100}` : ''};\n    }\n\n    ${active ? `background-color: ${Colors.ACTION_BLUE_150} !important` : ''};\n`;\n\nconst linesStyles = (active, hover) => css`\n    td,\n    th {\n        border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_200};\n    }\n\n    &:first-of-type {\n        th {\n            border-bottom: 0.0625rem solid ${Colors.AUTHENTIC_BLUE_550};\n        }\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${Colors.ACTION_BLUE_50};` : ''}\n    }\n\n    ${active ? `background-color: ${Colors.ACTION_BLUE_100} !important` : ''};\n`;\n\nconst TableRowElement = styled.tr<TableRowProps & Pick<TableProps, 'rowStyle'>>(\n    ({ rowStyle, active, hover = true }) => {\n        switch (rowStyle) {\n            case 'zebra':\n                return zebraStyles(active, hover);\n            case 'lines':\n                return linesStyles(active, hover);\n            case 'blank':\n            default:\n                return css`\n                    &:hover {\n                        ${hover ? `background-color: ${Colors.ACTION_BLUE_50}` : ''};\n                    }\n\n                    ${active ? `background-color: ${Colors.ACTION_BLUE_100} !important` : ''};\n                `;\n        }\n    }\n);\n\nconst TableRow: FC<TableRowProps> = (props: TableRowProps) => {\n    const { rowStyle } = useContext(TableContext);\n\n    return <TableRowElement rowStyle={rowStyle} {...props} />;\n};\n\nexport { TableRow, TableRowProps };\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Box } from '../../Box/Box';\nimport { SortingIndicator } from './SortingIndicator';\nimport { TableHeaderCell, TableHeaderCellProps } from './TableHeaderCell';\nimport type { SortingDirection } from '../types';\n\nconst TableHeaderCellWithPointer = styled(TableHeaderCell)`\n    cursor: pointer;\n    user-select: none;\n`;\n\ntype TableSortableHeaderCellProps = TableHeaderCellProps & {\n    active: boolean;\n    field: string;\n    direction: SortingDirection;\n    onSortChange: (field: string, direction: string) => void;\n};\n\nconst TableSortableHeaderCell: FC<TableSortableHeaderCellProps> = ({\n    active,\n    direction,\n    children,\n    field,\n    onSortChange,\n    ...rest\n}: TableSortableHeaderCellProps) => (\n    <TableHeaderCellWithPointer\n        onClick={() => onSortChange(field, direction)}\n        aria-sort={active ? (direction === 'ASC' ? 'ascending' : 'descending') : 'none'}\n        {...rest}\n    >\n        <Box display=\"inline-flex\" alignItems=\"center\">\n            {children}\n            <Box mr=\"0.25rem\" />\n            <Box flexShrink=\"0\" display=\"inline-flex\" alignItems=\"center\">\n                <SortingIndicator direction={active ? direction : 'NONE'} />\n            </Box>\n        </Box>\n    </TableHeaderCellWithPointer>\n);\n\nexport { TableSortableHeaderCell, TableSortableHeaderCellProps };\n","import React, { FC, MouseEvent, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { CloseIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { Text } from '../Text/Text';\n\ninterface TagProps extends MarginProps {\n    /**\n     * The function to handle when the dismiss icon is clicked\n     */\n    onDismiss?: (e: MouseEvent) => void;\n    /**\n     * The prop to determine whether the dismiss functionality is enabled\n     */\n    dismissible?: boolean;\n}\n\nconst TagText = styled(Text).attrs({ theme })<Pick<TagProps, 'dismissible'>>`\n    color: ${Colors.ACTION_BLUE_900};\n    margin-left: 0.75rem;\n    margin-right: ${props => (props.dismissible ? '0.25rem' : '0.75rem')};\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    cursor: default;\n    transition: color 125ms ease;\n`;\n\nconst DismissIcon = styled(CloseIcon).attrs({ size: 18 })`\n    margin-right: 0.5rem;\n    transition: color 125ms ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst TagWrapper = styled.div.attrs({ theme })<TagProps>`\n    box-sizing: border-box;\n    background-color: ${Colors.ACTION_BLUE_50};\n    border: solid 0.0625rem ${Colors.ACTION_BLUE_900};\n    display: inline-flex;\n    align-items: center;\n    border-radius: 2rem;\n    height: 2rem;\n    margin-right: 0.25rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0;\n    transition: background-color 125ms ease;\n\n    ${margin}\n\n    &:hover {\n        background-color: ${Colors.ACTION_BLUE_900};\n\n        > ${TagText} {\n            color: ${Colors.WHITE};\n        }\n\n        > ${DismissIcon} {\n            color: ${Colors.WHITE};\n        }\n    }\n`;\n\nconst Tag: FC<PropsWithChildren<TagProps>> = ({ children, onDismiss, dismissible = true, ...rest }) => (\n    <TagWrapper {...rest}>\n        <TagText dismissible={dismissible}>{children}</TagText>\n        {dismissible && <DismissIcon data-testid=\"dismiss-icon\" color={Colors.ACTION_BLUE_900} onClick={onDismiss} />}\n    </TagWrapper>\n);\n\nexport { Tag, TagProps };\n","import React, { ComponentPropsWithoutRef, FC, useEffect, useState } from 'react';\nimport styled, { CSSProperties } from 'styled-components';\n\nimport { compose, height, HeightProps, margin, MarginProps, ResponsiveValue, width, WidthProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport {\n    extractClassNameProps,\n    extractHeightProps,\n    extractWidthProps,\n    extractWrapperMarginProps\n} from '../../utils/extractProps';\nimport { useGeneratedId } from '../../utils/hooks/useGeneratedId';\nimport { InternalInputComponentProps } from '../Input/BaseInput';\nimport { BoxedInput } from '../Input/BoxedInput';\nimport { BoxedInputLabel } from '../Input/BoxedInputLabel';\n\ntype WrapperProps = MarginProps &\n    WidthProps &\n    HeightProps & {\n        className?: string;\n    };\n\nconst TextAreaWrapper: FC<WrapperProps> = styled.div.attrs({ theme })`\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    width: 21.5rem;\n    height: 7.25rem;\n\n    ${compose(margin, height, width)}\n`;\n\nconst TextareaField: FC<TextAreaProps & Pick<InternalInputComponentProps, 'hasValue'>> = styled(BoxedInput).attrs({\n    as: 'textarea'\n})<TextAreaProps>`\n    height: 100%;\n    padding: 0.75rem;\n    overflow: auto;\n\n    resize: ${p => p.resize};\n`;\n\ninterface TextAreaProps\n    extends WrapperProps,\n        Omit<ComponentPropsWithoutRef<'textarea'>, 'size' | 'width'>,\n        Pick<CSSProperties, 'resize'> {\n    /**\n     * Sets the variant of the textarea\n     */\n    variant?: ResponsiveValue<'boxed' | 'bottom-lined'>;\n    /**\n     * Sets the size of the input\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Inverts the colors of the input\n     */\n    inverted?: boolean;\n    /**\n     * Sets the input label\n     */\n    label?: string;\n    /**\n     * Sets the input placeholder\n     */\n    placeholder?: string;\n    /**\n     * Shows the error state\n     */\n    error?: boolean;\n}\n\nconst Textarea: FC<WrapperProps & TextAreaProps> = ({ resize = 'both', ...props }: TextAreaProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps: withoutMargin } = extractWrapperMarginProps(withoutClassName);\n    const { widthProps, restProps: withoutWidth } = extractWidthProps(withoutMargin);\n    const { heightProps, restProps } = extractHeightProps(withoutWidth);\n\n    const { label, onChange, ...rest } = restProps;\n    const id = useGeneratedId(props.id);\n\n    const [hasValue, setHasValue] = useState(rest.value && rest.value.toString().length > 0);\n\n    const handleChange = event => {\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    useEffect(() => {\n        setHasValue(rest.value && rest.value.toString().length > 0);\n    }, [rest.value]);\n\n    return (\n        <TextAreaWrapper {...classNameProps} {...marginProps} {...widthProps} {...heightProps}>\n            <TextareaField\n                {...rest}\n                resize={resize}\n                id={id}\n                variant=\"boxed\"\n                size=\"medium\"\n                hasValue={hasValue}\n                onChange={handleChange}\n            />\n            {label && (\n                <BoxedInputLabel htmlFor={id} size=\"medium\">\n                    {label}\n                </BoxedInputLabel>\n            )}\n        </TextAreaWrapper>\n    );\n};\n\nexport { Textarea, TextAreaProps };\n","import styled from 'styled-components';\nimport { SemanticColors } from '../../essentials';\n\nconst determineBackground = (props: SlideProps) => {\n    if (props.disabled) {\n        return SemanticColors.background.secondary;\n    }\n\n    if (props.error) {\n        return SemanticColors.background.dangerEmphasized;\n    }\n\n    return SemanticColors.background.infoEmphasized;\n};\n\ninterface SlideProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\n// TODO use SemanticColors.forms once https://github.com/freenowtech/wave/issues/286 is done\nconst Slide = styled.div<SlideProps>`\n    width: 2.25rem;\n    height: 1rem;\n\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    background: ${props => (props.disabled ? SemanticColors.background.secondary : SemanticColors.border.primary)};\n    display: inline-block;\n    border-radius: 0.5rem;\n    position: relative;\n    margin-right: 0.5rem;\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: -0.125rem;\n        left: 0;\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${props =>\n            props.disabled ? SemanticColors.background.secondary : SemanticColors.background.primary};\n        border-radius: 50%;\n        box-shadow: 0 0 0.0625rem 0 rgba(0, 0, 0, 0.05), 0 0.0625rem 0.1875rem 0 rgba(0, 0, 0, 0.4);\n        transform: translateX(0);\n        transition: transform 200ms;\n    }\n\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 0.5rem;\n        width: 1rem;\n        height: 1rem;\n        background-color: ${determineBackground};\n        transition: width 200ms;\n    }\n`;\n\nexport { Slide };\n","import styled from 'styled-components';\nimport { Slide } from './Slide';\n\ninterface InputProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Input = styled.input<InputProps>`\n    height: 0;\n    width: 0;\n    margin: 0;\n    visibility: hidden;\n\n    &:checked + ${/* sc-selector */ Slide}::before {\n        transform: translateX(calc(100% - 0.25rem));\n    }\n\n    &:checked + ${/* sc-selector */ Slide}::after {\n        width: 2.25rem;\n    }\n`;\n\nexport { Input };\n","import styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\ninterface LabelProps extends MarginProps {\n    disabled?: boolean;\n}\n\nconst Label = styled.label<LabelProps>`\n    display: flex;\n    align-items: center;\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    user-select: none;\n\n    ${margin}\n`;\n\nexport { Label };\n","import { PropsWithChildren } from 'react';\nimport * as React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { usePopper } from 'react-popper';\nimport { Placement } from '@popperjs/core/lib/enums';\nimport { variant } from 'styled-system';\nimport { MediaQueries, SemanticColors } from '../../essentials';\nimport { get } from '../../utils/themeGet';\nimport { Text } from '../Text/Text';\nimport { mapPlacementWithDeprecationWarning, TooltipPlacement } from './TooltipPlacement';\n\nconst fadeAnimation = keyframes`\n    from {\n        opacity: 0;\n    }\n\n    to {\n        opacity: 1;\n    }\n`;\n\nconst arrowPlacementStyles = variant({\n    variants: {\n        bottom: {\n            right: 'calc(50% - 0.25rem)'\n        },\n        'bottom-end': {\n            right: '0.3rem'\n        },\n        'top-start': {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)'\n        },\n        top: {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)',\n            right: 'calc(50% - 0.25rem)'\n        },\n        'top-end': {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)',\n            right: '0.3rem'\n        },\n        left: {\n            top: 'calc(50% - 0.25rem)',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        'left-end': {\n            bottom: '0.5rem',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        'left-start': {\n            top: '0.5rem',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        right: {\n            top: 'calc(50% - 0.25rem)',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        },\n        'right-end': {\n            bottom: '0.5rem',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        },\n        'right-start': {\n            top: '0.5rem',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        }\n    }\n});\n\ninterface TooltipBodyProps {\n    inverted?: boolean;\n    variant: string;\n}\n\nconst TooltipBody = styled.div<TooltipBodyProps>`\n    position: relative;\n    background-color: ${p =>\n        p.inverted ? SemanticColors.background.secondary : SemanticColors.background.primaryEmphasized};\n    padding: 0.25rem 0.5rem;\n    border-radius: ${get('radii.2')};\n    opacity: 0;\n    animation-name: ${fadeAnimation};\n    animation-duration: 100ms;\n    animation-fill-mode: forwards;\n    animation-timing-function: ease-in;\n    animation-delay: 400ms;\n    max-width: 10rem;\n\n    ${MediaQueries.small} {\n        max-width: 18.75rem;\n    }\n\n    &::after {\n        bottom: 100%;\n        content: ' ';\n        height: 0;\n        width: 0;\n        position: absolute;\n        pointer-events: none;\n        border: 0.25rem solid rgba(0, 0, 0, 0);\n        border-bottom-color: ${p =>\n            p.inverted ? SemanticColors.background.secondary : SemanticColors.background.primaryEmphasized};\n        margin-left: -0.25rem;\n\n        ${arrowPlacementStyles}\n    }\n`;\n\ninterface TooltipProps {\n    /**\n     * The content that will be shown inside of the tooltip body\n     */\n    content: React.ReactNode;\n    /**\n     * Set the position of where the tooltip is attached to the target, defaults to \"top\"\n     */\n    placement?: TooltipPlacement | Placement;\n    /**\n     * Adjust the component for display on dark backgrounds\n     */\n    inverted?: boolean;\n    /**\n     * Force the tooltip to always be visible, regardless of user interaction\n     */\n    alwaysVisible?: boolean;\n}\n\nconst Tooltip: React.FC<TooltipProps> = ({\n    content,\n    children,\n    placement = 'top',\n    alwaysVisible = false,\n    inverted = false\n}: PropsWithChildren<TooltipProps>) => {\n    const [isVisible, setIsVisible] = React.useState(alwaysVisible);\n    /**\n     * triggerReference and contentReference are used with the Popper library in order to get the tooltip styles and attributes\n     */\n    const [triggerReference, setTriggerReference] = React.useState(undefined);\n    const [contentReference, setContentReference] = React.useState(undefined);\n\n    /**\n     * Map the older placement values to Popper placement  as we need to get the correct placement for the tooltip from the Popper library\n     * without introduce any breaking changes to the Tooltip component.\n     * TODO: Remove in the next major release.\n     */\n    const mappedPlacement = mapPlacementWithDeprecationWarning(placement);\n\n    const { styles, attributes } = usePopper(triggerReference, contentReference, {\n        placement: mappedPlacement,\n        modifiers: [\n            {\n                name: 'offset',\n                enabled: true,\n                options: {\n                    offset: [0, 5]\n                }\n            }\n        ]\n    });\n\n    let dynamicContent = content;\n\n    if (typeof content === 'string') {\n        dynamicContent = (\n            <Text as=\"p\" fontSize={0} inverted={!inverted}>\n                {content}\n            </Text>\n        );\n    }\n\n    const handleVisibilityChange = (nextState: React.SetStateAction<boolean>) => {\n        if (!alwaysVisible) {\n            setIsVisible(nextState);\n        }\n    };\n\n    return (\n        <>\n            {React.cloneElement(children as React.ReactElement, {\n                onMouseOver: () => handleVisibilityChange(true),\n                onMouseOut: () => handleVisibilityChange(false),\n                ref: setTriggerReference\n            })}\n            {content && isVisible && (\n                <TooltipBody\n                    ref={setContentReference}\n                    inverted={inverted}\n                    style={{ ...styles.popper }}\n                    variant={attributes.popper?.['data-popper-placement']}\n                    {...attributes.popper}\n                >\n                    {dynamicContent}\n                </TooltipBody>\n            )}\n        </>\n    );\n};\n\nexport { Tooltip, TooltipProps };\n","import styled from 'styled-components';\nimport { ChevronUpIcon } from '../../../icons';\nimport { SemanticColors } from '../../../essentials';\n\nexport const ChevronUp = styled(ChevronUpIcon)`\n    color: ${props => (props.color ? props.color : SemanticColors.icon.primary)};\n`;\n","import styled from 'styled-components';\nimport { ChevronDownIcon } from '../../../icons';\nimport { SemanticColors } from '../../../essentials';\n\nexport const ChevronDown = styled(ChevronDownIcon)`\n    color: ${props => (props.color ? props.color : SemanticColors.icon.primary)};\n`;\n","import React, { useState, ReactElement } from 'react';\nimport styled from 'styled-components';\n\nimport { SemanticColors } from '../../../essentials';\nimport { Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Header } from './Header';\nimport { ChevronUp } from './ChevronUp';\nimport { ChevronDown } from './ChevronDown';\nimport { Description } from './Description';\nimport { AccordionProps } from '../types';\n\ntype Props = Pick<\n    AccordionProps,\n    'heading' | 'description' | 'defaultExpanded' | 'children' | 'onExpand' | 'onCollapse'\n>;\n\nconst StyleHeadline = styled(Headline)``;\n\nconst PanelHeader = styled(Header)`\n    &:hover ${StyleHeadline} {\n        color: ${SemanticColors.text.linkHover};\n    }\n\n    &:hover ${ChevronDown} {\n        color: ${SemanticColors.text.linkHover};\n    }\n\n    &:hover ${ChevronUp} {\n        color: ${SemanticColors.text.linkHover};\n    }\n`;\n\nconst PanelIcon = ({ isOpen }: { isOpen: boolean }) => (isOpen ? <ChevronUp /> : <ChevronDown />);\n\nexport const Compact = ({\n    heading,\n    description,\n    defaultExpanded = false,\n    children,\n    onExpand,\n    onCollapse\n}: Props): ReactElement => {\n    const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\n\n    return (\n        <>\n            <PanelHeader\n                onClick={() => {\n                    if (isOpen) {\n                        onExpand();\n                    } else {\n                        onCollapse();\n                    }\n                    setIsOpen(!isOpen);\n                }}\n            >\n                <Box display=\"flex\" flexDirection=\"column\" maxWidth=\"33%\">\n                    <Headline as=\"h4\" mr=\"3\">\n                        {heading}\n                    </Headline>\n                    {isOpen && <Description mt=\"1\" description={description} />}\n                </Box>\n                {!isOpen && <Description mt=\"1\" description={description} />}\n                <Box ml=\"3\">\n                    <PanelIcon isOpen={isOpen} />\n                </Box>\n            </PanelHeader>\n            {isOpen && (\n                <Box mx=\"2\" mb=\"5\">\n                    {children}\n                </Box>\n            )}\n        </>\n    );\n};\n","import React, { useState, PropsWithChildren, ReactElement } from 'react';\nimport styled from 'styled-components';\n\nimport { SemanticColors } from '../../../essentials';\nimport { Text } from '../../Text/Text';\nimport { Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Header } from './Header';\nimport { ChevronUp } from './ChevronUp';\nimport { ChevronDown } from './ChevronDown';\nimport { Description } from './Description';\nimport { AccordionProps } from '../types';\n\nconst ButtonLabel = styled(Text).attrs({ as: 'p' })`\n    color: ${SemanticColors.text.link};\n`;\n\nconst PanelHeader = styled(Header)`\n    &:hover {\n        background-color: ${SemanticColors.background.info};\n    }\n\n    &:hover ${ButtonLabel} {\n        color: ${SemanticColors.text.linkHover};\n    }\n\n    &:hover ${ChevronDown} {\n        color: ${SemanticColors.text.linkHover};\n    }\n`;\n\nconst CardHeader = styled(Header).attrs({ p: '3' })`\n    background-color: ${SemanticColors.background.secondary};\n    border-radius: 0.3125rem 0.3125rem 0 0;\n\n    &:hover {\n        background-color: ${SemanticColors.background.info};\n    }\n\n    &:hover ${ButtonLabel} {\n        color: ${SemanticColors.text.linkHover};\n    }\n\n    &:hover ${ChevronUp} {\n        color: ${SemanticColors.text.linkHover};\n    }\n`;\n\nconst PanelBody = styled(Box).attrs({ my: '3' })`\n    border: solid 0.0625rem ${SemanticColors.border.primary};\n    border-radius: 0.3125rem;\n`;\n\nconst PanelIcon = ({ isOpen }: { isOpen: boolean }) =>\n    isOpen ? <ChevronUp color={SemanticColors.icon.action} /> : <ChevronDown color={SemanticColors.icon.action} />;\n\nexport const DefaultPanel = ({\n    heading,\n    description,\n    info,\n    buttonLabel,\n    defaultExpanded = false,\n    children,\n    onExpand,\n    onCollapse\n}: PropsWithChildren<AccordionProps>): ReactElement => {\n    const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\n\n    return (\n        <>\n            {isOpen ? (\n                <PanelBody>\n                    <CardHeader\n                        onClick={() => {\n                            setIsOpen(!isOpen);\n                            onCollapse();\n                        }}\n                    >\n                        <Box display=\"flex\" flexDirection=\"column\" maxWidth=\"33%\">\n                            <Headline as=\"h4\" mr=\"3\">\n                                {heading}\n                            </Headline>\n                            <Description mt=\"1\" description={description} />\n                        </Box>\n                        <Box ml=\"3\" display=\"flex\" flexDirection=\"row\">\n                            <ButtonLabel>{buttonLabel}</ButtonLabel>\n                            <PanelIcon isOpen={isOpen} />\n                        </Box>\n                    </CardHeader>\n                    <Box m=\"3\">{children}</Box>\n                </PanelBody>\n            ) : (\n                <PanelHeader\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                        onExpand();\n                    }}\n                >\n                    <Headline as=\"h4\" mr=\"3\">\n                        {heading}\n                    </Headline>\n                    <Box>\n                        <Description description={description} />\n                        <Text as=\"p\" style={{ textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }}>\n                            {info}\n                        </Text>\n                    </Box>\n                    <Box ml=\"3\" display=\"flex\" flexDirection=\"row\">\n                        <ButtonLabel>{buttonLabel}</ButtonLabel>\n                        <PanelIcon isOpen={isOpen} />\n                    </Box>\n                </PanelHeader>\n            )}\n        </>\n    );\n};\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\n\nimport { SemanticColors } from '../../essentials';\nimport { Box } from '../Box/Box';\nimport { Compact } from './components/Compact';\nimport { DefaultPanel } from './components/Default';\nimport { AccordionProps } from './types';\n\nconst HorizontalDivider = styled(Box)`\n    border: 0;\n    border-top: solid 0.0625rem ${SemanticColors.border.primary};\n`;\n\nconst HorizontalDividerTop = HorizontalDivider;\n\nconst HorizontalDividerBottom = styled(HorizontalDivider)`\n    display: none;\n`;\n\nconst RenderedSection = styled(Box)`\n    :last-child ${HorizontalDividerBottom} {\n        display: inherit;\n    }\n`;\n\nconst Accordion = ({\n    heading,\n    description,\n    info,\n    buttonLabel,\n    variant,\n    defaultExpanded,\n    children,\n    onExpand = () => undefined,\n    onCollapse = () => undefined\n}: AccordionProps): ReactElement => (\n    <RenderedSection role=\"group\">\n        <HorizontalDividerTop />\n        {variant === 'compact' ? (\n            <Compact\n                heading={heading}\n                description={description}\n                defaultExpanded={defaultExpanded}\n                onExpand={onExpand}\n                onCollapse={onCollapse}\n            >\n                {children}\n            </Compact>\n        ) : (\n            <DefaultPanel\n                heading={heading}\n                description={description}\n                buttonLabel={buttonLabel}\n                info={info}\n                defaultExpanded={defaultExpanded}\n                onExpand={onExpand}\n                onCollapse={onCollapse}\n            >\n                {children}\n            </DefaultPanel>\n        )}\n        <HorizontalDividerBottom />\n    </RenderedSection>\n);\n\nexport { Accordion, AccordionProps };\n","import React, { ReactNode, useState, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { variant } from 'styled-system';\nimport { Elevation, SemanticColors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nexport const ANIMATION_DURATION = 140;\nconst TRANSITION_KEY = 'banner-animation';\n\nconst fallDown = css`\n    top: 0;\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translateY(-100%);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translateY(-100%);\n    }\n`;\n\nconst riseUp = css`\n    bottom: 0;\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translateY(100%);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translateY(100%);\n    }\n`;\n\nconst bannerVariants = variant({\n    variants: {\n        info: {\n            backgroundColor: SemanticColors.background.secondaryEmphasized\n        },\n        success: {\n            backgroundColor: SemanticColors.background.successEmphasized\n        },\n        danger: {\n            backgroundColor: SemanticColors.background.dangerEmphasized\n        }\n    }\n});\n\ntype DismissFunc = () => void;\n\ninterface BannerProps {\n    /**\n     * Overrides the banner position.\n     */\n    position?: 'top' | 'bottom';\n    /**\n     * Set the appropriate background color, screen position, and animation.\n     */\n    variant?: 'info' | 'success' | 'danger';\n    /**\n     * A function child can be used instead of a React element. This function is\n     * called a function to dismiss the banner, which can be used to trigger the\n     * animation and unmount the component afterwards.\n     * ```jsx\n     *    <Banner>\n     *        {dismiss => (\n     *            <button onClick={() => dismiss()} />\n     *        )}\n     *    </Transition>\n     * ```\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n    /**\n     * A function that will be called after the user has dismissed the banner and\n     * the banner has disappeared.\n     */\n    onClose?: () => void;\n}\n\nconst getBannerPosition = (props: BannerProps) => {\n    if (props.position) {\n        return props.position === 'top' ? fallDown : riseUp;\n    }\n\n    return props.variant === 'danger' ? fallDown : riseUp;\n};\n\nconst AnimatedBanner = styled.div.attrs({ theme })<BannerProps>`\n    overflow: auto;\n    box-sizing: border-box;\n    padding: ${get('space.3')};\n    background-color: ${SemanticColors.background.secondaryEmphasized};\n\n    position: fixed;\n    left: 0;\n    width: 100%;\n    z-index: ${Elevation.BANNER};\n\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION * 0.75}ms ease;\n\n    ${props => getBannerPosition(props)}\n\n    ${bannerVariants}\n`;\n\nconst DismissContext = React.createContext<DismissFunc>(() => {});\n\nconst useBannerDismiss: () => DismissFunc = () => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useBannerDismiss must be used within a <Banner />');\n    }\n\n    return dismiss;\n};\n\nconst Banner: React.FC<BannerProps> = ({ children, onClose, ...rest }: BannerProps) => {\n    const [visible, setVisible] = useState(true);\n\n    const dismissFunction = () => {\n        setVisible(false);\n        if (onClose) {\n            setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(dismissFunction);\n        }\n\n        return children;\n    };\n\n    return (\n        <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n            <AnimatedBanner {...rest}>\n                <DismissContext.Provider value={dismissFunction}>{renderChildren()}</DismissContext.Provider>\n            </AnimatedBanner>\n        </CSSTransition>\n    );\n};\n\nexport { Banner, BannerProps, useBannerDismiss, DismissFunc };\n","import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\ninterface CheckmarkProps {\n    error?: boolean;\n}\n\nconst Checkmark = styled.input<CheckmarkProps>`\n    appearance: none;\n    outline-offset: 0.25rem;\n    border: none;\n\n    position: relative;\n\n    width: 1rem;\n    height: 1rem;\n    padding: 0;\n    margin: 0;\n\n    background-color: ${Colors.WHITE};\n\n    box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.AUTHENTIC_BLUE_200)};\n    border-radius: ${get('radii.2')};\n    transition: background-color 100ms, box-shadow 100ms;\n    cursor: pointer;\n\n    vertical-align: text-bottom;\n\n    &::after {\n        content: ' ';\n\n        background-image: url(\"data:image/svg+xml,%3Csvg width='16' height='16' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cdefs%3E%3Cpath d='M3.711 8.037a1.051 1.051 0 0 1 1.485-.063l1.411 1.297 4.113-4.806a1.051 1.051 0 1 1 1.597 1.367l-4.63 5.41a1.333 1.333 0 0 1-1.916.116L3.774 9.522a1.051 1.051 0 0 1-.063-1.485z' id='a'/%3E%3C/defs%3E%3Cuse fill='%23FFF' fill-rule='nonzero' xlink:href='%23a'/%3E%3C/svg%3E\");\n        background-repeat: no-repeat;\n        background-size: cover;\n        width: 1rem;\n        height: 1rem;\n\n        position: absolute;\n        top: 50%;\n        left: 45%;\n\n        opacity: 0;\n        visibility: hidden;\n        transform: translate(-45%, -40%) scale(0.2);\n        transition: visibility 175ms, opacity 150ms, scale 175ms, transform 175ms;\n    }\n\n    &:checked {\n        background-color: ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n        box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n\n        &::after {\n            opacity: 1;\n            visibility: visible;\n            transform: translate(-45%, -50%) scale(1);\n        }\n    }\n\n    &:indeterminate {\n        background-image: url(\"data:image/svg+xml,%3Csvg width='16' height='16' viewBox='0 0 16 16' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='10' height='2' x='3' y='7' rx='1' fill='%23FFF' fill-rule='nonzero'/%3E%3C/svg%3E%0A\");\n        background-color: ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n        box-shadow: inset 0 0 0 0.125rem ${props => (props.error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900)};\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n        box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n\n        &:hover {\n            box-shadow: inset 0 0 0 0.125rem ${Colors.AUTHENTIC_BLUE_50};\n        }\n\n        &:active {\n            background-color: ${Colors.AUTHENTIC_BLUE_50};\n        }\n    }\n`;\n\nexport { Checkmark };\n","import styled from 'styled-components';\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\nconst TapArea = styled.div`\n    position: absolute;\n    width: 1.75rem;\n    height: 1.75rem;\n    border-radius: ${get('radii.3')};\n    background-color: transparent;\n    top: -0.375rem;\n    left: -0.375rem;\n    transition: background-color 125ms;\n\n    &:active {\n        background-color: ${Colors.AUTHENTIC_BLUE_50};\n    }\n`;\n\nexport { TapArea };\n","import styled, { css } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\nimport { TapArea } from './TapArea';\nimport { Checkmark } from './Checkmark';\nimport { theme } from '../../../essentials/theme';\n\ntype LabelWrapperProps = MarginProps & {\n    disabled?: boolean;\n    error?: boolean;\n    indeterminate?: boolean;\n    textVerticalAlign?: ResponsiveValue<'top' | 'center'>;\n};\n\nconst textVerticalAlignVariant = variant({\n    prop: 'textVerticalAlign',\n    variants: {\n        top: {\n            alignItems: 'flex-start'\n        },\n        center: {\n            alignItems: 'center'\n        }\n    }\n});\n\nconst hoverStyle = ({ disabled, error, indeterminate }: LabelWrapperProps) => {\n    if (disabled) {\n        return css`\n            cursor: not-allowed;\n\n            & > ${/* sc-selector */ TapArea}:active {\n                background-color: transparent;\n            }\n        `;\n    }\n    if (indeterminate) {\n        return css`\n            cursor: pointer;\n\n            & ${/* sc-selector */ TapArea}:not(:active) {\n                background-color: ${error ? Colors.NEGATIVE_ORANGE_50 : Colors.ACTION_BLUE_50};\n            }\n\n            & ${/* sc-selector */ Checkmark}:not(:checked) {\n                box-shadow: inset 0 0 0 0.125rem ${error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900};\n            }\n        `;\n    }\n    return css`\n        cursor: pointer;\n\n        & ${/* sc-selector */ TapArea}:not(:active) {\n            background-color: ${error ? Colors.NEGATIVE_ORANGE_50 : Colors.ACTION_BLUE_50};\n        }\n\n        & ${/* sc-selector */ Checkmark}:not(:checked) {\n            box-shadow: inset 0 0 0 0.125rem ${error ? Colors.NEGATIVE_ORANGE_900 : Colors.ACTION_BLUE_900};\n            background-color: ${Colors.WHITE};\n        }\n    `;\n};\n\nconst LabelWrapper = styled.label.attrs({ theme })<LabelWrapperProps>`\n    display: inline-flex;\n    position: relative;\n    user-select: none;\n\n    color: ${props => (props.disabled ? Colors.AUTHENTIC_BLUE_350 : Colors.AUTHENTIC_BLUE_900)};\n\n    font-family: ${get('fonts.normal')};\n    line-height: 1;\n\n    &:hover {\n        ${hoverStyle}\n    }\n\n    ${compose(margin, textVerticalAlignVariant)}\n`;\n\nexport { LabelWrapper };\n","import React, { ComponentPropsWithoutRef, FC, ReactNode, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { MarginProps, ResponsiveValue } from 'styled-system';\n\nimport { ClassNameProps, extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\n\nimport { Checkmark } from './components/Checkmark';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { TapArea } from './components/TapArea';\n\ninterface CheckboxProps extends Omit<ComponentPropsWithoutRef<'input'>, 'size'>, ClassNameProps, MarginProps {\n    /**\n     * Provide a label for the input which will be shown next to the checkbox\n     */\n    label?: ReactNode;\n    /**\n     * Add styles to show the checkbox has errors\n     */\n    error?: boolean;\n    /**\n     * Align label text relatively to the checkbox\n     */\n    textVerticalAlign?: ResponsiveValue<'top' | 'center'>;\n    /**\n     * Define size of the checkbox component, defaults to large\n     */\n    size?: ResponsiveValue<'small' | 'medium' | 'large'>;\n    /**\n     * Decides whether the checkbox is in an \"indeterminate\"(partially selected) state\n     */\n    indeterminate?: boolean;\n}\n\nconst WithTapAreaWrapper = styled.div<Pick<CheckboxProps, 'textVerticalAlign'>>`\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n\n    height: 1rem;\n    margin: 0 0.5rem 0 0;\n    ${({ textVerticalAlign }) => (textVerticalAlign === 'top' ? 'margin-top: 0.1875rem' : undefined)}\n`;\n\nconst Checkbox: FC<CheckboxProps> = props => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n\n    const { disabled, error, label, textVerticalAlign, size, indeterminate, ...rest } = restProps;\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = (\n            <Text onClick={e => e.stopPropagation()} disabled={disabled} fontSize={size}>\n                {label}\n            </Text>\n        );\n    }\n\n    const checkboxRef = React.createRef<HTMLInputElement>();\n\n    useEffect(() => {\n        /**\n         * this hook exists to support the \"indeterminate\" state for the checkbox, which\n         * currently can be set only using javascript (non HTML)\n         * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate\n         */\n        checkboxRef.current.indeterminate = !!indeterminate;\n    }, [indeterminate]);\n\n    return (\n        <LabelWrapper\n            indeterminate={indeterminate}\n            disabled={disabled}\n            error={error}\n            textVerticalAlign={textVerticalAlign}\n            {...marginProps}\n            {...classNameProps}\n        >\n            <WithTapAreaWrapper textVerticalAlign={textVerticalAlign}>\n                <TapArea />\n                <Checkmark ref={checkboxRef} type=\"checkbox\" disabled={disabled} error={error} {...rest} />\n            </WithTapAreaWrapper>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nCheckbox.defaultProps = {\n    textVerticalAlign: 'center',\n    // TODO: size defaults to \"large\" when theme fontSizes aliases are fixed\n    size: 'medium'\n};\n\nexport { Checkbox, CheckboxProps };\n","import { FC } from 'react';\nimport * as React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { Colors } from '../../essentials';\n\ninterface InlineSpinnerProps extends MarginProps {\n    /**\n     * Override the color of the spinner\n     */\n    color?: Colors | string;\n    /**\n     * Set the size of the component\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem',\n            borderWidth: '0.1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem',\n            borderWidth: '0.125rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst InlineSpinnerIcon: React.FC<InlineSpinnerProps> = styled.span<InlineSpinnerProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    width: 1.25rem;\n    height: 1.25rem;\n    vertical-align: text-bottom;\n    border: 0.125rem solid ${p => p.color};\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: ${rotation} 750ms linear infinite;\n\n    ${compose(margin, sizeVariant)}\n`;\n\nconst InlineSpinner: FC<InlineSpinnerProps> = (props: InlineSpinnerProps) => (\n    <span role=\"progressbar\">\n        <InlineSpinnerIcon {...props} />\n    </span>\n);\n\nInlineSpinner.defaultProps = {\n    color: Colors.AUTHENTIC_BLUE_900,\n    size: 'medium'\n};\n\nexport { InlineSpinner, InlineSpinnerProps };\n","import styled, { css } from 'styled-components';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\nconst getColor = ({ isSelected, isSelectedStartOrEnd, isWithinHoverRange, disabledDate }: DayButtonProps) => {\n    if (isSelectedStartOrEnd) {\n        return css`\n            color: ${Colors.WHITE};\n            background: ${Colors.ACTION_BLUE_900};\n            box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_1000};\n            z-index: 2;\n        `;\n    }\n\n    if (isSelected || isWithinHoverRange) {\n        return css`\n            color: ${Colors.ACTION_BLUE_900};\n            background: ${Colors.ACTION_BLUE_50};\n            box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_350};\n            z-index: 1;\n\n            &:hover {\n                cursor: pointer;\n                box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_350};\n                background: ${Colors.ACTION_BLUE_350};\n                color: ${Colors.ACTION_BLUE_1000};\n            }\n        `;\n    }\n\n    if (disabledDate) {\n        return css`\n            color: ${Colors.AUTHENTIC_BLUE_200};\n            box-shadow: 0 0 0 0.0625rem ${Colors.AUTHENTIC_BLUE_50};\n            background: ${Colors.WHITE};\n        `;\n    }\n\n    return css`\n        color: ${Colors.AUTHENTIC_BLUE_900};\n        background: ${Colors.WHITE};\n\n        &:hover {\n            cursor: pointer;\n            background: ${Colors.AUTHENTIC_BLUE_50};\n        }\n    `;\n};\n\ninterface DayButtonProps {\n    isSelected: boolean;\n    isSelectedStartOrEnd: boolean;\n    isWithinHoverRange: boolean;\n    disabledDate: boolean;\n}\n\nconst DayButton = styled.button.attrs({ type: 'button' })<DayButtonProps>`\n    width: 2.4375rem;\n    height: 2.4375rem;\n\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.normal')};\n    font-size: ${get('fontSizes.0')};\n    border: 0;\n\n    box-shadow: 0 0 0 0.0625rem ${Colors.AUTHENTIC_BLUE_200};\n    outline: none;\n\n    transition-property: background, box-shadow, color;\n    transition-duration: 200ms;\n    transition-timing-function: ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    ${getColor}\n`;\n\nexport { DayButton };\n","import React, { FC } from 'react';\nimport { useMonth, FirstDayOfWeek } from '@datepicker-react/hooks';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\n\nimport { Colors } from '../../essentials';\nimport { Text } from '../Text/Text';\nimport { Day } from './Day';\n\nconst Weekdays = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    justify-content: center;\n    margin-bottom: 0.25rem;\n`;\n\nconst DaysContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, auto);\n    justify-content: center;\n    position: relative;\n\n    grid-gap: 0.0625rem;\n`;\n\ninterface MonthProps {\n    year: number;\n    month: number;\n    firstDayOfWeek: FirstDayOfWeek;\n    locale: Locale;\n}\n\nconst Month: FC<MonthProps> = ({ year, month, firstDayOfWeek, locale }: MonthProps) => {\n    const { days, weekdayLabels, monthLabel } = useMonth({\n        year,\n        month,\n        firstDayOfWeek,\n        weekdayLabelFormat(date: Date): string {\n            return format(date, 'eeeeee', { locale });\n        },\n        monthLabelFormat(date: Date): string {\n            return format(date, 'MMMM yyyy', { locale });\n        }\n    });\n\n    return (\n        <div>\n            <Text as=\"p\" fontWeight=\"bold\" mb={2} textAlign=\"center\">\n                {monthLabel}\n            </Text>\n            <Weekdays>\n                {weekdayLabels.map(dayLabel => (\n                    <Text as=\"p\" key={dayLabel} fontSize={0} textAlign=\"center\" color={Colors.AUTHENTIC_BLUE_550}>\n                        {dayLabel}\n                    </Text>\n                ))}\n            </Weekdays>\n            <DaysContainer>\n                {days.map((day, index) => {\n                    if (typeof day === 'object') {\n                        return <Day date={day.date} key={day.date.toString()} dayLabel={day.dayLabel} />;\n                    }\n\n                    // we can use index as a key since the array is never reordered\n                    // eslint-disable-next-line react/no-array-index-key\n                    return <div key={index} />;\n                })}\n            </DaysContainer>\n        </div>\n    );\n};\n\nexport { Month };\n","import React, { FC, RefObject } from 'react';\nimport { useDatepicker, MonthType, UseDatepickerProps } from '@datepicker-react/hooks';\nimport styled from 'styled-components';\n\nimport { Colors, MediaQueries } from '../../essentials';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../icons';\nimport { Month } from './Month';\nimport { DatepickerContext } from './DatepickerContext';\nimport { GlobalDatepickerStyle } from './GlobalDatepickerStyle';\n\nconst DatepickerWrapper = styled.div<{\n    activeMonths: MonthType[];\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.activeMonths.length}, 17.5625rem);\n    grid-gap: 0 1.5rem;\n    width: 100%;\n`;\n\nconst DatepickerContainer = styled.div`\n    display: flex;\n    padding: 0.5rem;\n    margin: 0.9375rem 0;\n    margin-left: -0.5rem;\n    box-shadow: 0 0 0.5rem 0.1875rem rgba(0, 0, 0, 0.08);\n\n    position: relative;\n    background: ${Colors.WHITE};\n\n    &::before {\n        content: '';\n        position: absolute;\n        transform: rotate(45deg);\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${Colors.WHITE};\n        box-shadow: -0.25rem -0.25rem 0.5rem -0.125rem rgba(0, 0, 0, 0.08);\n    }\n\n    ${MediaQueries.small} {\n        padding: 1.5rem;\n        margin-left: 0;\n    }\n`;\n\nconst Back = styled(ChevronLeftIcon)`\n    position: absolute;\n    left: 1.5rem;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Forward = styled(ChevronRightIcon)`\n    position: absolute;\n    right: 1.5rem;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\ninterface BaseDatepickerProps extends UseDatepickerProps {\n    forwardedRef: RefObject<HTMLDivElement>;\n    locale: Locale;\n}\n\nexport const BaseDatepicker: FC<BaseDatepickerProps> = ({\n    forwardedRef,\n    focusedInput,\n    locale,\n    ...datepickerProps\n}: BaseDatepickerProps) => {\n    const {\n        firstDayOfWeek,\n        activeMonths,\n        isDateSelected,\n        isDateHovered,\n        isFirstOrLastSelectedDate,\n        isDateBlocked,\n        isDateFocused,\n        focusedDate,\n        onDateHover,\n        onDateSelect,\n        onDateFocus,\n        goToPreviousMonths,\n        goToNextMonths\n    } = useDatepicker({\n        focusedInput,\n        ...datepickerProps\n    });\n\n    return (\n        <DatepickerContext.Provider\n            value={{\n                focusedDate,\n                isDateFocused,\n                isDateSelected,\n                isDateHovered,\n                isDateBlocked,\n                isFirstOrLastSelectedDate,\n                onDateSelect,\n                onDateFocus,\n                onDateHover\n            }}\n        >\n            <GlobalDatepickerStyle />\n            <DatepickerContainer\n                ref={forwardedRef}\n                onMouseDown={e => {\n                    // Prevent mousedown event on Datepicker, so everything else dont lose focus\n                    e.preventDefault();\n                }}\n            >\n                <Back onClick={goToPreviousMonths} />\n                <Forward onClick={goToNextMonths} />\n                <DatepickerWrapper activeMonths={activeMonths}>\n                    {activeMonths.map(monthInformation => (\n                        <Month\n                            key={`${monthInformation.year}-${monthInformation.month}`}\n                            year={monthInformation.year}\n                            month={monthInformation.month}\n                            firstDayOfWeek={firstDayOfWeek}\n                            locale={locale}\n                        />\n                    ))}\n                </DatepickerWrapper>\n            </DatepickerContainer>\n        </DatepickerContext.Provider>\n    );\n};\n\nexport const Datepicker = React.forwardRef(\n    (props: Omit<BaseDatepickerProps, 'forwardedRef'>, ref: RefObject<HTMLDivElement>) => (\n        <BaseDatepicker {...props} forwardedRef={ref} />\n    )\n);\n","import { END_DATE, FirstDayOfWeek, FocusedInput, START_DATE } from '@datepicker-react/hooks';\nimport { compareDesc, Locale, parse, startOfDay, endOfDay } from 'date-fns';\nimport React, { ChangeEventHandler, FC, MutableRefObject, useEffect, useRef, useState } from 'react';\nimport TetherComponent from 'react-tether';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { Colors, Elevation, MediaQueries } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { useGeneratedId } from '../../utils/hooks/useGeneratedId';\nimport { ChevronRightIcon } from '../../icons';\nimport { Input } from '../Input/Input';\n\nimport { Datepicker } from './Datepicker';\nimport { isValidDateText } from './utils/isValidDateText';\nimport { HelperText } from '../HelperText/HelperText';\nimport { dateToDisplayText } from './utils/dateToDisplayText';\nimport { useLocaleObject } from './utils/useLocaleObject';\nimport { useOnChange } from './utils/useOnChange';\n\ntype DateRangerProps = MarginProps & WidthProps;\n\nconst DateRangeWrapper = styled.div.attrs({ theme })<DateRangerProps>`\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    z-index: 0;\n    width: 100%;\n\n    input {\n        &:focus,\n        &:active {\n            box-shadow: none;\n            border-color: ${Colors.AUTHENTIC_BLUE_200};\n        }\n    }\n\n    .startDate input {\n        border-right: 0;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n        text-align: center;\n    }\n\n    .endDate input {\n        border-left: 0;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n        text-align: center;\n    }\n\n    ${MediaQueries.small} {\n        width: 14rem;\n\n        .startDate input,\n        .endDate input {\n            text-align: left;\n        }\n    }\n\n    ${compose(margin, width)}\n`;\n\nconst DateArrow = styled(ChevronRightIcon)`\n    position: absolute;\n    left: calc(50% - 0.75rem);\n    z-index: 1;\n`;\n\nconst StartDateFocusedBlock = styled.div`\n    background: ${Colors.ACTION_BLUE_900};\n    height: 0.25rem;\n    width: calc(50% - 1.5rem);\n\n    position: absolute;\n    bottom: 0;\n    left: 0.75rem;\n`;\n\nconst EndDateFocusedBlock = styled.div`\n    background: ${Colors.ACTION_BLUE_900};\n    height: 0.25rem;\n    width: calc(50% - 1.5rem);\n\n    position: absolute;\n    bottom: 0;\n    right: 0.75rem;\n`;\n\nexport interface DateRange {\n    startDate?: Date;\n    endDate?: Date;\n}\n\ninterface DatepickerRangeInputProps extends MarginProps, WidthProps {\n    /**\n     * Placeholder for start date.\n     */\n    startPlaceholder?: string;\n    /**\n     * Placeholder for end date.\n     */\n    endPlaceholder?: string;\n    /**\n     * Label for the input.\n     */\n    label?: string;\n    /**\n     * Function that is used when datepicker closes without selected date.\n     */\n    onClose?: () => void;\n    /**\n     * Set the value for the date\n     */\n    value?: DateRange;\n    /**\n     * Function that is used when datepicker selects new date.\n     */\n    onChange?: (change: DateRange) => void;\n    /**\n     * Minimal date to select from.\n     */\n    minDate?: Date;\n    /**\n     * Maximum date to select from.\n     */\n    maxDate?: Date;\n    /**\n     * Accepts a number for first day of the week from 0 (Sunday) to 6 (Saturday).\n     * Default: 1\n     */\n    firstDayOfWeek?: FirstDayOfWeek;\n    /**\n     * Function that runs for each date and returns boolean whether date is disabled or not.\n     * Default: () => false\n     */\n    isDateBlocked?: (date: Date) => boolean;\n    /**\n     * Used to align the datepicker in relation to input.\n     * Default: left\n     */\n    placement?: 'left' | 'right' | 'center';\n    /**\n     * String to format dates.\n     * Default: dd/MM/yyyy\n     */\n    displayFormat?: string;\n    /**\n     * String to define the locale in ISO-639-1\n     * Default: en-US\n     */\n    locale?: string;\n    /**\n     * Text to be shown if error filling the input\n     * or fn to be trigger as a callback when error\n     */\n    errorHandler?: (() => void) | string;\n    /**\n     * The id to be assigned to the start date input\n     */\n    startInputId?: string;\n    /**\n     * The id to be assigned to the end date input\n     */\n    endInputId?: string;\n    /**\n     * Determines the variant\n     * @value `'compact'` displays only a single month\n     * @default 'normal'\n     */\n    variant?: 'compact' | 'normal';\n    /**\n     * Determines whether the datePicker is disabled or not\n     */\n    disabled?: boolean;\n}\n\ninterface DateRangeInputText {\n    startText: string;\n    endText: string;\n}\n\nconst dateRangeToDisplayText = (locale: Locale, displayFormat?: string, dateRange?: DateRange): DateRangeInputText => {\n    if (!dateRange) {\n        return {\n            startText: '',\n            endText: ''\n        };\n    }\n\n    return {\n        startText: dateToDisplayText(locale, displayFormat, dateRange.startDate),\n        endText: dateToDisplayText(locale, displayFormat, dateRange.endDate)\n    };\n};\n\n// https://date-fns.org/v2.12.0/docs/compareDesc\nconst isValidRange = (startDate, endDate) => {\n    if (startDate && endDate) {\n        return compareDesc(startDate, endDate) >= 0;\n    }\n\n    // Range remains valid until both values of the range are set\n    return true;\n};\n\nconst DatepickerRangeInput: FC<DatepickerRangeInputProps> = ({\n    minDate,\n    maxDate,\n    firstDayOfWeek,\n    isDateBlocked,\n    onClose,\n    startPlaceholder,\n    endPlaceholder,\n    placement = 'left',\n    label,\n    onChange,\n    displayFormat = 'dd/MM/yyyy',\n    locale = 'en-US',\n    value = {},\n    errorHandler,\n    startInputId,\n    endInputId,\n    variant = 'normal',\n    disabled,\n    ...rest\n}: DatepickerRangeInputProps) => {\n    const localeObject = useLocaleObject(locale);\n    const startDateRef = useRef<HTMLInputElement>();\n    const endDateRef = useRef<HTMLInputElement>();\n    // eslint-disable-next-line unicorn/no-null\n    const [focusedInput, setFocusedInput] = useState<FocusedInput>(null);\n    const [inputText, setInputText] = useState<DateRangeInputText>(\n        dateRangeToDisplayText(localeObject, displayFormat, value)\n    );\n    const [error, setError] = useState({ startDate: false, endDate: false });\n    const displayErrorMessage = typeof errorHandler === 'string';\n\n    const startId = useGeneratedId(startInputId);\n    const endId = useGeneratedId(endInputId);\n\n    useEffect(() => {\n        if (!focusedInput && (error.startDate || error.endDate) && typeof errorHandler === 'function') {\n            errorHandler();\n        }\n    }, [error.startDate, error.endDate, focusedInput]);\n\n    useEffect(() => {\n        setInputText(dateRangeToDisplayText(localeObject, displayFormat, value));\n    }, [value.startDate, value.endDate, displayFormat, localeObject]);\n\n    useEffect(() => {\n        // when the datepicker is open, bring focus to correct input\n\n        switch (focusedInput) {\n            case START_DATE: {\n                const startInputTarget = startDateRef.current && (startDateRef.current.children[0] as HTMLInputElement);\n\n                if (startInputTarget) {\n                    startInputTarget.focus();\n                }\n\n                break;\n            }\n            case END_DATE: {\n                const endInputTarget = endDateRef.current && (endDateRef.current.children[0] as HTMLInputElement);\n\n                if (endInputTarget) {\n                    endInputTarget.focus();\n                }\n\n                break;\n            }\n            default:\n                break;\n        }\n    }, [focusedInput]);\n\n    useOnChange(newFocusedInput => {\n        if (!newFocusedInput && onClose) {\n            onClose();\n        }\n    }, focusedInput);\n\n    const handleDateChange = (startDate?: Date, endDate?: Date) => {\n        if (onChange) {\n            onChange({ startDate: startDate && startOfDay(startDate), endDate: endDate && endOfDay(endDate) });\n        }\n    };\n\n    const handleStartDateInputChange: ChangeEventHandler<HTMLInputElement> = ({ target: { value: inputValue } }) => {\n        setInputText({\n            startText: inputValue,\n            endText: inputText.endText\n        });\n\n        const parsedDate = inputValue === '' ? undefined : parse(inputValue, displayFormat, new Date());\n        const validDate = isValidDateText(parsedDate, inputValue, displayFormat);\n        const validRange = isValidRange(parsedDate, value.endDate);\n        const hasError = (!!inputValue && !validDate) || !validRange;\n\n        if (!hasError) {\n            handleDateChange(parsedDate, value.endDate);\n        }\n\n        setError(state => ({\n            ...state,\n            startDate: hasError\n        }));\n    };\n\n    const handleEndDateInputChange: ChangeEventHandler<HTMLInputElement> = ({ target: { value: inputValue } }) => {\n        setInputText({\n            startText: inputText.startText,\n            endText: inputValue\n        });\n\n        const parsedDate = inputValue === '' ? undefined : parse(inputValue, displayFormat, new Date());\n        const validDate = isValidDateText(parsedDate, inputValue, displayFormat);\n        const validRange = isValidRange(value.startDate, parsedDate);\n        const hasError = (!!inputValue && !validDate) || !validRange;\n\n        if (!hasError) {\n            handleDateChange(value.startDate, parsedDate);\n        }\n\n        setError(state => ({\n            ...state,\n            endDate: hasError\n        }));\n    };\n\n    return (\n        <TetherComponent\n            attachment={`top ${placement}`}\n            targetAttachment={`bottom ${placement}`}\n            constraints={[\n                {\n                    to: 'window',\n                    attachment: 'together'\n                }\n            ]}\n            renderTarget={(ref: MutableRefObject<HTMLDivElement>) => (\n                <>\n                    <DateRangeWrapper ref={ref} {...rest}>\n                        <Input\n                            id={startId}\n                            ref={startDateRef}\n                            autoComplete=\"off\"\n                            className=\"startDate\"\n                            data-testid=\"start-date-input\"\n                            label={label}\n                            placeholder={startPlaceholder}\n                            onFocus={() => setFocusedInput(START_DATE)}\n                            // eslint-disable-next-line unicorn/no-null\n                            onBlur={() => setFocusedInput(null)}\n                            value={inputText.startText}\n                            width=\"100%\"\n                            onChange={handleStartDateInputChange}\n                            data-error={error.startDate}\n                            disabled={disabled}\n                        />\n                        {focusedInput === START_DATE && <StartDateFocusedBlock />}\n                        <DateArrow color={disabled ? Colors.AUTHENTIC_BLUE_200 : Colors.AUTHENTIC_BLUE_550} />\n                        <Input\n                            id={endId}\n                            ref={endDateRef}\n                            tabIndex={!inputText.startText ? -1 : 0}\n                            autoComplete=\"off\"\n                            className=\"endDate\"\n                            data-testid=\"end-date-input\"\n                            placeholder={endPlaceholder}\n                            onFocus={() => setFocusedInput(!value.startDate ? START_DATE : END_DATE)}\n                            // eslint-disable-next-line unicorn/no-null\n                            onBlur={() => setFocusedInput(null)}\n                            value={inputText.endText}\n                            onChange={handleEndDateInputChange}\n                            width=\"100%\"\n                            data-error={error.endDate}\n                            disabled={disabled}\n                        />\n                        {focusedInput === END_DATE && <EndDateFocusedBlock />}\n                    </DateRangeWrapper>\n                    {displayErrorMessage && (error.startDate || error.endDate) && !focusedInput && (\n                        <HelperText mt=\"1\">{errorHandler || `error (${displayFormat})`}</HelperText>\n                    )}\n                </>\n            )}\n            renderElement={(ref: MutableRefObject<HTMLDivElement>) =>\n                focusedInput && (\n                    <Datepicker\n                        ref={ref}\n                        // TODO: refer to https://stash.intapps.it/projects/DS/repos/wave/pull-requests/104/overview?commentId=168382\n                        numberOfMonths={variant === 'normal' && window.innerWidth >= 768 ? 2 : 1}\n                        minBookingDays={1}\n                        startDate={value.startDate}\n                        endDate={value.endDate}\n                        minBookingDate={minDate}\n                        maxBookingDate={maxDate}\n                        firstDayOfWeek={firstDayOfWeek}\n                        focusedInput={focusedInput}\n                        onDatesChange={({ focusedInput: focusedValue, startDate, endDate }) => {\n                            setFocusedInput(focusedValue);\n                            handleDateChange(startDate || undefined, endDate || undefined);\n                        }}\n                        isDateBlocked={isDateBlocked}\n                        locale={localeObject}\n                    />\n                )\n            }\n            style={{ zIndex: Elevation.DATEPICKER }}\n        />\n    );\n};\n\nexport { DatepickerRangeInput, DatepickerRangeInputProps };\n","import React from 'react';\nimport styled, { StyledComponent } from 'styled-components';\nimport { compose, space, SpaceProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ntype DividerOffset = number | string;\n\ninterface DividerProps extends SpaceProps {\n    /**\n     * Set the direction of the divider to vertical\n     */\n    vertical?: boolean;\n    /**\n     * Set offset / margin of the divider from the surrounding content\n     */\n    offset?: DividerOffset;\n}\n\nconst HorizontalLine: StyledComponent<'div', typeof theme, DividerProps, 'theme'> = styled.div.attrs({ theme })<\n    Pick<SpaceProps, 'my'>\n>`\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n    border: 0;\n    border-top: 1px solid ${get('semanticColors.border.primary')};\n\n    ${compose(space)}\n`;\n\nconst VerticalLine: StyledComponent<'div', typeof theme, DividerProps, 'theme'> = styled.div.attrs({ theme })<\n    Pick<SpaceProps, 'mx'>\n>`\n    display: inline-block;\n    width: 0.06rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    border: 0;\n    border-left: 1px solid ${get('semanticColors.border.primary')};\n\n    ${compose(space)}\n`;\n\nconst Divider: React.FC<DividerProps> = ({ vertical = false, offset = '1rem' }: DividerProps) =>\n    vertical ? (\n        <VerticalLine mx={offset} data-testid=\"vertical-divider\" />\n    ) : (\n        <HorizontalLine my={offset} data-testid=\"horizontal-divider\" />\n    );\n\nexport { Divider, DividerProps, DividerOffset };\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { Spaces } from '../../essentials/Spaces/Spaces';\nimport { Box, BoxProps } from '../Box/Box';\n\nconst AMOUNT_OF_DECIMALS = 4;\nconst COLUMN_WIDTH = 100 / 12;\nconst GAP = Spaces[3];\n\ntype ColumnOffset = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\ntype ColumnSpan = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\nconst BorderBoxWrapper = styled(Box)`\n    box-sizing: border-box;\n`;\n\ntype RowProps = BoxProps;\n\nconst Row: FC<RowProps> = (props: RowProps) => (\n    <Box display=\"flex\" flexWrap=\"wrap\" marginRight={`-${GAP}`} {...props} />\n);\n\ninterface ColumnProps extends BoxProps {\n    span?: ColumnSpan;\n    offset?: ColumnOffset;\n}\n\nconst Column: FC<ColumnProps> = ({ span = 1, offset = 0, ...restProps }: ColumnProps) => {\n    const marginLeft = offset * COLUMN_WIDTH;\n    const width = span * COLUMN_WIDTH;\n\n    return (\n        <BorderBoxWrapper\n            flex={`0 0 ${width.toFixed(AMOUNT_OF_DECIMALS)}%`}\n            marginLeft={marginLeft ? `${marginLeft.toFixed(AMOUNT_OF_DECIMALS)}%` : undefined}\n            paddingRight={GAP}\n            {...restProps}\n        />\n    );\n};\n\nexport { Row, RowProps, Column, ColumnProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variant as styledVariant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport {\n    CheckCircleSolidIcon,\n    CloseCircleSolidIcon,\n    InfoCircleSolidIcon,\n    WarningSolidIcon,\n    IconProps\n} from '../../icons';\nimport { BoxProps, Box } from '../Box/Box';\nimport { Link } from '../Link/Link';\nimport { Text } from '../Text/Text';\nimport { Spaces } from '../../essentials';\n\ninterface InfoBannerProps extends BoxProps {\n    title: string;\n    description: string;\n    variant?: InfoBannerVariants;\n    emphasized?: boolean;\n    linkText?: string;\n    linkUrl?: string;\n}\n\ntype InfoBannerVariants = 'info' | 'success' | 'warning' | 'error';\n\ninterface BoxWithVariant extends BoxProps {\n    variant: InfoBannerVariants;\n    emphasized: boolean;\n}\n\nconst bannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: get('semanticColors.background.info'),\n            borderColor: get('semanticColors.border.info')\n        },\n        success: {\n            background: get('semanticColors.background.success'),\n            borderColor: get('semanticColors.border.success')\n        },\n        warning: {\n            background: get('semanticColors.background.warning'),\n            borderColor: get('semanticColors.border.warning')\n        },\n        error: {\n            background: get('semanticColors.background.danger'),\n            borderColor: get('semanticColors.border.danger')\n        }\n    }\n});\n\nconst emphasizedBannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: get('semanticColors.background.infoEmphasized'),\n            borderColor: get('semanticColors.border.infoEmphasized')\n        },\n        success: {\n            background: get('semanticColors.background.successEmphasized'),\n            borderColor: get('semanticColors.border.successEmphasized')\n        },\n        warning: {\n            background: get('semanticColors.background.warningEmphasized'),\n            borderColor: get('semanticColors.border.warningEmphasized')\n        },\n        error: {\n            background: get('semanticColors.background.dangerEmphasized'),\n            borderColor: get('semanticColors.border.dangerEmphasized')\n        }\n    }\n});\n\nconst iconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: get('semanticColors.icon.action')\n        },\n        success: {\n            color: get('semanticColors.icon.success')\n        },\n        warning: {\n            color: get('semanticColors.icon.primary')\n        },\n        error: {\n            color: get('semanticColors.icon.danger')\n        }\n    }\n});\n\nconst emphasizedIconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: get('semanticColors.icon.primaryInverted')\n        },\n        success: {\n            color: get('semanticColors.icon.primaryInverted')\n        },\n        warning: {\n            color: get('semanticColors.icon.primary')\n        },\n        error: {\n            color: get('semanticColors.icon.primaryInverted')\n        }\n    }\n});\n\nconst RoundedBox = styled(Box)<BoxWithVariant>`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    border-radius: ${get('radii.3')};\n    border: 0.0625rem solid;\n    padding: ${`${Spaces[1]} ${Spaces[2]} ${Spaces[1]} ${Spaces[1]}`};\n    ${({ emphasized }) => (emphasized ? emphasizedBannerVariants : bannerVariants)};\n`;\n\nconst IconBox = styled(Box)<BoxWithVariant>`\n    ${({ emphasized }) => (emphasized ? emphasizedIconColorVariants : iconColorVariants)};\n`;\n\nconst ICON_VARIANTS: {\n    [key in InfoBannerVariants]: React.FC<IconProps>;\n} = {\n    warning: WarningSolidIcon,\n    info: InfoCircleSolidIcon,\n    success: CheckCircleSolidIcon,\n    error: CloseCircleSolidIcon\n};\n\nconst ROLE_VARIANTS: {\n    [key in InfoBannerVariants]: string;\n} = {\n    error: 'alert',\n    info: 'status',\n    success: 'alert',\n    warning: 'status'\n};\n\nconst InfoBanner = ({\n    title,\n    description,\n    variant = 'info',\n    linkText,\n    linkUrl,\n    emphasized,\n    ...props\n}: InfoBannerProps): JSX.Element => {\n    const BannerIcon = ICON_VARIANTS[variant];\n    const isInverted = emphasized && variant !== 'warning';\n\n    return (\n        <RoundedBox variant={variant} emphasized={emphasized} role={ROLE_VARIANTS[variant]} {...props}>\n            <IconBox mr={1} variant={variant} emphasized={emphasized} data-testid=\"infobanner-icon-container\">\n                <BannerIcon size={20} color=\"inherit\" />\n            </IconBox>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Text fontWeight=\"bold\" textAlign=\"left\" inverted={isInverted}>\n                    {title}\n                </Text>\n                <Text fontSize=\"small\" textAlign=\"left\" inverted={isInverted}>\n                    {description}\n                </Text>\n                {linkText && linkUrl && (\n                    <Link\n                        fontSize=\"0\"\n                        textAlign=\"left\"\n                        href={linkUrl}\n                        target=\"_blank\"\n                        mt=\"0.25rem\"\n                        inverted={isInverted}\n                    >\n                        {linkText}\n                    </Link>\n                )}\n            </Box>\n        </RoundedBox>\n    );\n};\n\nexport { InfoBanner, InfoBannerProps, InfoBannerVariants };\n"],"names":[],"sourceRoot":""}