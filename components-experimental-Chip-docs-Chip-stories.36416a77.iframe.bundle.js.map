{"version":3,"file":"components-experimental-Chip-docs-Chip-stories.36416a77.iframe.bundle.js","mappings":";;;;;;AAqCA;AACA;;AAEA;AAKA;;;AAQA;;AAUA;;AAEA;AAGA;;;;ACmBA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Chip/Chip.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { type ComponentPropsWithoutRef, type ComponentType, type ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { MarginProps } from 'styled-system';\nimport { theme } from '../../../essentials/experimental/theme';\nimport { get } from '../../../utils/experimental/themeGet';\n\nimport { Text } from '../Text/Text';\nimport PlusIcon from '../../../icons/actions/PlusIcon';\nimport XCrossCircleIcon from '../../../icons/actions/XCrossCircleIcon';\n\nimport type { IconProps } from '../../../icons';\n\ninterface ChipProps extends ComponentPropsWithoutRef<'button'>, MarginProps {\n    /**\n     * The text\n     */\n    label: string;\n    /**\n     * Toggle active state\n     */\n    isActive?: boolean;\n    /**\n     * Icon to be shown on the start\n     */\n    Icon?: ComponentType<IconProps>;\n    /**\n     * Controls if the Chip can be dismissed\n     */\n    deletable: boolean;\n}\n\nconst Container = styled.div.attrs({ theme })<{ isActive: boolean }>`\n    display: inline-flex;\n    align-items: center;\n\n    cursor: pointer;\n\n    border-radius: ${get('radii.3')};\n    padding: ${get('space.2')} ${get('space.3')};\n\n    color: ${\n        props =>\n            props.isActive\n                ? 'hsla(343, 70%, 22%, 1)' // --sys-color-on-interactive-container, #5F1127\n                : 'hsla(0, 6%, 11%, 1)' // --sys-color-on-surface, #1E1A1A\n    };\n    background-color: ${\n        props =>\n            props.isActive\n                ? 'hsla(350, 46%, 95%, 1)' // --sys-color-interactive-container\n                : 'hsla(0, 6%, 94%, 1)' // --sys-color-surface-container\n    };\n\n    &:hover {\n        background-color: ${\n            props =>\n                props.isActive\n                    ? 'hsla(343, 70%, 22%, 0.16)' // --sys-color-on-interactive-container, #5F1127\n                    : 'hsla(0, 6%, 11%, 0.16)' // --sys-color-on-surface, #1E1A1A;\n        };\n    }\n`;\n\nconst Spacer = styled.div.attrs({ theme })`\n    display: inline-block;\n    margin-right: ${get('space.1')}rem;\n`;\n\nfunction Chip({ label, isActive = false, Icon = PlusIcon, deletable = false }: ChipProps): ReactElement {\n    return (\n        <Container isActive={isActive}>\n            <>\n                {Icon && <Icon size={20} />}\n                <Spacer />\n                <Text variant=\"label1\">{label}</Text>\n                <Spacer />\n                {deletable && (\n                    <XCrossCircleIcon size={20} color={isActive ? 'hsl(343, 70%, 22%)' : 'hsl(0, 6%, 38%)'} />\n                )}\n            </>\n        </Container>\n    );\n}\n\nexport { Chip, ChipProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    FontSizeProps,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps,\n    variant\n} from 'styled-system';\nimport { theme } from '../../../essentials/experimental/theme';\nimport { get } from '../../../utils/experimental/themeGet';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: theme.fonts.normal,\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst variantStyles = variant(textStyles);\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(margin, variantStyles, fontFamily, textAlign)}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}