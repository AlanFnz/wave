{"version":3,"file":"46820.7b9c2ee5.iframe.bundle.js","mappings":";;;AAyDA;;;;AAIA;AACA;;;;AArBA;;;;;;;;;;AAmCA;;;;ACuEA;AAGA;;;AC/DA;AAGA;;;ACrCA;AACA;AACA;;AAEA;;;;;ACIA;AACA;AACA;;;AAGA;;;;;;;;;;;AA7DA;AAGA;AACA;AACA;;AAKA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAKA;AAEA;AACA;AACA;AAIA;AACA;AACA;;;;AAIA;;;;;;;;AC5BA;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA;;AAIA;;;AAKA;;;;;;;;AAQA;;;;;;;;AAQA;;;;AAIA;;;;AAMA;;;;;;;AASA;;;;;;;AAcA;AC/DA;;;;;;;AAOA;;ACiDA;AACA;AACA;;;AAGA;AACA;;;ACjCA;;AAEA;AAGA;AC7BA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAMA;;;;;AAKA;;;AApDA;;AAyDA;;AAEA;;;AAUA;ACpEA;;AADA;;;;AAAA;AAWA;;;AAXA;AAeA;;;AAfA;;;AAuBA;AACA;;AAIA;;;AAGA;AACA;AASA;;ACzCA;AACA;;AAEA;;;;;ACuCA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Button/TextButton.tsx","webpack://@freenow/wave/./src/components/Card/Card.tsx","webpack://@freenow/wave/./src/components/Datepicker/Day/DayButton.tsx","webpack://@freenow/wave/./src/components/Datepicker/Month.tsx","webpack://@freenow/wave/./src/components/Datepicker/Datepicker.tsx","webpack://@freenow/wave/./src/components/Dimming/Dimming.tsx","webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/HelperText/HelperText.tsx","webpack://@freenow/wave/./src/components/Modal/components/CenteredCard.tsx","webpack://@freenow/wave/./src/components/Modal/components/DimmingFade.tsx","webpack://@freenow/wave/./src/components/Modal/components/TopRightXIcon.tsx","webpack://@freenow/wave/./src/components/Modal/Modal.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { deprecatedProperty } from '../../utils/deprecatedProperty';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the button width to 100% of the parent\n     * @deprecated\n     */\n    block?: boolean;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n/**\n * @deprecated\n */\nfunction handleBlockProp({ block }: BaseButtonProps): string {\n    if (block !== undefined) {\n        deprecatedProperty('Button', block, 'block', 'width');\n    }\n\n    if (block) {\n        return 'width: 100%';\n    }\n\n    return '';\n}\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n    ${handleBlockProp};\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Adjust colors for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<'primary' | 'secondary' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.text'),\n            fill: get('semanticColors.button.primary.icon'),\n            background: get('semanticColors.button.primary.background'),\n            borderColor: get('semanticColors.button.primary.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHover'),\n                fill: get('semanticColors.button.primary.iconHover'),\n                background: get('semanticColors.button.primary.backgroundHover'),\n                borderColor: get('semanticColors.button.primary.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabled'),\n                fill: get('semanticColors.button.primary.iconDisabled'),\n                background: get('semanticColors.button.primary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.primary.borderDisabled')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.text'),\n            fill: get('semanticColors.button.secondary.icon'),\n            background: get('semanticColors.button.secondary.background'),\n            borderColor: get('semanticColors.button.secondary.border'),\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHover'),\n                fill: get('semanticColors.button.secondary.iconHover'),\n                background: get('semanticColors.button.secondary.backgroundHover'),\n                borderColor: get('semanticColors.button.secondary.borderHover')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabled'),\n                fill: get('semanticColors.button.secondary.iconDisabled'),\n                background: get('semanticColors.button.secondary.backgroundDisabled'),\n                borderColor: get('semanticColors.button.secondary.borderDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.text'),\n            fill: get('semanticColors.button.danger.icon'),\n            background: get('semanticColors.button.danger.background'),\n            borderColor: get('semanticColors.button.danger.border'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHover'),\n                fill: get('semanticColors.button.danger.iconHover'),\n                background: get('semanticColors.button.danger.backgroundHover'),\n                borderColor: get('semanticColors.button.danger.borderHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabled'),\n                fill: get('semanticColors.button.danger.iconDisabled'),\n                background: get('semanticColors.button.danger.backgroundDisabled'),\n                borderColor: get('semanticColors.button.danger.borderDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        primary: {\n            color: get('semanticColors.button.primary.textInverted'),\n            fill: get('semanticColors.button.primary.iconInverted'),\n            background: get('semanticColors.button.primary.backgroundInverted'),\n            borderColor: get('semanticColors.button.primary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.primary.textHoverInverted'),\n                fill: get('semanticColors.button.primary.iconHoverInverted'),\n                background: get('semanticColors.button.primary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.primary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.primary.textDisabledInverted'),\n                fill: get('semanticColors.button.primary.iconDisabledInverted'),\n                background: get('semanticColors.button.primary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.primary.borderDisabledInverted')\n            }\n        },\n        secondary: {\n            color: get('semanticColors.button.secondary.textInverted'),\n            fill: get('semanticColors.button.secondary.iconInverted'),\n            background: get('semanticColors.button.secondary.backgroundInverted'),\n            borderColor: get('semanticColors.button.secondary.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.secondary.textHoverInverted'),\n                fill: get('semanticColors.button.secondary.iconHoverInverted'),\n                background: get('semanticColors.button.secondary.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.secondary.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.secondary.textDisabledInverted'),\n                fill: get('semanticColors.button.secondary.iconDisabledInverted'),\n                background: get('semanticColors.button.secondary.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.secondary.borderDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.button.danger.textInverted'),\n            fill: get('semanticColors.button.danger.iconInverted'),\n            background: get('semanticColors.button.danger.backgroundInverted'),\n            borderColor: get('semanticColors.button.danger.borderInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.button.danger.textHoverInverted'),\n                fill: get('semanticColors.button.danger.iconHoverInverted'),\n                background: get('semanticColors.button.danger.backgroundHoverInverted'),\n                borderColor: get('semanticColors.button.danger.borderHoverInverted')\n            },\n            '&:disabled': {\n                color: get('semanticColors.button.danger.textDisabledInverted'),\n                fill: get('semanticColors.button.danger.iconDisabledInverted'),\n                background: get('semanticColors.button.danger.backgroundDisabledInverted'),\n                borderColor: get('semanticColors.button.danger.borderDisabledInverted')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${p => (p.inverted ? invertedVariantStyles : variantStyles)};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { ResponsiveValue, variant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\n\ninterface TextButtonProps extends BaseButtonProps {\n    /**\n     * adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Define base colors\n     */\n    variant?: ResponsiveValue<'default' | 'danger'>;\n}\n\nconst variantStyles = variant({\n    variants: {\n        default: {\n            color: get('semanticColors.textButton.primary.text'),\n            fill: get('semanticColors.textButton.primary.icon'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.primary.textHover'),\n                fill: get('semanticColors.textButton.primary.iconHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.primary.textDisabled'),\n                fill: get('semanticColors.textButton.primary.iconDisabled')\n            }\n        },\n        danger: {\n            color: get('semanticColors.textButton.danger.text'),\n            fill: get('semanticColors.textButton.danger.icon'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.danger.textHover'),\n                fill: get('semanticColors.textButton.danger.iconHover')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.danger.textDisabled'),\n                fill: get('semanticColors.textButton.danger.iconDisabled')\n            }\n        }\n    }\n});\n\nconst invertedVariantStyles = variant({\n    variants: {\n        default: {\n            color: get('semanticColors.textButton.primary.textInverted'),\n            fill: get('semanticColors.textButton.primary.iconInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.primary.textHoverInverted'),\n                fill: get('semanticColors.textButton.primary.iconHoverInverted')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.primary.textDisabledInverted'),\n                fill: get('semanticColors.textButton.primary.iconDisabledInverted')\n            }\n        },\n        danger: {\n            color: get('semanticColors.textButton.danger.textInverted'),\n            fill: get('semanticColors.textButton.danger.iconInverted'),\n\n            '&:hover': {\n                color: get('semanticColors.textButton.danger.textHoverInverted'),\n                fill: get('semanticColors.textButton.danger.iconHoverInverted')\n            },\n\n            '&:disabled': {\n                color: get('semanticColors.textButton.danger.textDisabledInverted'),\n                fill: get('semanticColors.textButton.danger.iconDisabledInverted')\n            }\n        }\n    }\n});\n\nconst TextButton = styled(BaseButton)<TextButtonProps>`\n    transition: color 200ms, fill 200ms;\n\n    ${props => (props.inverted ? invertedVariantStyles(props) : variantStyles(props))};\n`;\n\nTextButton.defaultProps = {\n    size: 'medium',\n    variant: 'default'\n};\n\nexport { TextButton, TextButtonProps };\n","import styled, { StyledComponent } from 'styled-components';\nimport {\n    borderRadius,\n    BorderRadiusProps,\n    compose,\n    height,\n    HeightProps,\n    padding,\n    PaddingProps,\n    ResponsiveValue,\n    space,\n    SpaceProps,\n    variant,\n    width,\n    WidthProps\n} from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ntype CardProps = BorderRadiusProps &\n    HeightProps &\n    SpaceProps &\n    WidthProps &\n    PaddingProps & {\n        /**\n         * Set the visual depth of the card by adding a shadow (available values: 0, 100, 200, 300)\n         * @default 0\n         */\n        level?: ResponsiveValue<0 | 100 | 200 | 300>;\n    };\n\nconst levelVariant = variant({\n    prop: 'level',\n    variants: {\n        0: {\n            boxShadow: 'none'\n        },\n        100: {\n            boxShadow: theme.shadows.small\n        },\n        200: {\n            boxShadow: theme.shadows.medium\n        },\n        300: {\n            boxShadow: theme.shadows.large\n        }\n    }\n});\n\nconst Card: StyledComponent<'div', typeof theme, CardProps, 'theme'> = styled.div.attrs({ theme })`\n    overflow: auto;\n    box-sizing: border-box;\n    background-color: ${Colors.WHITE};\n    border-radius: ${get('radii.1')};\n    padding: ${get('space.5')};\n\n    ${compose(levelVariant, borderRadius, height, space, width, padding)}\n`;\n\nexport { Card, CardProps };\n","import styled, { css } from 'styled-components';\n\nimport { Colors } from '../../../essentials';\nimport { get } from '../../../utils/themeGet';\n\nconst getColor = ({ isSelected, isSelectedStartOrEnd, isWithinHoverRange, disabledDate }: DayButtonProps) => {\n    if (isSelectedStartOrEnd) {\n        return css`\n            color: ${Colors.WHITE};\n            background: ${Colors.ACTION_BLUE_900};\n            box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_1000};\n            z-index: 2;\n        `;\n    }\n\n    if (isSelected || isWithinHoverRange) {\n        return css`\n            color: ${Colors.ACTION_BLUE_900};\n            background: ${Colors.ACTION_BLUE_50};\n            box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_350};\n            z-index: 1;\n\n            &:hover {\n                cursor: pointer;\n                box-shadow: 0 0 0 0.0625rem ${Colors.ACTION_BLUE_350};\n                background: ${Colors.ACTION_BLUE_350};\n                color: ${Colors.ACTION_BLUE_1000};\n            }\n        `;\n    }\n\n    if (disabledDate) {\n        return css`\n            color: ${Colors.AUTHENTIC_BLUE_200};\n            box-shadow: 0 0 0 0.0625rem ${Colors.AUTHENTIC_BLUE_50};\n            background: ${Colors.WHITE};\n        `;\n    }\n\n    return css`\n        color: ${Colors.AUTHENTIC_BLUE_900};\n        background: ${Colors.WHITE};\n\n        &:hover {\n            cursor: pointer;\n            background: ${Colors.AUTHENTIC_BLUE_50};\n        }\n    `;\n};\n\ninterface DayButtonProps {\n    isSelected: boolean;\n    isSelectedStartOrEnd: boolean;\n    isWithinHoverRange: boolean;\n    disabledDate: boolean;\n}\n\nconst DayButton = styled.button.attrs({ type: 'button' })<DayButtonProps>`\n    width: 2.4375rem;\n    height: 2.4375rem;\n\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.normal')};\n    font-size: ${get('fontSizes.0')};\n    border: 0;\n\n    box-shadow: 0 0 0 0.0625rem ${Colors.AUTHENTIC_BLUE_200};\n    outline: none;\n\n    transition-property: background, box-shadow, color;\n    transition-duration: 200ms;\n    transition-timing-function: ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    ${getColor}\n`;\n\nexport { DayButton };\n","import React, { FC } from 'react';\nimport { useMonth, FirstDayOfWeek } from '@datepicker-react/hooks';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\n\nimport { generateId } from '../../utils/ids';\nimport { Colors } from '../../essentials';\nimport { Text } from '../Text/Text';\nimport { Day } from './Day';\n\nconst Weekdays = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    justify-content: center;\n    margin-bottom: 0.25rem;\n`;\n\nconst DaysContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, auto);\n    justify-content: center;\n    position: relative;\n\n    grid-gap: 0.0625rem;\n`;\n\ninterface MonthProps {\n    year: number;\n    month: number;\n    firstDayOfWeek: FirstDayOfWeek;\n    locale: Locale;\n}\n\nconst Month: FC<MonthProps> = ({ year, month, firstDayOfWeek, locale }: MonthProps) => {\n    const { days, weekdayLabels, monthLabel } = useMonth({\n        year,\n        month,\n        firstDayOfWeek,\n        weekdayLabelFormat(date: Date): string {\n            return format(date, 'eeeeee', { locale });\n        },\n        monthLabelFormat(date: Date): string {\n            return format(date, 'MMMM yyyy', { locale });\n        }\n    });\n\n    return (\n        <div>\n            <Text as=\"p\" fontWeight=\"bold\" mb={2} textAlign=\"center\">\n                {monthLabel}\n            </Text>\n            <Weekdays>\n                {weekdayLabels.map(dayLabel => (\n                    <Text as=\"p\" key={dayLabel} fontSize={0} textAlign=\"center\" color={Colors.AUTHENTIC_BLUE_550}>\n                        {dayLabel}\n                    </Text>\n                ))}\n            </Weekdays>\n            <DaysContainer>\n                {days.map(day => {\n                    if (typeof day === 'object') {\n                        return <Day date={day.date} key={day.date.toString()} dayLabel={day.dayLabel} />;\n                    }\n\n                    return <div key={generateId()} />;\n                })}\n            </DaysContainer>\n        </div>\n    );\n};\n\nexport { Month };\n","import React, { FC, RefObject } from 'react';\nimport { useDatepicker, MonthType, UseDatepickerProps } from '@datepicker-react/hooks';\nimport styled from 'styled-components';\n\nimport { Colors, MediaQueries } from '../../essentials';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../icons';\nimport { Month } from './Month';\nimport { DatepickerContext } from './DatepickerContext';\nimport { GlobalDatepickerStyle } from './GlobalDatepickerStyle';\n\nconst DatepickerWrapper = styled.div<{\n    activeMonths: MonthType[];\n}>`\n    display: grid;\n    grid-template-columns: repeat(${props => props.activeMonths.length}, 17.5625rem);\n    grid-gap: 0 1.5rem;\n    width: 100%;\n`;\n\nconst DatepickerContainer = styled.div`\n    display: flex;\n    padding: 0.5rem;\n    margin: 0.9375rem 0;\n    margin-left: -0.5rem;\n    box-shadow: 0 0 0.5rem 0.1875rem rgba(0, 0, 0, 0.08);\n\n    position: relative;\n    background: ${Colors.WHITE};\n\n    &::before {\n        content: '';\n        position: absolute;\n        transform: rotate(45deg);\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${Colors.WHITE};\n        box-shadow: -0.25rem -0.25rem 0.5rem -0.125rem rgba(0, 0, 0, 0.08);\n    }\n\n    ${MediaQueries.small} {\n        padding: 1.5rem;\n        margin-left: 0;\n    }\n`;\n\nconst Back = styled(ChevronLeftIcon)`\n    position: absolute;\n    left: 1.5rem;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst Forward = styled(ChevronRightIcon)`\n    position: absolute;\n    right: 1.5rem;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\ninterface BaseDatepickerProps extends UseDatepickerProps {\n    forwardedRef: RefObject<HTMLDivElement>;\n    locale: Locale;\n}\n\nexport const BaseDatepicker: FC<BaseDatepickerProps> = ({\n    forwardedRef,\n    focusedInput,\n    locale,\n    ...datepickerProps\n}: BaseDatepickerProps) => {\n    const {\n        firstDayOfWeek,\n        activeMonths,\n        isDateSelected,\n        isDateHovered,\n        isFirstOrLastSelectedDate,\n        isDateBlocked,\n        isDateFocused,\n        focusedDate,\n        onDateHover,\n        onDateSelect,\n        onDateFocus,\n        goToPreviousMonths,\n        goToNextMonths\n    } = useDatepicker({\n        focusedInput,\n        ...datepickerProps\n    });\n\n    return (\n        <DatepickerContext.Provider\n            value={{\n                focusedDate,\n                isDateFocused,\n                isDateSelected,\n                isDateHovered,\n                isDateBlocked,\n                isFirstOrLastSelectedDate,\n                onDateSelect,\n                onDateFocus,\n                onDateHover\n            }}\n        >\n            <GlobalDatepickerStyle />\n            <DatepickerContainer\n                ref={forwardedRef}\n                onMouseDown={e => {\n                    // Prevent mousedown event on Datepicker, so everything else dont lose focus\n                    e.preventDefault();\n                }}\n            >\n                <Back onClick={goToPreviousMonths} />\n                <Forward onClick={goToNextMonths} />\n                <DatepickerWrapper activeMonths={activeMonths}>\n                    {activeMonths.map(monthInformation => (\n                        <Month\n                            key={`${monthInformation.year}-${monthInformation.month}`}\n                            year={monthInformation.year}\n                            month={monthInformation.month}\n                            firstDayOfWeek={firstDayOfWeek}\n                            locale={locale}\n                        />\n                    ))}\n                </DatepickerWrapper>\n            </DatepickerContainer>\n        </DatepickerContext.Provider>\n    );\n};\n\nexport const Datepicker = React.forwardRef(\n    (props: Omit<BaseDatepickerProps, 'forwardedRef'>, ref: RefObject<HTMLDivElement>) => (\n        <BaseDatepicker {...props} forwardedRef={ref} />\n    )\n);\n","import styled from 'styled-components';\n\nimport { Elevation, SemanticColors } from '../../essentials';\n\nconst Dimming = styled.div`\n    background-color: ${SemanticColors.dialog.dimming};\n    height: 100%;\n    left: 0;\n    opacity: 0.6;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: ${Elevation.DIMMING};\n`;\n\nexport { Dimming };\n","import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Adjust color for display on a dark background\n     */\n    inverted?: boolean;\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nexport const DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: ${p => (p.inverted ? Colors.WHITE : Colors.AUTHENTIC_BLUE_900)};\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, ResponsiveValue, variant } from 'styled-system';\nimport { Colors } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { Text, TextProps } from '../Text/Text';\n\ninterface HelperTextProps extends TextProps {\n    /**\n     * Set the appropriate colors for component with 'info' as default\n     * @default info\n     */\n    variant?: ResponsiveValue<'info' | 'danger'>;\n    /**\n     * Adjust component for display on a dark background\n     */\n    inverted?: boolean;\n}\n\nconst getVariants = (inverted?: boolean) =>\n    variant({\n        variants: {\n            info: {\n                color: inverted ? Colors.AUTHENTIC_BLUE_350 : Colors.AUTHENTIC_BLUE_550\n            },\n            danger: {\n                color: inverted ? Colors.NEGATIVE_ORANGE_900 : Colors.NEGATIVE_ORANGE_1000\n            }\n        }\n    });\n\nconst HelperText: React.FC<HelperTextProps> = styled(Text).attrs({ theme })`\n    display: block;\n    font-size: ${get('fontSizes.0')};\n    text-align: left;\n    ${props => compose(getVariants(props.inverted), margin)};\n`;\n\nHelperText.defaultProps = {\n    inverted: false,\n    variant: 'info'\n};\n\nexport { HelperText, HelperTextProps };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst fromTop = css`\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translate(-50%, calc(-50% - 1rem));\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translate(-50%, -50%);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translate(-50%, -50%);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.98);\n    }\n`;\n\nconst scaleUp = css`\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.94);\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: 1;\n        transform: translate(-50%, -50%) scale(1);\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: 1;\n        transform: translate(-50%, -50%) scale(1);\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n        transform: translate(-50%, -50%) scale(0.98);\n    }\n`;\n\nconst StyledCard = styled(Card)<{ fullscreen?: boolean }>`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    max-height: calc(100% - 2rem);\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => (p.fullscreen ? scaleUp : fromTop)};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface CenteredCardProps extends CardProps {\n    visible: boolean;\n    fullscreen?: boolean;\n}\n\nconst CenteredCard: React.FC<CenteredCardProps> = ({ visible, width = '37.5rem', ...rest }: CenteredCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} width={width} level={rest.fullscreen ? 0 : 300} />\n    </CSSTransition>\n);\n\nexport { CenteredCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Dimming } from '../../Dimming/Dimming';\nimport { Colors } from '../../../essentials';\n\nconst TRANSITION_KEY = 'dimming-fade-animation';\nconst ANIMATION_DURATION = 200;\n\nconst fadeInAnimation = (maxOpacity = 0.6) => css`\n    transition: opacity ${ANIMATION_DURATION}ms cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n    }\n`;\n\nconst fullscreenDimming = css`\n    background-color: ${Colors.WHITE};\n    opacity: 1;\n`;\n\nconst DimmingFadeStyled = styled(Dimming)<{ fullscreen?: boolean }>`\n    will-change: opacity;\n\n    ${p => (p.fullscreen ? fadeInAnimation(1) : fadeInAnimation())};\n    ${p => (p.fullscreen ? fullscreenDimming : undefined)}\n`;\n\ninterface DimmingFadeProps {\n    visible: boolean;\n    fullscreen?: boolean;\n    onClick: (event: React.MouseEvent) => void;\n}\n\nconst DimmingFade: React.FC<DimmingFadeProps> = ({ visible, ...rest }: DimmingFadeProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <DimmingFadeStyled {...rest} />\n    </CSSTransition>\n);\n\nexport { DimmingFade, ANIMATION_DURATION };\n","import styled from 'styled-components';\nimport { Elevation, Spaces } from '../../../essentials';\nimport { CloseIcon } from '../../../icons';\n\nconst TopRightXIcon = styled(CloseIcon)`\n    position: absolute;\n    top: ${Spaces[1]};\n    right: ${Spaces[1]};\n    cursor: pointer;\n    z-index: ${Elevation.CARD_ON_DIMMING};\n`;\n\nexport { TopRightXIcon };\n","import React, { useEffect, useState, ReactNode, useContext, useRef } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { WidthProps } from 'styled-system';\nimport { useIsEscKeyPressed } from '../../utils/hooks/useIsEscKeyPressed';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION, CenteredCard } from './components/CenteredCard';\nimport { ANIMATION_DURATION as DIMMING_ANIMATION_DURATION, DimmingFade } from './components/DimmingFade';\nimport { TopRightXIcon } from './components/TopRightXIcon';\n\ntype DismissFunc = () => void;\n\nconst DismissContext = React.createContext<DismissFunc>(undefined);\n\nconst useModalDismiss = (): DismissFunc => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useModalDismiss must be used within a <Modal />');\n    }\n\n    return dismiss;\n};\n\ninterface ModalProps extends WidthProps {\n    /**\n     * Show the modal covering the whole page to focus the users attention\n     */\n    fullscreen?: boolean;\n    /**\n     * Makes the modal dismissible by the user (defaults to true)\n     */\n    dismissible?: boolean;\n    /**\n     * Function that will be called when the user intends to close the modal\n     */\n    onClose?: () => void;\n    /**\n     * Children can be rendered with a dismiss function as render prop. Calling\n     * the dismiss function will close the Modal.\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n}\n\nconst PreventBackgroundScroll = createGlobalStyle`\n    body {\n        overflow: hidden;\n    }\n`;\n\nconst ANIMATION_DURATION = Math.max(DIMMING_ANIMATION_DURATION, CARD_ANIMATION_DURATION);\n\n/*\n * We define the types for the props twice because the render props won't be inferred correctly\n * when only using `React.FC<ModalProps>`. This leads to compiler errors when passing the\n * dismiss function.\n */\nconst Modal: React.FC<ModalProps> = ({ children, onClose, dismissible, ...rest }: ModalProps) => {\n    const [visible, setVisible] = useState(true);\n    const isEscKeyPressed = useIsEscKeyPressed();\n    const closeTimeout = useRef(null);\n\n    const handleClose: DismissFunc = () => {\n        setVisible(false);\n\n        if (onClose) {\n            closeTimeout.current = setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const handleDimmingClick = () => {\n        if (dismissible && !rest.fullscreen) {\n            handleClose();\n        }\n    };\n\n    useEffect(() => {\n        if (dismissible && isEscKeyPressed) {\n            handleClose();\n        }\n    }, [dismissible, isEscKeyPressed]);\n\n    useEffect(\n        () => () => {\n            if (closeTimeout.current) clearTimeout(closeTimeout.current);\n        },\n        []\n    );\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(handleClose);\n        }\n\n        return children;\n    };\n\n    return (\n        <DismissContext.Provider value={handleClose}>\n            <DimmingFade\n                onClick={handleDimmingClick}\n                visible={visible}\n                fullscreen={rest.fullscreen}\n                data-testid=\"dimming-background\"\n            >\n                {dismissible && rest.fullscreen && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n            </DimmingFade>\n            <CenteredCard visible={visible} {...rest}>\n                {dismissible && !rest.fullscreen && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                {renderChildren()}\n            </CenteredCard>\n            <PreventBackgroundScroll />\n        </DismissContext.Provider>\n    );\n};\n\nModal.defaultProps = {\n    dismissible: true\n};\n\nexport { Modal, ModalProps, useModalDismiss };\n"],"names":[],"sourceRoot":""}