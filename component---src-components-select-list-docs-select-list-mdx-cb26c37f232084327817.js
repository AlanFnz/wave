(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{sZ6l:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return u})),n.d(t,"default",(function(){return O}));var a=n("Fcif"),l=n("+I+c"),i=(n("mXGw"),n("/FXl")),o=n("TjRS"),r=n("K0tc"),c=n("S+hm"),s=n("ZFoC"),b=n("xnqT"),p=n("/VS8"),m=(n("aD51"),["components"]),u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!Object.prototype.hasOwnProperty.call(u,"__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/SelectList/docs/SelectList.mdx"}});var d={_frontmatter:u},y=o.a;function O(e){var t,n=e.components,O=Object(l.a)(e,m);return Object(i.b)(y,Object(a.a)({},d,O,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"selectlist"},"SelectList"),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)(c.a,{mdxType:"SelectListPropsTable"}),Object(i.b)("br",null),Object(i.b)(b.a,{component:"SelectList",supportedProps:["margin","width"],mdxType:"StyledSystemLinks"}),Object(i.b)("p",null,"Additionally, most of the properties for the react-select component are passed to the component (read more on\n",Object(i.b)("a",{parentName:"p",href:"https://react-select.com/props#select-props"},"react-select.com/props"),")"),Object(i.b)("h3",{id:"disabled-props"},"Disabled props"),Object(i.b)("p",null,"The following properties have been disabled since they aren't supported by this library."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'react-select/async'")," (Feature currently not supported at FN)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"theme")," (Wave's theme)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"makeAnimated"),"(Feature currently not supported at FN)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"classNamePrefix")," (directly defined into Wave SelectList)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isLoading")," (Async not implemented yet)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"loadingMessage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isRtl"))),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)(s.b,{__position:2,__code:"<SelectList\n  id=\"select-list-playground\"\n  label=\"City\"\n  onChange={change => console.log(change)}\n  options={[\n    {\n      label: 'Barcelona',\n      value: 'bcn',\n    },\n    {\n      label: 'Hamburg',\n      value: 'ham',\n    },\n    {\n      label: 'Paris',\n      value: 'par',\n      isDisabled: true,\n    },\n  ]}\n/>",__scope:(t={props:O,DefaultLayout:o.a,SelectList:r.a,SelectListPropsTable:c.a,Playground:s.b,StyledSystemLinks:b.a,Combination:p.a},t.DefaultLayout=o.a,t._frontmatter=u,t),mdxType:"Playground"},Object(i.b)(r.a,{id:"select-list-playground",label:"City",onChange:function(e){return console.log(e)},options:[{label:"Barcelona",value:"bcn"},{label:"Hamburg",value:"ham"},{label:"Paris",value:"par",isDisabled:!0}],mdxType:"SelectList"})),Object(i.b)("h2",{id:"combinations"},"Combinations"),Object(i.b)(p.a,{variant:["boxed","bottom-lined"],size:["medium","small"],inverted:[!1,!0],error:[!1,!0],isMulti:[!1,!0],mdxType:"Combination"},(function(e,t){return Object(i.b)(r.a,Object(a.a)({key:t},e,{value:{label:"Group"},isClearable:!1,mdxType:"SelectList"}))})),Object(i.b)("h2",{id:"testing"},"Testing"),Object(i.b)("p",null,"Testing this natively using ",Object(i.b)("inlineCode",{parentName:"p"},"selectOptions")," from ",Object(i.b)("inlineCode",{parentName:"p"},"@testing-library/user-event")," is difficult as this is built on top of ",Object(i.b)("a",{parentName:"p",href:"https://react-select.com"},"react-select"),", and so doesn't contain a native select element.\nYou can test it easily using the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/romgain/react-select-event"},"react-select-event")," library like it's shown below\n(check ",Object(i.b)("a",{parentName:"p",href:"https://testing-library.com/docs/ecosystem-react-select-event/"},"here")," for more info)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},'import { render, within } from \'@testing-library/react\'\nimport selectEvent from \'react-select-event\'\n\ntest(\'should select option\', () => {\n    const { queryByLabelText } = render(\n        <Box aria-label="SearchList Container">\n            <SelectList\n                id="select-list-playground"\n                label="City"\n                onChange={(change) => console.log(change)}\n                options={[\n                    {\n                        label: "Barcelona",\n                        value: "bcn"\n                    },\n                    {\n                        label: "Hamburg",\n                        value: "ham"\n                    },\n                    {\n                        label: "Paris",\n                        value: "par"\n                    }\n                ]}\n            />\n        </Box>\n    );\n    const container = queryByLabelText(\n        \'SearchList Container\',\n    )\n\n    const inputbox = within(\n        container,\n    ).queryByRole(\'textbox\')\n            \n    // this will open the menu\n    user.type(inputbox, \'Bar\')\n\n    // use react-select-event to select the option you want\n    await selectEvent.select(container, [\'Barcelona\'])\n\n});\n')))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!Object.prototype.hasOwnProperty.call(O,"__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/SelectList/docs/SelectList.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-select-list-docs-select-list-mdx-cb26c37f232084327817.js.map