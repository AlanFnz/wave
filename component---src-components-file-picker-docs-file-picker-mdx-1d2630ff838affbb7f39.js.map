{"version":3,"sources":["webpack:///../src/components/FilePicker/docs/FilePicker.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","component","supportedProps","__position","__code","__scope","Playground","StyledSystemLinks","FilePicker","Button","Box","ControlledErrorFilePicker","FilePickerPropsTable","maxWidth","width","mx","p","accept","buttonText","label","name","onChange","e","console","log","onFileChange","file","alwaysShowActionButton","mt","onSubmit","alert","target","elements","avatar","value","files","preventDefault","mb","type","isMDXComponent"],"mappings":"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","file":"component---src-components-file-picker-docs-file-picker-mdx-1d2630ff838affbb7f39.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nimport { FilePicker, Button, Box } from '../';\nimport { ControlledErrorFilePicker } from './ControlledErrorFilePicker';\nimport { FilePickerPropsTable } from './FilePickerPropsTable';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"filepicker\"\n    }}>{`FilePicker`}</h1>\n    <p>{`This component itâ€™s a trigger opening the native file uploader.\nThis component uses default Web input type file check `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\"\n      }}>{`Mozilla Input Docs`}</a>{`\nif you need to know more about the supported attributes and values`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <FilePickerPropsTable mdxType=\"FilePickerPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"FilePicker\" supportedProps={['margin']} mdxType=\"StyledSystemLinks\" />\n    <h2 {...{\n      \"id\": \"appearance\"\n    }}>{`Appearance`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`File title`}</strong>{`: This provides a clear description of what the user should upload. If long, takes as many lines as needed extending the height of the component.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Button label`}</strong>{`: Describes the main action, it works better when short`}</li>\n      <li parentName=\"ul\">{`It is recommended to place this component together with a helper text to provide additional help for what's expected. Helper text should only appear if the user open the file explorer and doesn't select anything.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`They are mainly used in forms but can also appear in other places as a stand alone component, like item or user registration screens.`}</li>\n      <li parentName=\"ul\">{`It should be placed with a minimum of 8px `}<em parentName=\"li\">{`(\"Spaces\" value 1 for our default spaces values)`}</em>{` margin on each side`}</li>\n      <li parentName=\"ul\">{`It should be placed vertically aligned`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"behaviour\"\n    }}>{`Behaviour`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The user may select 1 file at a time.`}</li>\n      <li parentName=\"ul\">{`By default, any file format is accepted, but you can add parameters to validate a specific file format.`}</li>\n      <li parentName=\"ul\">{`The action of clicking Browse file will trigger a browser-specific upload window.`}</li>\n      <li parentName=\"ul\">{`Once the user selects the file, the browser-specific select window closes and the files will appear below the File title label.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"error\"\n    }}>{`Error`}</h3>\n    <p>{`Below you have an example of how you can properly show an error using the `}<strong parentName=\"p\">{`HelperText`}</strong>{`. You can try to submit any file to trigger the error\nand clean the input by canceling the selection to remove the error state.`}</p>\n    <ControlledErrorFilePicker mdxType=\"ControlledErrorFilePicker\" />\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <p>{`The example below will demostrate how to create compositions of `}<inlineCode parentName=\"p\">{`FilePicker`}</inlineCode></p>\n    <Playground __position={2} __code={'<Box maxWidth=\\\"100%\\\" width=\\\"30rem\\\" mx=\\\"auto\\\" p={2}>\\n  <FilePicker\\n    accept=\\\"image/png, image/jpeg\\\"\\n    buttonText=\\\"Browse files\\\"\\n    label=\\\"A picture of you\\\"\\n    name=\\\"avatar\\\"\\n    onChange={e => console.log(\\'onChange\\', e)}\\n    onFileChange={(file, e) => console.log(\\'onFileChange\\', file, e)}\\n  />\\n  <FilePicker\\n    accept=\\\"image/png, image/jpeg\\\"\\n    buttonText=\\\"Browse files\\\"\\n    label=\\\"A logo you like\\\"\\n    name=\\\"logo\\\"\\n    onChange={e => console.log(\\'onChange\\', e)}\\n    onFileChange={(file, e) => console.log(\\'onFileChange\\', file, e)}\\n    alwaysShowActionButton\\n    mt={1}\\n  />\\n  <FilePicker\\n    accept=\\\"image/png, image/jpeg\\\"\\n    buttonText=\\\"Browse files\\\"\\n    label=\\\"This provides a clear description of what the user should upload. Can be multiline\\\"\\n    name=\\\"logo\\\"\\n    onChange={e => console.log(\\'onChange\\', e)}\\n    onFileChange={(file, e) => console.log(\\'onFileChange\\', file, e)}\\n    mt={1}\\n  />\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StyledSystemLinks,\n      FilePicker,\n      Button,\n      Box,\n      ControlledErrorFilePicker,\n      FilePickerPropsTable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box maxWidth=\"100%\" width=\"30rem\" mx=\"auto\" p={2} mdxType=\"Box\">\n    <FilePicker accept=\"image/png, image/jpeg\" buttonText=\"Browse files\" label=\"A picture of you\" name=\"avatar\" onChange={e => console.log('onChange', e)} onFileChange={(file, e) => console.log('onFileChange', file, e)} mdxType=\"FilePicker\" />\n    <FilePicker accept=\"image/png, image/jpeg\" buttonText=\"Browse files\" label=\"A logo you like\" name=\"logo\" onChange={e => console.log('onChange', e)} onFileChange={(file, e) => console.log('onFileChange', file, e)} alwaysShowActionButton mt={1} mdxType=\"FilePicker\" />\n    <FilePicker accept=\"image/png, image/jpeg\" buttonText=\"Browse files\" label=\"This provides a clear description of what the user should upload. Can be multiline\" name=\"logo\" onChange={e => console.log('onChange', e)} onFileChange={(file, e) => console.log('onFileChange', file, e)} mt={1} mdxType=\"FilePicker\" />\n  </Box>\n    </Playground>\n    <p>{`In the real world you may need to deal with the `}<inlineCode parentName=\"p\">{`FilePicker`}</inlineCode>{` within a form that will handle the submission of the file. Below you will find a snippet\nthat can help as example.`}</p>\n    <p><strong parentName=\"p\">{`Tip:`}</strong>{` The `}<inlineCode parentName=\"p\">{`FilePicker`}</inlineCode>{` exposes an additional callback of `}<inlineCode parentName=\"p\">{`onFileChange`}</inlineCode>{` which signature is `}<inlineCode parentName=\"p\">{`(file, event)`}</inlineCode>{`. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/es/docs/Web/API/File\"\n      }}>{`File`}</a>{`\nand the standard input event. This is a convenient to use `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`e.target.elements.avatar.files[0]`}</inlineCode>{` check the console while using the example below.`}</p>\n    <Playground __position={3} __code={'<Box maxWidth=\\\"100%\\\" width=\\\"30rem\\\" mx=\\\"auto\\\">\\n  <form\\n    onSubmit={e => {\\n      alert(`\\n      About to submit ${e.target.elements.avatar.value}.\\n      Check console to see the value provided by the Web File API.\\n      more at https://developer.mozilla.org/es/docs/Web/API/File\\n    `)\\n      console.log(e.target.elements.avatar.files[0])\\n      e.preventDefault()\\n    }}\\n  >\\n    <Box mb={2}>\\n      <FilePicker\\n        accept=\\\"image/png, image/jpeg\\\"\\n        buttonText=\\\"Browse files\\\"\\n        label=\\\"A picture of you\\\"\\n        name=\\\"avatar\\\"\\n        onChange={e => console.log(\\'onChange\\', e)}\\n        onFileChange={(file, e) => console.log(\\'onFileChange\\', file, e)}\\n      />\\n    </Box>\\n    <Button type=\\\"submit\\\">Submit</Button>\\n  </form>\\n</Box>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      StyledSystemLinks,\n      FilePicker,\n      Button,\n      Box,\n      ControlledErrorFilePicker,\n      FilePickerPropsTable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Box maxWidth=\"100%\" width=\"30rem\" mx=\"auto\" mdxType=\"Box\">\n    <form onSubmit={e => {\n          alert(`\n        About to submit ${e.target.elements.avatar.value}.\n        Check console to see the value provided by the Web File API.\n        more at https://developer.mozilla.org/es/docs/Web/API/File\n      `);\n          console.log(e.target.elements.avatar.files[0]);\n          e.preventDefault();\n        }}>\n      <Box mb={2} mdxType=\"Box\">\n        <FilePicker accept=\"image/png, image/jpeg\" buttonText=\"Browse files\" label=\"A picture of you\" name=\"avatar\" onChange={e => console.log('onChange', e)} onFileChange={(file, e) => console.log('onFileChange', file, e)} mdxType=\"FilePicker\" />\n      </Box>\n      <Button type=\"submit\" mdxType=\"Button\">Submit</Button>\n    </form>\n  </Box>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}