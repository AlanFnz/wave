{"version":3,"sources":["webpack:///../src/components/Tooltip/docs/Tooltip.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Tooltip","TooltipPlacementExample","SimpleTooltipExample","TooltipPropsTable","content","isMDXComponent"],"mappings":"iVAWaA,EAAe,QAAG,+OAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,MAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,WAAS,WAEjB,mFACA,YAAC,IAAoB,CAACA,QAAQ,yBAC9B,uBAAK,oBAAMC,WAAW,MAClB,UAAa,gBAAc,0FAK/B,kBACE,GAAM,cAAY,cAEpB,YAAC,IAAiB,CAACD,QAAQ,sBAC3B,kBACE,GAAM,SAAO,SAEf,oLACA,kBACE,GAAM,gBAAc,cAEtB,YAAC,IAAiB,CAACA,QAAQ,sBAC3B,kBACE,GAAM,cAAY,cAEpB,sBACE,kBAAIC,WAAW,MAAI,qDACnB,kBAAIA,WAAW,MAAI,kFACnB,kBAAIA,WAAW,MAAI,kFACnB,kBAAIA,WAAW,MAAI,iFACnB,kBAAIA,WAAW,MAAI,qCAErB,kBACE,GAAM,YAAU,YAElB,sBACE,kBAAIA,WAAW,MAAI,wLAEnB,kBAAIA,WAAW,MAAI,oCACnB,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAI,WAAqB,wHAElE,kBACE,GAAM,aAAW,aAEnB,+GAA8F,0BAAYA,WAAW,KAAG,aAA2B,0RAGtI,iBAAGA,WAAW,IACvB,KAAQ,0BAAwB,QACnB,KACjB,YAAC,IAAuB,CAACD,QAAQ,4BACjC,kBACE,GAAM,cAAY,cAEpB,YAAC,IAAU,CAACE,WAAY,EAAGC,OAAQ,0EAA6EC,SAAO,GACrHL,QACAH,kBACAS,eACAC,YACAC,4BACAC,yBACAC,uBAAiB,gBACjBb,IAAa,EACbH,eAAY,GACXO,QAAQ,cACX,YAAC,IAAO,CAACU,QAAQ,mBAAmBV,QAAQ,WACxC,wBAAM,YAGV,kBACE,GAAM,mBAAiB,mBAEzB,+JACU,0BAAYC,WAAW,KAAG,gBAA8B,kDAAmD,0BAAYA,WAAW,KAAG,OAAqB,sFAChI,0BAAYA,WAAW,KAAG,OAAqB,cACnF,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBAAc,+SAelC,6OAEDJ,EAAWc,gBAAiB","file":"component---src-components-tooltip-docs-tooltip-mdx-f1dc581beb96df133754.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Tooltip } from '../Tooltip';\nimport { TooltipPlacementExample } from './TooltipPlacementExample';\nimport { SimpleTooltipExample } from './SimpleTooltipExample';\nimport { TooltipPropsTable } from './TooltipPropsTable';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <p>{`This component provides informative text to an UI element.`}</p>\n    <SimpleTooltipExample mdxType=\"SimpleTooltipExample\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Tooltip content=\"This is a regular tooltip 🏓\">\n    <div>target</div>\n</Tooltip>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <TooltipPropsTable mdxType=\"TooltipPropsTable\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`Use the tooltip for user on-boarding, guiding information about a new feature, detailed interactive workflows or for a contextual help (eg. over a button).`}</p>\n    <h2 {...{\n      \"id\": \"properties-1\"\n    }}>{`Properties`}</h2>\n    <TooltipPropsTable mdxType=\"TooltipPropsTable\" />\n    <h2 {...{\n      \"id\": \"appearance\"\n    }}>{`Appearance`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The font size is 12px and font weight is regular.`}</li>\n      <li parentName=\"ul\">{`Top and bottom padding around the text area is 4px and 8px for right and left.`}</li>\n      <li parentName=\"ul\">{`The max-width for the tooltip is 300px in desktop and 160px on mobile devices.`}</li>\n      <li parentName=\"ul\">{`The copy should be instructional and concise. Max 200 characters are allowed.`}</li>\n      <li parentName=\"ul\">{`Emojis are allowed to be used 😇`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"behavior\"\n    }}>{`Behavior`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The tooltip is accessible on hover or on tap (mobile) and should be automatically dismissed when the user stops hovering\nthe target area (or taps somewhere else on mobile devices)`}</li>\n      <li parentName=\"ul\">{`The tooltip should be eased-out.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don’ts:`}</strong>{` don't change the shape of the tooltip (rounded corners, etc), don’t crop it, don’t hide the element it hovers over`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h2>\n    <p>{`It is possible to adjust the position of the tooltip connection to the target with the `}<inlineCode parentName=\"p\">{`placement`}</inlineCode>{` prop. Below is a list\nof possible options which are represented in the square next to it. It is important to keep in mind that the tooltip\nwill be moved to a different position if it cannot be shown on the desired side due to screen sizes. Read more about the\nPopper library `}<a parentName=\"p\" {...{\n        \"href\": \"https://popper.js.org/\"\n      }}>{`here`}</a>{`.`}</p>\n    <TooltipPlacementExample mdxType=\"TooltipPlacementExample\" />\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <Playground __position={4} __code={'<Tooltip content=\\\"Tooltip Content!\\\">\\n  <span>Target</span>\\n</Tooltip>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Tooltip,\n      TooltipPlacementExample,\n      SimpleTooltipExample,\n      TooltipPropsTable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Tooltip content=\"Tooltip Content!\" mdxType=\"Tooltip\">\n        <span>Target</span>\n    </Tooltip>\n    </Playground>\n    <h2 {...{\n      \"id\": \"technical-usage\"\n    }}>{`Technical Usage`}</h2>\n    <p>{`For the Tooltip to work properly, it needs to have a single child component to bind the mouse-enter and -leave events to.\nThe library `}<inlineCode parentName=\"p\">{`react-tether`}</inlineCode>{` which is used internally works with setting a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` to the child. To avoid complications, make\nsure the child component supports the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` property.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const CustomComponent = React.forwardRef((props, ref) => (\n    <div {...props}>\n        <button ref={ref}>Hover to show tooltip</button>\n    </div>\n));\n\nconst WithTooltip = () => (\n    <Tooltip content=\"Information about your feature\">\n        <CustomComponent />\n    </Tooltip>\n)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}