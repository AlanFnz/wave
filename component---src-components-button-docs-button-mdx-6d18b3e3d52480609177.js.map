{"version":3,"sources":["webpack:///../src/components/Button/docs/Button.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","component","supportedProps","__position","__code","__scope","Playground","Button","TextButton","Box","Headline","Text","TrashBinIcon","CloseIcon","ButtonPropsTable","Combination","StyledSystemLinks","variant","size","ml","disabled","inverted","i","key","isMDXComponent"],"mappings":"yZAgBaA,EAAe,QAAG,6OAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,QAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,UAAQ,UAEhB,kCAAiB,0BAAYC,WAAW,KAAG,UAAwB,kDAAmD,0BAAYA,WAAW,KAAG,kBAAgC,QAAS,0BAAYA,WAAW,KAAG,cAA4B,yBAC9N,iBAAGA,WAAW,IAC3B,KAAQ,oEAAkE,yBAC5C,gHAElC,uVAGA,kBACE,GAAM,cAAY,cAEpB,YAAC,IAAgB,CAACD,QAAQ,qBAC1B,uBACA,YAAC,IAAiB,CAACE,UAAU,SAASC,eAAgB,CAAC,SAAU,SAAUH,QAAQ,sBACnF,YAAC,IAAiB,CAACE,UAAU,aAAaC,eAAgB,CAAC,SAAU,SAAUH,QAAQ,sBACvF,kBACE,GAAM,YAAU,YAElB,YAAC,IAAU,CAACI,WAAY,EAAGC,OAAQ,+DAAgEC,SAAO,GACxGP,QACAH,kBACAW,eACAC,WACAC,eACAC,QACAC,aACAC,SACAC,iBACAC,cACAC,qBACAC,gBACAC,uBAAiB,gBACjBrB,IAAa,EACbH,eAAY,GACXO,QAAQ,cACX,YAAC,IAAM,CAACA,QAAQ,UAAS,WACzB,YAAC,IAAU,CAACA,QAAQ,cAAa,cAEjC,kBACE,GAAM,SAAO,SAEf,yHACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAI,0BAAwC,8BACvF,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAI,0BAAwC,6BAEzF,YAAC,IAAU,CAACG,WAAY,EAAGC,OAAQ,uJAA4JC,SAAO,GACpMP,QACAH,kBACAW,eACAC,WACAC,eACAC,QACAC,aACAC,SACAC,iBACAC,cACAC,qBACAC,gBACAC,uBAAiB,gBACjBrB,IAAa,EACbH,eAAY,GACXO,QAAQ,cACX,YAAC,IAAM,CAACkB,QAAQ,SAASlB,QAAQ,UAC7B,YAAC,IAAY,CAACmB,KAAM,GAAInB,QAAQ,iBAAiB,WAEnD,YAAC,IAAM,CAACmB,KAAK,QAAQC,GAAI,EAAGpB,QAAQ,UACxC,YAAC,IAAS,CAACmB,KAAM,GAAInB,QAAQ,cAAc,YAGzC,kBACE,GAAM,gBAAc,gBAEtB,kBACE,GAAM,YAAU,UAElB,YAAC,IAAW,CAACqB,SAAU,EAAC,GAAO,GAAOH,QAAS,CAAC,UAAW,YAAa,UAAWC,KAAM,CAAC,SAAU,SAAUG,SAAU,EAAC,GAAO,GAAOtB,QAAQ,gBAC9I,SAACD,EAAOwB,GAAC,OAAK,YAAC,IAAM,aAACC,IAAKD,GAAOxB,EAAK,CAAEC,QAAQ,WAAS,aAE3D,kBACE,GAAM,cAAY,cAEpB,YAAC,IAAW,CAACqB,SAAU,EAAC,GAAO,GAAOH,QAAS,CAAC,UAAW,UAAWC,KAAM,CAAC,SAAU,SAAUG,SAAU,EAAC,GAAO,GAAOtB,QAAQ,gBACjI,SAACD,EAAOwB,GAAC,OAAK,YAAC,IAAU,aAACC,IAAKD,GAAOxB,EAAK,CAAEC,QAAQ,eAAa,mBAItE,2OAEDH,EAAW4B,gBAAiB","file":"component---src-components-button-docs-button-mdx-6d18b3e3d52480609177.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Button } from '../Button';\nimport { TextButton } from '../TextButton';\nimport { Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Text } from '../../Text/Text';\nimport { TrashBinIcon, CloseIcon } from '../../../icons/index';\nimport { ButtonPropsTable } from './ButtonPropsTable';\nimport { Combination } from '../../../docs/Combination';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`Renders a `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` tag. This module exposes two types of buttons `}<inlineCode parentName=\"p\">{`<TextButton />`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<Button />`}</inlineCode>{`.\nTake a look to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\n      }}>{`MDN web docs - Button`}</a>{` to know more\nabout some of the default props supported by a button along with some accessibility concerns.`}</p>\n    <p>{`The purpose of the buttons is to trigger an interaction like order, confirmation or submit. For navigation\ntargets consider a link. Use the primary button only once per screen and avoid putting two primary buttons next to each other.\nUse the secondary button for less important actions and in multi button scenarios.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <ButtonPropsTable mdxType=\"ButtonPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"Button\" supportedProps={['margin', 'width']} mdxType=\"StyledSystemLinks\" />\n    <StyledSystemLinks component=\"TextButton\" supportedProps={['margin', 'width']} mdxType=\"StyledSystemLinks\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={2} __code={'<Button>Regular</Button>\\n<TextButton>Text Only</TextButton>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Button,\n      TextButton,\n      Box,\n      Headline,\n      Text,\n      TrashBinIcon,\n      CloseIcon,\n      ButtonPropsTable,\n      Combination,\n      StyledSystemLinks,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Button mdxType=\"Button\">Regular</Button>\n    <TextButton mdxType=\"TextButton\">Text Only</TextButton>\n    </Playground>\n    <h3 {...{\n      \"id\": \"icons\"\n    }}>{`Icons`}</h3>\n    <p>{`Sometimes an icon can help clarify the usage of the button. The recommended sizes for the icons:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<IconName size={20} />`}</inlineCode>{` — 20px for regular button`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<IconName size={18} />`}</inlineCode>{` — 18px for small button`}</li>\n    </ul>\n    <Playground __position={3} __code={'<Button variant=\\\"danger\\\">\\n  <TrashBinIcon size={20} /> Remove\\n</Button>\\n<Button size=\\\"small\\\" ml={2}>\\n  <CloseIcon size={18} /> Remove\\n</Button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Button,\n      TextButton,\n      Box,\n      Headline,\n      Text,\n      TrashBinIcon,\n      CloseIcon,\n      ButtonPropsTable,\n      Combination,\n      StyledSystemLinks,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Button variant=\"danger\" mdxType=\"Button\">\n        <TrashBinIcon size={20} mdxType=\"TrashBinIcon\" /> Remove\n    </Button>\n      <Button size='small' ml={2} mdxType=\"Button\">\n  <CloseIcon size={18} mdxType=\"CloseIcon\" /> Remove\n      </Button>\n    </Playground>\n    <h2 {...{\n      \"id\": \"combinations\"\n    }}>{`Combinations`}</h2>\n    <h3 {...{\n      \"id\": \"button-1\"\n    }}>{`Button`}</h3>\n    <Combination disabled={[false, true]} variant={[\"primary\", \"secondary\", \"danger\"]} size={[\"medium\", \"small\"]} inverted={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <Button key={i} {...props} mdxType=\"Button\">Button</Button>}\n    </Combination>\n    <h3 {...{\n      \"id\": \"textbutton\"\n    }}>{`TextButton`}</h3>\n    <Combination disabled={[false, true]} variant={[\"default\", \"danger\"]} size={[\"medium\", \"small\"]} inverted={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <TextButton key={i} {...props} mdxType=\"TextButton\">Button</TextButton>}\n    </Combination>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}