{"version":3,"file":"components-experimental-Button-docs-Button-stories.f7094632.iframe.bundle.js","mappings":";;;;;AAwDA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA;AAGA;;;;AClBA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Button/Button.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { variant } from 'styled-system';\nimport { Button as BaseButton, ButtonProps as BaseButtonProps } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { textStyles } from '../Text/Text';\n\ntype Emphasis = 'primary' | 'secondary';\n\ninterface ButtonProps extends BaseButtonProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    emphasis?: Emphasis;\n}\n\nconst emphasisStyles = variant<Record<string, unknown>, Emphasis>({\n    prop: '$emphasis',\n    variants: {\n        primary: {\n            color: getSemanticValue('on-accent'),\n            background: getSemanticValue('accent'),\n\n            '&::before': {\n                background: getSemanticValue('on-accent')\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.38\n            }\n        },\n        secondary: {\n            color: getSemanticValue('on-surface'),\n            background: getSemanticValue('surface-variant'),\n\n            '&::before': {\n                background: getSemanticValue('on-surface')\n            },\n\n            '&[data-disabled]': {\n                opacity: 0.38\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.06\n            }\n        }\n    }\n});\n\nconst ButtonStyled = styled(BaseButton)<{ $emphasis: Emphasis }>`\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    gap: ${get('space.2')};\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: ${get('space.4')} ${get('space.6')};\n\n    cursor: pointer;\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.16;\n    }\n\n    &[data-focused]::before,\n    &[data-pressed]::before {\n        opacity: 0.24;\n    }\n\n    ${textStyles.variants.label1}\n\n    ${emphasisStyles};\n`;\n\nfunction Button({ children, emphasis = 'primary', ...restProps }: ButtonProps): ReactElement {\n    return (\n        <ButtonStyled $emphasis={emphasis} {...restProps}>\n            {children}\n        </ButtonStyled>\n    );\n}\n\nexport { Button };\n","import React from 'react';\nimport { Text as BaseText, TextContext, useContextProps, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    as?: React.ElementType;\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst variantStyles = variant(textStyles);\n\nconst StyledText = styled(BaseText).attrs({ theme })<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variantStyles)}\n`;\n\nconst Text = React.forwardRef((textProps: TextProps, forwardedRef: React.ForwardedRef<HTMLElement>) => {\n    const [props, ref] = useContextProps(textProps, forwardedRef, TextContext);\n\n    return <StyledText {...props} variant={textProps.variant || 'body1'} ref={ref} />;\n});\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}