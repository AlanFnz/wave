{"version":3,"file":"main.6de1c02c.iframe.bundle.js","mappings":";;;AAkBA;AACA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;AACA;;;;;;AAMA;ACdA;;;;AChBA;AACA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;AACA","sources":["webpack://@freenow/wave/./src/essentials/experimental/globalStyles.ts","webpack://@freenow/wave/./src/components/Box/Box.tsx","webpack://@freenow/wave/./src/essentials/Colors/globalStyles.ts"],"sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nimport { TokenObject } from '../../utils/cssVariables';\nimport { generateBareCssVariables, generateSemanticCssVariables, getSemanticValue } from './cssVariables';\nimport { SemanticColorsSchema } from './types';\n\nexport const createThemeGlobalStyle = (\n    bareVariables: TokenObject,\n    lightScheme: SemanticColorsSchema,\n    darkScheme: SemanticColorsSchema\n) => {\n    const bareCssVariables = generateBareCssVariables(bareVariables);\n    const semanticCssVariablesForLightTheme = generateSemanticCssVariables(lightScheme);\n    const semanticCssVariablesForDarkTheme = generateSemanticCssVariables(darkScheme);\n\n    return createGlobalStyle`\n  :root {\n    color-scheme: light;\n    ${bareCssVariables}\n    ${semanticCssVariablesForLightTheme}\n  }\n\n  .dark-scheme {\n    color-scheme: dark;\n    ${semanticCssVariablesForDarkTheme}\n  }\n  \n  .light-scheme {\n    color-scheme: light;\n    ${semanticCssVariablesForLightTheme}\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :root {\n      color-scheme: dark;\n      ${semanticCssVariablesForDarkTheme}\n    }\n  }\n  \n  body, .wave {\n    color: ${getSemanticValue('on-surface')};\n    background-color: ${getSemanticValue('surface')}\n  }\n  \n  svg {\n    fill: currentColor;\n  }\n`;\n};\n","import styled from 'styled-components';\nimport {\n    background,\n    BackgroundProps,\n    color,\n    ColorProps,\n    compose,\n    flexbox,\n    FlexboxProps,\n    grid,\n    GridProps,\n    layout,\n    LayoutProps,\n    position,\n    PositionProps,\n    space,\n    SpaceProps,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\ninterface BoxProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        Omit<ColorProps, 'color'>, // HACK: avoid collision of `color` prop\n        FlexboxProps,\n        GridProps,\n        BackgroundProps,\n        TextAlignProps {}\n\nconst Box = styled.div.attrs({ theme })<BoxProps>`\n    ${compose(space, layout, position, color, flexbox, grid, background, textAlign)}\n`;\n\nexport { Box, BoxProps };\n","import { createGlobalStyle } from 'styled-components';\n\nimport {\n    generateBareTierCssVariables,\n    generateSemanticTierCssVariables,\n    getSemanticValue,\n    TokenObject\n} from '../../utils/cssVariables';\nimport { SemanticColorsSchema } from './types';\n\nexport const createThemeGlobalStyle = (\n    bareVariables: TokenObject,\n    lightScheme: SemanticColorsSchema,\n    darkScheme: SemanticColorsSchema\n) => createGlobalStyle`\n  :root {\n    color-scheme: light;\n    ${generateBareTierCssVariables(bareVariables)}\n    ${generateSemanticTierCssVariables(lightScheme)}\n  }\n\n  .dark-scheme {\n    color-scheme: dark;\n    ${generateSemanticTierCssVariables(darkScheme)}\n  }\n  \n  .light-scheme {\n    color-scheme: light;\n    ${generateSemanticTierCssVariables(lightScheme)}\n  }\n\n  @media (prefers-color-scheme: dark) {\n    :root {\n      color-scheme: dark;\n      ${generateSemanticTierCssVariables(darkScheme)}\n    }\n  }\n  \n  body, .wave {\n    color: ${getSemanticValue('foreground-primary')};\n    background-color: ${getSemanticValue('background-page-default')}\n  }\n  \n  svg {\n      fill: currentColor;\n  }\n`;\n"],"names":[],"sourceRoot":""}