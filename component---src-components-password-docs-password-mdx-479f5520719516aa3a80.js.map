{"version":3,"sources":["webpack:///../src/components/Password/docs/Password.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Combination","ControlledPassword","PasswordPropsTable","Video","label","src","variant","size","disabled","inverted","error","i","key","value","isMDXComponent"],"mappings":"qiBAWO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,YADR,YAGA,+EACA,kFACA,sBACE,kBAAIC,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,6BACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,SAApB,2CAEF,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,SADR,SAGA,oCAAmB,0BAAYA,WAAW,KAAvB,gBAAnB,8GAEA,yIACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,oGAAmF,0BAAYA,WAAW,KAAvB,WAAnF,YAAmJ,0BAAYA,WAAW,KAAvB,gBAAnJ,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+DAIL,6GACA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAoBD,QAAQ,uBAC5B,iBAAQ,CACN,GAAM,WADR,WAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,0CAA6CC,SAAO,GACrFL,QACAH,kBACAS,eACAC,gBACAC,uBACAC,uBACAC,WAPqF,gBAQrFb,IARqF,EASrFH,eATqF,GAUpFO,QAAQ,cACX,YAAC,IAAD,CAAoBU,MAAM,WAAWV,QAAQ,wBAE7C,iBAAQ,CACN,GAAM,iBADR,iBAGA,sJACA,0JACA,YAAC,IAAD,CAAOW,IAAI,4BAA4BX,QAAQ,UAC/C,iIACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,oPASL,6CACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,0DACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,yDACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,2BAApB,4FACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,0BAApB,4FAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAaW,QAAS,CAAC,QAAS,gBAAiBC,KAAM,CAAC,SAAU,SAAUC,SAAU,EAAC,GAAO,GAAOC,SAAU,EAAC,GAAO,GAAOC,MAAO,EAAC,GAAO,GAAOhB,QAAQ,gBAC3J,SAACD,EAAOkB,GAAR,OAAc,YAAC,IAAD,GAAoBC,IAAKD,GAAOlB,EAAhC,CAAuCW,MAAM,WAAWS,MAAM,cAAcnB,QAAQ,iC,yNAMvGH,EAAWuB,gBAAiB","file":"component---src-components-password-docs-password-mdx-479f5520719516aa3a80.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Combination } from '../../../docs/Combination';\nimport { ControlledPassword } from './ControlledPassword';\nimport { PasswordPropsTable } from './PasswordPropsTable';\nimport { Video } from './Video';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"password\"\n    }}>{`Password`}</h1>\n    <p>{`The component to ask for a password or set a password.`}</p>\n    <p>{`It has two modes a user can toggle between with a button:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hidden`}</inlineCode>{` — the password is hidden`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`shown`}</inlineCode>{` — the password is shown as plain text`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"use-cases\"\n    }}>{`Use cases`}</h2>\n    <h3 {...{\n      \"id\": \"login\"\n    }}>{`Login`}</h3>\n    <p>{`By default, `}<inlineCode parentName=\"p\">{`<Password />`}</inlineCode>{` has the settings to be used for login screen or any case when a user\nmust provide the existing password.`}</p>\n    <p>{`In that case the browser, or the password manager will recognise the password field and will offer autocomplete.`}</p>\n    <h3 {...{\n      \"id\": \"sign-up-or-reset-password\"\n    }}>{`Sign up or reset password`}</h3>\n    <p>{`If you are in the situation when a user needs to create a new password, set `}<inlineCode parentName=\"p\">{`purpose`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`new-password`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Password purpose=\"new-password\" label=\"New password\" />\n`}</code></pre>\n    <p>{`This will allow password managers to generate a password for the user automatically.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <PasswordPropsTable mdxType=\"PasswordPropsTable\" />\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'<ControlledPassword label=\\\"Password\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Combination,\n      ControlledPassword,\n      PasswordPropsTable,\n      Video,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <ControlledPassword label=\"Password\" mdxType=\"ControlledPassword\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`The component is done with accessibility in mind and has built-in English aria labels for the button and the component state.`}</p>\n    <p>{`When screen reader user clicks the toggle mode button, the screen reader announces the new state \"Your password is hidden/shown\":`}</p>\n    <Video src=\"/public/password/a11y.mp4\" mdxType=\"Video\" />\n    <p>{`If you project supports multiple languages it is recommended to pass translated labels to the component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Password label=\"Password\" aria={{\n    showPasswordButton: 'Show password',\n    hidePasswordButton: 'Hide password',\n    messagePasswordIsHidden: 'Your password is hidden',\n    messagePasswordIsShown: 'Your password is shown'\n}}/>\n`}</code></pre>\n    <p>{`The keys to set are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`showPasswordButton`}</inlineCode>{` - the label of the button when the password is hidden`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hidePasswordButton`}</inlineCode>{` - the label of the button when the password is shown`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`messagePasswordIsHidden`}</inlineCode>{` - the message to announce the state of the component after the password value is hidden`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`messagePasswordIsShown`}</inlineCode>{` - the message to announce the state of the component after the password value is shown`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"combinations\"\n    }}>{`Combinations`}</h2>\n    <Combination variant={[\"boxed\", \"bottom-lined\"]} size={[\"medium\", \"small\"]} disabled={[false, true]} inverted={[false, true]} error={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <ControlledPassword key={i} {...props} label=\"Password\" value=\"my-password\" mdxType=\"ControlledPassword\" />}\n    </Combination>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}