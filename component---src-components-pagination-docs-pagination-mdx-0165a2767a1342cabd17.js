(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{uT1N:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return p}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk");var n=a("/FXl"),l=a("TjRS"),i=a("J+1L"),o=a("Zzo/"),r=a("8X4S");a("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/Pagination/docs/Pagination.mdx"}});var c={_frontmatter:b},u=l.a;function p(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,["components"]);return Object(n.b)(u,s({},c,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"pagination"},"Pagination"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Use pagination to split long datasets like tables and lists"),Object(n.b)("li",{parentName:"ul"},"As a rule of thumb set pagination after ",Object(n.b)("strong",{parentName:"li"},"10, 15 or 20 items")),Object(n.b)("li",{parentName:"ul"},"Use small navigation on mobile and for small datasets")),Object(n.b)("h3",{id:"normal"},"Normal"),Object(n.b)(r.a,{mdxType:"NormalPagination"}),Object(n.b)("h3",{id:"small"},"Small"),Object(n.b)(r.b,{mdxType:"SmallPagination"}),Object(n.b)("h2",{id:"api"},"API"),Object(n.b)("h3",{id:"full-example"},"Full example"),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'export default () => {\n    const PAGE_SIZE = 20;\n    const TOTAL_ITEMS = 200;\n    \n    const [currentPage, setCurrentPage] = useState(1);\n\n    const lastPage = Math.ceil(TOTAL_ITEMS / PAGE_SIZE);\n\n    return (\n        <Pagination\n            value={currentPage}\n            pageSize={PAGE_SIZE}\n            totalItems={TOTAL_ITEMS}\n            label={\n                <Text weak>\n                    Page{\' \'}\n                    <Text as="b" fontWeight="semibold" weak>\n                        {currentPage} of {lastPage}\n                    </Text>\n                </Text>\n            }\n            onNextPage={() => setCurrentPage(current => current + 1)}\n            onPrevPage={() => setCurrentPage(current => current - 1)}\n            onSkipForward={() => setCurrentPage(lastPage)}\n            onSkipBackward={() => setCurrentPage(1)}\n        />\n    );\n};\n')),Object(n.b)("h3",{id:"label"},"Label"),Object(n.b)("p",null,"The label should be used to display the current state of the pagination which\ntypically consists of the current page and the total number of pages. This can be as simple as passing a string:"),Object(n.b)(o.a,{value:1,pageSize:20,totalItems:200,label:"Page 1 of 20",mdxType:"Pagination"}),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-jsx"}),"<Pagination\n    value={currentPage}\n    pageSize={PAGE_SIZE}\n    totalItems={TOTAL_ITEMS}\n    label={`Page ${currentPage} of ${Math.ceil(TOTAL_ITEMS / PAGE_SIZE)}`}\n/>\n")),Object(n.b)("p",null,"To display a label like in the examples above you can pass a custom component:"),Object(n.b)(o.a,{value:1,pageSize:20,totalItems:200,label:Object(n.b)(i.a,{weak:!0,mdxType:"Text"},"Page"," ",Object(n.b)(i.a,{as:"b",fontWeight:"semibold",weak:!0,mdxType:"Text"},1," of ",20)),mdxType:"Pagination"}),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'<Pagination\n    value={currentPage}\n    pageSize={PAGE_SIZE}\n    totalItems={TOTAL_ITEMS}\n    label={\n        <Text weak>\n            Page{\' \'}\n            <Text as="b" fontWeight="semibold" weak>\n                {currentPage} of {lastPage}\n            </Text>\n        </Text>\n    }\n/>\n')),Object(n.b)("h3",{id:"accessibility"},"Accessibility"),Object(n.b)("p",null,"It is recommended to set ARIA labels to provide accessible names for the pagination inputs.\nThis also helps when ",Object(n.b)("a",s({parentName:"p"},{href:"#testing"}),"testing"),". You can use the following props to provide translated\nARIA labels."),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-jsx"}),'<Pagination\n    ariaLabelFirst="First"\n    ariaLabelPrevious="Previous"\n    ariaLabelNext="Next"\n    ariaLabelLast="Last"\n/>\n')),Object(n.b)("h2",{id:"testing"},"Testing"),Object(n.b)("p",null,"In tests you can use the ",Object(n.b)("inlineCode",{parentName:"p"},"aria-label")," attributes to select the individual buttons.\nHere is an example using ",Object(n.b)("inlineCode",{parentName:"p"},"@testing-library/react"),"."),Object(n.b)("pre",null,Object(n.b)("code",s({parentName:"pre"},{className:"language-jsx"}),"test('should select by aria-label', () => {\n    const { getByRole } = render(<Pagination value={1} pageSize={20} totalItems={200} />);\n    getByRole('button', { name: 'First' });\n    getByRole('button', { name: 'Previous' });\n    getByRole('button', { name: 'Next' });\n    getByRole('button', { name: 'Last' });\n});\n")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/Pagination/docs/Pagination.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-pagination-docs-pagination-mdx-0165a2767a1342cabd17.js.map