(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{jI8I:function(e,t,o){"use strict";o.r(t),o.d(t,"_frontmatter",(function(){return m})),o.d(t,"default",(function(){return j}));var n=o("Fcif"),a=o("+I+c"),i=(o("mXGw"),o("/FXl")),p=o("TjRS"),r=o("ZFoC"),l=o("XH+Y"),c=o("oxid"),b=o("/5r1"),s=o("7arR"),d=(o("aD51"),["components"]),m={};void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/Tooltip/docs/Tooltip.mdx"}});var h={_frontmatter:m},u=p.a;function j(e){var t,o=e.components,j=Object(a.a)(e,d);return Object(i.b)(u,Object(n.a)({},h,j,{components:o,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"tooltip"},"Tooltip"),Object(i.b)("p",null,"This component provides informative text to an UI element."),Object(i.b)(b.a,{mdxType:"SimpleTooltipExample"}),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},'<Tooltip content="This is a regular tooltip 🏓">\n    <div>target</div>\n</Tooltip>\n')),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)(s.a,{mdxType:"TooltipPropsTable"}),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"Use the tooltip for user on-boarding, guiding information about a new feature, detailed interactive workflows or for a contextual help (eg. over a button)."),Object(i.b)("h2",{id:"properties-1"},"Properties"),Object(i.b)(s.a,{mdxType:"TooltipPropsTable"}),Object(i.b)("h2",{id:"appearance"},"Appearance"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The font size is 12px and font weight is regular."),Object(i.b)("li",{parentName:"ul"},"Top and bottom padding around the text area is 4px and 8px for right and left."),Object(i.b)("li",{parentName:"ul"},"The max-width for the tooltip is 300px in desktop and 160px on mobile devices."),Object(i.b)("li",{parentName:"ul"},"The copy should be instructional and concise. Max 200 characters are allowed."),Object(i.b)("li",{parentName:"ul"},"Emojis are allowed to be used 😇")),Object(i.b)("h2",{id:"behavior"},"Behavior"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The tooltip is accessible on hover or on tap (mobile) and should be automatically dismissed when the user stops hovering\nthe target area (or taps somewhere else on mobile devices)"),Object(i.b)("li",{parentName:"ul"},"The tooltip should be eased-out."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Don’ts:")," don't change the shape of the tooltip (rounded corners, etc), don’t crop it, don’t hide the element it hovers over")),Object(i.b)("h2",{id:"placement"},"Placement"),Object(i.b)("p",null,"It is possible to adjust the position of the tooltip connection to the target with the ",Object(i.b)("inlineCode",{parentName:"p"},"placement")," prop. Below is a list\nof possible options which are represented in the square next to it. It is important to keep in mind that the tooltip\nwill be moved to a different position if it cannot be shown on the desired side due to screen sizes. Read more about the\nPopper library ",Object(i.b)("a",{parentName:"p",href:"https://popper.js.org/"},"here"),"."),Object(i.b)(c.a,{mdxType:"TooltipPlacementExample"}),Object(i.b)("h2",{id:"playground"},"Playground"),Object(i.b)(r.b,{__position:4,__code:'<Tooltip content="Tooltip Content!">\n  <span>Target</span>\n</Tooltip>',__scope:(t={props:j,DefaultLayout:p.a,Playground:r.b,Tooltip:l.a,TooltipPlacementExample:c.a,SimpleTooltipExample:b.a,TooltipPropsTable:s.a},t.DefaultLayout=p.a,t._frontmatter=m,t),mdxType:"Playground"},Object(i.b)(l.a,{content:"Tooltip Content!",mdxType:"Tooltip"},Object(i.b)("span",null,"Target"))),Object(i.b)("h2",{id:"technical-usage"},"Technical Usage"),Object(i.b)("p",null,"For the Tooltip to work properly, it needs to have a single child component to bind the mouse-enter and -leave events to.\nThe library ",Object(i.b)("inlineCode",{parentName:"p"},"react-tether")," which is used internally works with setting a ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," to the child. To avoid complications, make\nsure the child component supports the ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," property."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-jsx"},'const CustomComponent = React.forwardRef((props, ref) => (\n    <div {...props}>\n        <button ref={ref}>Hover to show tooltip</button>\n    </div>\n));\n\nconst WithTooltip = () => (\n    <Tooltip content="Information about your feature">\n        <CustomComponent />\n    </Tooltip>\n)\n')))}void 0!==j&&j&&j===Object(j)&&Object.isExtensible(j)&&!Object.prototype.hasOwnProperty.call(j,"__filemeta")&&Object.defineProperty(j,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/Tooltip/docs/Tooltip.mdx"}}),j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-tooltip-docs-tooltip-mdx-59ed12baeb08e5034ac9.js.map