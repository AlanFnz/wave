{"version":3,"sources":["webpack:///../src/components/Select/docs/Select.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","component","supportedProps","parentName","__position","__code","__scope","Playground","Combination","StyledSystemLinks","Select","SelectPropsTable","variant","size","label","mb","placeholder","inverted","error","i","key","isMDXComponent"],"mappings":"qiBAWO,IAAMA,EAAe,Q,uNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,UAGA,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAkBA,QAAQ,qBAC1B,uBACA,YAAC,IAAD,CAAmBC,UAAU,SAASC,eAAgB,CAAC,SAAU,SAAUF,QAAQ,sBACnF,iBAAQ,CACN,GAAM,SADR,SAGA,yFACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIG,WAAW,MAAf,6GACA,kBAAIA,WAAW,MAAf,8GACA,kBAAIA,WAAW,MAAf,mHAEF,iBAAQ,CACN,GAAM,aADR,aAGA,iIACA,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,SADR,SAGA,sBACE,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,6MACA,kBAAIA,WAAW,MAAf,4DACA,kBAAIA,WAAW,MAAf,iEAEF,iBAAQ,CACN,GAAM,mBADR,mBAGA,oCAAmB,0BAAYA,WAAW,KAAvB,eAAnB,8EAAyJ,0BAAYA,WAAW,KAAvB,YAAzJ,sCAEA,iBAAQ,CACN,GAAM,eADR,eAGA,kLACA,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,8EACA,kBAAIA,WAAW,MAAf,qUACA,kBAAIA,WAAW,MAAf,oGAAyH,kBAAIA,WAAW,MACpI,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,eACA,kBAAIA,WAAW,MAAf,uCAEJ,kBAAIA,WAAW,MAAf,wCACA,kBAAIA,WAAW,MAAf,2FAEF,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,uUAAkVC,SAAO,GAC1XP,QACAH,kBACAW,eACAC,gBACAC,sBACAC,WACAC,sBAP0X,gBAQ1Xf,IAR0X,EAS1XH,eAT0X,GAUzXO,QAAQ,cACX,YAAC,IAAD,CAAQY,QAAQ,eAAeC,KAAK,QAAQC,MAAM,OAAOC,GAAI,EAAGf,QAAQ,UACpE,qCACA,wCACA,mCAEJ,uBACA,YAAC,IAAD,CAAQc,MAAM,OAAOE,YAAY,0BAA0BhB,QAAQ,UAC/D,uCACA,oCACA,uCAGJ,iBAAQ,CACN,GAAM,WADR,WAGA,+EAA8D,0BAAYG,WAAW,KAAvB,MAA9D,iDACF,0BAAYA,WAAW,KAAvB,kBADE,gBACyE,0BAAYA,WAAW,KAAvB,0BADzE,KAEA,iCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oZAeL,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAaS,QAAS,CAAC,QAAS,gBAAiBC,KAAM,CAAC,SAAU,SAAUI,SAAU,EAAC,GAAO,GAAOC,MAAO,EAAC,GAAO,GAAOlB,QAAQ,gBAClI,SAACD,EAAOoB,GAAR,OAAc,YAAC,IAAD,GAAQC,IAAKD,EAAGL,MAAM,gBAAmBf,EAAzC,CAAgDC,QAAQ,WAAS,sCAAyB,gD,qNAM7GH,EAAWwB,gBAAiB","file":"component---src-components-select-docs-select-mdx-e8e56ea5296177d0f3c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Combination } from '../../../docs/Combination';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nimport { Select } from '../Select';\nimport { SelectPropsTable } from './SelectPropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"select\"\n    }}>{`Select`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <SelectPropsTable mdxType=\"SelectPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"Select\" supportedProps={['margin', 'width']} mdxType=\"StyledSystemLinks\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`They are typically used when user has 5-15 items to choose from.`}</p>\n    <h2 {...{\n      \"id\": \"appearance\"\n    }}>{`Appearance`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Label: It should be a sentence and as short as possible while clearly explaining the content of the menu.`}</li>\n      <li parentName=\"ul\">{`Input: by default we can include a value saying: ‘All `}{`[items name]`}{`’ or ‘Select an `}{`[item name]`}{`’`}</li>\n      <li parentName=\"ul\">{`Item list: Contains the list of all selectable items. These can be grouped into sub-categories under headings.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h2>\n    <p>{`They mainly appear in forms but they can also be in other places, like dialog boxes and advanced search.`}</p>\n    <h2 {...{\n      \"id\": \"behavior\"\n    }}>{`Behavior`}</h2>\n    <h3 {...{\n      \"id\": \"steps\"\n    }}>{`Steps`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`User clicks into the text input field`}</li>\n      <li parentName=\"ol\">{`The arrow icon placed in the input turns down and a list of possible options appear in front of all other permanent UI elements. This list appears just below the input, without hiding the input itself.`}</li>\n      <li parentName=\"ol\">{`The user can then select a single option from that list.`}</li>\n      <li parentName=\"ol\">{`The input is updated to show the option selected by the user`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"unselect-option\"\n    }}>{`Unselect option`}</h3>\n    <p>{`Passing the `}<inlineCode parentName=\"p\">{`placeholder`}</inlineCode>{` will allow users to unselect their selected option. The value sent to the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` handler\nwill be an empty string.`}</p>\n    <h2 {...{\n      \"id\": \"error-state\"\n    }}>{`Error state`}</h2>\n    <p>{`Errors are shown just in the cases the field is mandatory and just after user clicks the send/save button in the form and never after leaving the select.`}</p>\n    <h2 {...{\n      \"id\": \"items-list\"\n    }}>{`Items List`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`When the list is longer than the layer shown, include a scroll to navigate`}</li>\n      <li parentName=\"ul\">{`In cases where a menu item is longer than selector width, the menu will grow to the width of the longest item listed. However, there is a maximum width specified by the component. If the menu item exceeds the maximum width it will be truncated and we will use 3 dots including a tooltip mouse over to see all the content.`}</li>\n      <li parentName=\"ul\">{`The options will be sorted in a way that will make the most sense to the user. They can be order:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`alphabetically`}</li>\n          <li parentName=\"ul\">{`numerically`}</li>\n          <li parentName=\"ul\">{`by most commonly selected option.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Remove options that rarely get used.`}</li>\n      <li parentName=\"ul\">{`Remove the options that we know cannot be selected (eg: countries where we don’t work)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <Playground __position={1} __code={'<Select variant=\\\"bottom-lined\\\" size=\\\"small\\\" label=\\\"City\\\" mb={2}>\\n  <option>Scooter</option>\\n  <option>Ride (PHV)</option>\\n  <option>Taxi</option>\\n</Select>\\n<br />\\n<Select label=\\\"City\\\" placeholder=\\\"Select your destination\\\">\\n  <option>Barcelona</option>\\n  <option>London</option>\\n  <option>Hamburg</option>\\n</Select>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Combination,\n      StyledSystemLinks,\n      Select,\n      SelectPropsTable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Select variant=\"bottom-lined\" size=\"small\" label=\"City\" mb={2} mdxType=\"Select\">\n        <option>Scooter</option>\n        <option>Ride (PHV)</option>\n        <option>Taxi</option>\n    </Select>\n    <br />\n    <Select label=\"City\" placeholder=\"Select your destination\" mdxType=\"Select\">\n        <option>Barcelona</option>\n        <option>London</option>\n        <option>Hamburg</option>\n    </Select>\n    </Playground>\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <p>{`It is recommended for each Select component to set the `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`. This helps with a11y and allows to use the\n`}<inlineCode parentName=\"p\">{`getByLabelText`}</inlineCode>{` selector in `}<inlineCode parentName=\"p\">{`@testing-library/react`}</inlineCode>{`.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`it('can be selected by label', () => {\n    render(\n        <Select defaultValue=\"2\" label=\"Example\" id=\"test\">\n            <option value=\"1\">test 1</option>\n            <option value=\"2\">test 2</option>\n        </Select>\n    );\n\n    userEvent.selectOptions(screen.getByLabelText('Example'), '1');\n\n    expect(screen.getByLabelText('Example')).toHaveDisplayValue('test 1');\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"combinations\"\n    }}>{`Combinations`}</h2>\n    <Combination variant={[\"boxed\", \"bottom-lined\"]} size={[\"medium\", \"small\"]} inverted={[false, true]} error={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <Select key={i} label=\"Select label\" {...props} mdxType=\"Select\"><option>Option 1</option><option>Option 2</option></Select>}\n    </Combination>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}