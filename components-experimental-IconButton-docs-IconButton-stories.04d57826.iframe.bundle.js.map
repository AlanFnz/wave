{"version":3,"file":"components-experimental-IconButton-docs-IconButton-stories.04d57826.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;;;AAQA;;;;;;AAQA;;;;;;;;;;;;;;AAcA;;;;;;;;AAWA;AACA;;;;;;;;;;;AAWA;;;;;;AASA","sources":["webpack://@freenow/wave/./src/components/experimental/IconButton/IconButton.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { ButtonProps, Button } from 'react-aria-components';\nimport { IconProps } from '../../../icons';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport interface IconButtonProps extends ButtonProps {\n    isActive?: boolean;\n    variant?: 'standard' | 'tonal';\n    Icon: React.FC<IconProps>;\n    onPress: () => void;\n}\n\nconst StandardIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 2.5rem;\n    width: 2.5rem;\n    border-radius: 100%;\n    background-color: transparent;\n    border-color: transparent;\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        height: inherit;\n        width: inherit;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        opacity: 0.16;\n        background-color: ${getSemanticValue('on-surface')};\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props => (props.isActive ? getSemanticValue('interactive') : getSemanticValue('on-surface'))};\n    }\n\n    &[data-disabled] {\n        opacity: 0.38;\n    }\n`;\n\nconst TonalIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 3.5rem;\n    width: 3.5rem;\n    border-radius: 100%;\n    border-color: transparent;\n    background: none;\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        height: inherit;\n        width: inherit;\n        background-color: ${props =>\n            props.isActive && !props.isDisabled\n                ? getSemanticValue('interactive-container')\n                : getSemanticValue('surface')};\n        z-index: -1;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        background-color: color-mix(\n            in hsl,\n            ${getSemanticValue('on-surface')} 100%,\n            ${props => (props.isActive ? getSemanticValue('interactive-container') : getSemanticValue('on-surface'))}\n                100%\n        );\n        opacity: 0.16;\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props =>\n            props.isActive ? getSemanticValue('on-interactive-container') : getSemanticValue('on-surface')};\n    }\n\n    &[data-disabled] {\n        opacity: 0.38;\n    }\n`;\n\nexport const IconButton = ({\n    isDisabled = false,\n    isActive = false,\n    Icon,\n    variant = 'standard',\n    onPress\n}: IconButtonProps) =>\n    variant === 'standard' ? (\n        <StandardIconContainer\n            data-testid=\"standard-icon-container\"\n            onPress={onPress}\n            isDisabled={isDisabled}\n            isActive={isActive}\n        >\n            <Icon data-testid=\"iconbutton-icon\" />\n        </StandardIconContainer>\n    ) : (\n        <TonalIconContainer\n            data-testid=\"tonal-icon-container\"\n            onPress={onPress}\n            isDisabled={isDisabled}\n            isActive={isActive}\n        >\n            <Icon data-testid=\"iconbutton-icon\" />\n        </TonalIconContainer>\n    );\n"],"names":[],"sourceRoot":""}