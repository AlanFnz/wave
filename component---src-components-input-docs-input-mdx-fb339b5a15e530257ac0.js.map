{"version":3,"sources":["webpack:///../src/components/Input/docs/Input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","component","supportedProps","__position","__code","__scope","Playground","Input","ControlledInput","StyledSystemLinks","Combination","InputPropsTable","variant","placeholder","label","id","parentName","size","disabled","inverted","error","i","key","value","isMDXComponent"],"mappings":"6VAcaA,EAAe,Q,2OAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,SADR,SAGA,uGACA,kBACE,GAAM,cADR,cAGA,YAAC,IAAD,CAAiBA,QAAQ,oBACzB,uBACA,YAAC,IAAD,CAAmBC,UAAU,QAAQC,eAAgB,CAAC,SAAU,SAAUF,QAAQ,sBAClF,uIACA,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,2JAAsKC,SAAO,GAC9MN,QACAH,kBACAU,eACAC,UACAC,oBACAC,sBACAC,gBACAC,qBAR8M,gBAS9Mf,IAT8M,EAU9MH,eAV8M,GAW7MO,QAAQ,cACX,YAAC,IAAD,CAAiBY,QAAQ,QAAQC,YAAY,oBAAoBC,MAAM,iBAAiBC,GAAG,QAAQf,QAAQ,oBAC3G,YAAC,IAAD,CAAOc,MAAM,qBAAqBd,QAAQ,WAE1C,kBACE,GAAM,WADR,WAGA,uBAAK,oBAAMgB,WAAW,MAClB,UAAa,eADZ,o/CAoCL,kBACE,GAAM,UADR,UAGA,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,0IACA,qBAAG,sBAAQA,WAAW,KAAnB,gBAAH,sIACA,yFACA,sBACE,kBAAIA,WAAW,MAAf,0CACA,kBAAIA,WAAW,MAAf,+FACA,kBAAIA,WAAW,MAAf,gIAEF,kBACE,GAAM,cADR,cAGA,sBACE,kBAAIA,WAAW,MAAf,sCACA,kBAAIA,WAAW,MAAf,mIACA,kBAAIA,WAAW,MAAf,iIAEA,kBAAIA,WAAW,MAAf,yIACA,kBAAIA,WAAW,MAAf,gJACA,kBAAIA,WAAW,MAAf,gPACA,kBAAIA,WAAW,MAAf,yTAEF,kBACE,GAAM,aADR,aAGA,oXAEA,kBACE,GAAM,YADR,YAGA,kBACE,GAAM,UADR,UAGA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,+DACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,oEACE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAf,uNACA,kBAAIA,WAAW,MAAf,8NACA,kBAAIA,WAAW,MAAf,qKAGJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,iBAApB,kLACE,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAf,kLACA,kBAAIA,WAAW,MAAf,+IAGJ,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,wJAEF,kBACE,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAaJ,QAAS,CAAC,QAAS,gBAAiBK,KAAM,CAAC,SAAU,SAAUC,SAAU,EAAC,GAAO,GAAOC,SAAU,EAAC,GAAO,GAAOC,MAAO,EAAC,GAAO,GAAOpB,QAAQ,gBAC3J,SAACD,EAAOsB,GAAR,OAAc,YAAC,IAAD,aAAOC,IAAKD,GAAOtB,EAAnB,CAA0Be,MAAM,QAAQS,MAAM,aAAavB,QAAQ,oB,yOAMtFH,EAAW2B,gBAAiB","file":"component---src-components-input-docs-input-mdx-fb339b5a15e530257ac0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/wave/wave/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Input } from '../Input';\nimport { ControlledInput } from './ControlledInput';\nimport { StyledSystemLinks } from '../../../docs/StyledSystemLinks';\nimport { Combination } from '../../../docs/Combination';\nimport { InputPropsTable } from './InputPropsTable';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"input\"\n    }}>{`Input`}</h1>\n    <p>{`Inputs are mainly used in forms to introduce alphanumeric content and edit it.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <InputPropsTable mdxType=\"InputPropsTable\" />\n    <br />\n    <StyledSystemLinks component=\"Input\" supportedProps={['margin', 'width']} mdxType=\"StyledSystemLinks\" />\n    <p>{`Additionally, all native HTML input element props are supported and forwarded to the underlying input element.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={1} __code={'<ControlledInput\\n  variant=\\\"boxed\\\"\\n  placeholder=\\\"user@free-now.com\\\"\\n  label=\\\"E-Mail Address\\\"\\n  id=\\\"email\\\"\\n/>\\n<Input label=\\\"Uncontrolled input\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Input,\n      ControlledInput,\n      StyledSystemLinks,\n      Combination,\n      InputPropsTable,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <ControlledInput variant=\"boxed\" placeholder=\"user@free-now.com\" label=\"E-Mail Address\" id='email' mdxType=\"ControlledInput\" />\n    <Input label='Uncontrolled input' mdxType=\"Input\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport * as React from 'react';\nimport { Input } from './Input';\n\ntest('allows to be tested using accessible queries', () => {\n    const spySubmit = jest.fn();\n    const onSubmit = e => {\n        e.preventDefault();\n        const formData = new FormData(e.currentTarget);\n        spySubmit({ username: formData.get('username-name'), password: formData.get('password-name') });\n    };\n\n    render(\n        <form onSubmit={onSubmit}>\n            <Input id=\"username-id\" name=\"username-name\" label=\"username\" />\n            <Input id=\"password-id\" type=\"password\" name=\"password-name\" label=\"password\" />\n            <button type=\"submit\">Submit</button>\n        </form>\n    );\n\n    const usernameInput = screen.getByRole('textbox', { name: 'username' });\n    const passwordInput = screen.getByLabelText(/password/i);\n    const submitBtn = screen.getByRole('button', { name: /submit/i });\n\n    userEvent.type(usernameInput, 'jaimito');\n    userEvent.type(passwordInput, 'tontoelquelolea');\n    userEvent.click(submitBtn);\n\n    expect(spySubmit).toHaveBeenCalledWith({ username: 'jaimito', password: 'tontoelquelolea' });\n    // Because input type password doesn't have implicit roles (type is passing as prop as expected) https://www.w3.org/TR/html-aria/#docconformance\n    expect(screen.queryByRole('textbox', { name: 'password' })).not.toBeInTheDocument();\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"design\"\n    }}>{`Design`}</h2>\n    <p><strong parentName=\"p\">{`Boxes`}</strong>{`: When they appear in places like forms, where many text fields are placed together, their reduced emphasis helps simplify the layout.`}</p>\n    <p><strong parentName=\"p\">{`Bottom lined`}</strong>{`: Labels are aligned with the input line and always visible. They can be resting (when a field is inactive and empty) or floating.`}</p>\n    <p>{`Both types provide the same functionality. Choose the type that:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Works best with your tool visual style`}</li>\n      <li parentName=\"ul\">{`Works better with the type of users (not advanced users tend to prefer the outlined inputs)`}</li>\n      <li parentName=\"ul\">{`Best accommodates the IU goals (for searching maybe is easy to have an input line to differentiate from the rest of inputs)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"appearance\"\n    }}>{`Appearance`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`All the inputs should have a label`}</li>\n      <li parentName=\"ul\">{`Length: Its recommended to choose it accordingly to the content (e.g. small width for phone number and long width for surnames)`}</li>\n      <li parentName=\"ul\">{`Icons: Sometimes inputs can include icons on the right. The icons can:\nTrigger a custom function (for example a date picker)`}</li>\n      <li parentName=\"ul\">{`They can just be included to facilitate the content recognitions to the user (eg: in an ID input in a login form include a user icon)`}</li>\n      <li parentName=\"ul\">{`Placeholders: We include placeholder or not  if we think the user could need some instructions (eg: data format as dates or email addresses)`}</li>\n      <li parentName=\"ul\">{`Helper text: This information can appear after an error occurs or can be shown as an additional information for filling out the input when the placeholder is informing about format or the message is very long (eg: password requirements)`}</li>\n      <li parentName=\"ul\">{`Mandatory/Optional indicators: To indicate that an input is mandatory, display an asterisk  next to the label text just in the case that few inputs are mandatory.  Although, when most of the fields are required, indicate optional fields by displaying the word “optional” in parentheses next to the label text`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h3>\n    <p>{`They mainly appear in forms but can also appear in other places, like dialog boxes and search.\nIdeally the inputs should be placed in one column, in order to provide an easy reading for the users, so always use one input by row. Although is possible to add 2 columns in case of 2 inputs are related as in the case of country code and phone number`}</p>\n    <h3 {...{\n      \"id\": \"behavior\"\n    }}>{`Behavior`}</h3>\n    <h4 {...{\n      \"id\": \"states\"\n    }}>{`States`}</h4>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Default`}</strong>{`: We show the input lines or borders and the label in grey.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Focused`}</strong>{`: When the pointer is inside the field the border will turn blue.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`In some cases as long inputs like search we will show at this state a cross icon on the ride in order to delete the content written. In case of password, we show an eye icon to show the by default hidden content`}</li>\n          <li parentName=\"ul\">{`When the input just allows to include numeric data: Don’t allow to type letters and when user does it, show a tooltip saying ‘Just numbers’. When the user is in the mobile, show by default the numeric virtual keyboard.`}</li>\n          <li parentName=\"ul\">{`Placeholder text rests in the input field until the user starts entering text. It may contain an action or an example, such as a phone number or email address.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`In line Error`}</strong>{`: When a field is active or contains an error, the line’s color and label turns to red and an error text appears replacing the helper text when applicable (also in red color).`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Manage multiple errors: If only one error is possible, text describes how to avoid it. If multiple errors are possible, the text describes how to avoid the most likely error.`}</li>\n          <li parentName=\"ul\">{`Mandatory errors: Don’t show errors when a field is mandatory until user click/tap on the action button in the form to save/send changes.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Disable`}</strong>{`: when the user cannot make any action with the input. It’s recommended to show a tooltip when user is focused on the input explaining the reasons.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"combinations\"\n    }}>{`Combinations`}</h2>\n    <Combination variant={[\"boxed\", \"bottom-lined\"]} size={[\"medium\", \"small\"]} disabled={[false, true]} inverted={[false, true]} error={[false, true]} mdxType=\"Combination\">\n    {(props, i) => <Input key={i} {...props} label=\"Label\" value=\"User entry\" mdxType=\"Input\" />}\n    </Combination>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}