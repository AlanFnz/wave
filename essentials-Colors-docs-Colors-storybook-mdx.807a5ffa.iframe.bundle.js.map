{"version":3,"file":"essentials-Colors-docs-Colors-storybook-mdx.807a5ffa.iframe.bundle.js","mappings":";AAwBA;AACA;;;AAKA","sources":["webpack://@freenow/wave/./src/essentials/Colors/docs/SemanticColorsTable.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport styled from 'styled-components';\nimport { Box, Input, Table, TableCell, TableHeaderCell, TableRow } from '../../../components';\nimport { Colors, SemanticColors } from '../Colors';\n\nfunction flattenObj(\n    obj: Record<string, unknown>,\n    parent?: string,\n    result: Map<string, string> = new Map()\n): Map<string, string> {\n    Object.keys(obj).forEach(key => {\n        const propName = parent ? `${parent}.${key}` : key;\n\n        if (typeof obj[key] === 'object') {\n            flattenObj(obj[key] as Record<string, unknown>, propName, result);\n        } else {\n            result.set(propName, obj[key] as string);\n        }\n    });\n\n    return result;\n}\n\nconst ColorBlock = styled.div<{ color: string }>`\n    background-color: ${p => p.color};\n    border: 0.0625rem solid ${p => (p.color === Colors.WHITE ? Colors.AUTHENTIC_BLUE_200 : p.color)};\n    height: 1.5rem;\n    width: 4rem;\n`;\n\nconst flatSemanticColors = flattenObj(SemanticColors);\nconst flatSemanticColorsKeys = [...flatSemanticColors.keys()] as string[];\n\nexport const SemanticColorsTable: FC = () => {\n    const [nameSearchInput, setNameSearchInput] = useState('');\n\n    const filteredColorKeys = !nameSearchInput\n        ? flatSemanticColorsKeys\n        : flatSemanticColorsKeys.filter(it => it.toLowerCase().includes(nameSearchInput.toLowerCase().trim()));\n\n    return (\n        <>\n            <Table rowStyle=\"lines\" width=\"100%\" rowSize=\"small\">\n                <thead>\n                    <TableRow>\n                        <TableHeaderCell>Color</TableHeaderCell>\n                        <TableHeaderCell>\n                            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                Name\n                                <Input\n                                    placeholder=\"Filter\"\n                                    size=\"small\"\n                                    value={nameSearchInput}\n                                    onChange={e => setNameSearchInput(e.target.value)}\n                                />\n                            </Box>\n                        </TableHeaderCell>\n                        <TableHeaderCell>Hex Code</TableHeaderCell>\n                    </TableRow>\n                </thead>\n                <tbody>\n                    {filteredColorKeys.map(key => (\n                        <TableRow key={key}>\n                            <TableCell>\n                                <ColorBlock color={flatSemanticColors.get(key)} />\n                            </TableCell>\n                            <TableCell>\n                                <code>{key}</code>\n                            </TableCell>\n                            <TableCell>\n                                <code>{flatSemanticColors.get(key)}</code>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </tbody>\n            </Table>\n        </>\n    );\n};\n"],"names":[],"sourceRoot":""}